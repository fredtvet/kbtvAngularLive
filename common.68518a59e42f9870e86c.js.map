{"version":3,"sources":["./src/app/timesheet-modules/shared-timesheet/pipes/readable-duration.pipe.ts","./src/app/shared/pipes/transform-button.pipe.ts","./src/app/timesheet-modules/shared-timesheet/components/timesheet-card/timesheet-card.component.html","./src/app/timesheet-modules/shared-timesheet/components/timesheet-card/timesheet-card.component.ts","./src/app/shared/constants/forms/week-criteria-controls.const.ts","./src/app/shared/components/dynamic-form-questions/text-area-question.component.ts","./src/app/shared/directives/add-to-home-screen.directive.ts","./src/app/shared/components/dynamic-form-questions/radio-group-question.component.ts","./src/app/shared/components/abstracts/selectable-list-container.component.ts","./src/app/shared/components/dynamic-form-questions/checkbox-question.component.ts","./src/app/shared/constants/model-forms/save-mission-forms.const.ts","./src/app/core/services/ui/chips-factory.service.ts","./src/app/shared-app/helpers/add-full-name-to-user-foreign.helper.ts","./src/app/core/services/downloader.service.ts","./src/app/shared-app/helpers/object/get-set-prop-count.helper.ts","./src/app/shared-app/helpers/is-null-or-empty.helper.ts","./src/app/timesheet-modules/user-timesheet-list/user-timesheet-list/user-timesheet-list.facade.ts","./src/app/timesheet-modules/user-timesheet-list/user-timesheet-list/user-timesheet-list.state.ts","./src/app/timesheet-modules/user-timesheet-list/user-timesheet-list/user-timesheet-list-view/user-timesheet-list-view.component.html","./src/app/timesheet-modules/user-timesheet-list/user-timesheet-list/user-timesheet-list-view/user-timesheet-list-view.component.ts","./src/app/timesheet-modules/user-timesheet-list/user-timesheet-list/user-timesheet-list.component.html","./src/app/timesheet-modules/user-timesheet-list/user-timesheet-list/user-timesheet-list.component.ts","./src/app/timesheet-modules/user-timesheet-list/user-timesheet-list-routing.module.ts","./src/app/timesheet-modules/user-timesheet-list/user-timesheet-list.module.ts","./src/app/shared/pipes/sort-by-date.pipe.ts","./src/app/shared/components/chips-bar.component.ts","./src/app/shared-app/helpers/datetime/format-short-date.helper.ts","./src/app/timesheet-modules/shared-timesheet/timesheet-filter/timesheet-criteria-chip-options.const.ts","./src/app/shared-app/helpers/datetime/format-date-range.helper.ts","./src/app/shared-app/helpers/trackby/track-by-model.helper.ts","./src/app/model/helpers/get-model-property.helper.ts","./src/app/shared-app/helpers/datetime/get-month-range.helper.ts","./src/app/shared-app/helpers/datetime/get-first-day-of-month.helper.ts","./src/app/shared-app/helpers/datetime/get-last-day-of-month.helper.ts","./src/app/shared/constants/forms/timesheet-criteria-form.const.ts","./src/app/shared-app/helpers/datetime/get-range-by-date-range-preset.helper.ts","./src/app/dynamic-forms/helpers/disabled-control-map.helper.ts","./src/app/timesheet-modules/shared-timesheet/timesheet-filter/week-to-timesheet-criteria.adapter.ts","./src/app/shared-app/helpers/datetime/get-date-of-week.helper.ts","./src/app/timesheet-modules/shared-timesheet/state/save-user-timesheet/user-timesheet-form-to-save-model.adapter.ts","./src/app/timesheet-modules/shared-timesheet/state/set-timesheet-criteria.reducer.ts","./src/app/shared/constants/forms/email-form.const.ts","./src/app/shared/constants/model-forms/save-user-timesheet-form.const.ts","./src/app/shared-app/helpers/datetime/get-iso-with-timezone.helper.ts","./src/app/shared/constants/forms/password-form.const.ts","./src/app/shared/form/validators/is-same-passwords.validator.ts"],"names":["transform","hours","format","fullHours","Math","floor","minutes","ReadableDurationPipe","button","newType","type","TransformButtonPipe","ButtonTypes","Status","TimesheetCardComponent","WeekCriteriaForm","submitText","controls","required","name","valueGetter","s","year","questions","component","question","placeholder","ionFormat","valueSetter","val","Date","getFullYear","weekNr","hideOnValueChange","controlName","callback","validationErrorMessages","TextAreaQuestionComponent","elementRef","showButton","this","nativeElement","style","display","onBeforeInstallPrompt","e","preventDefault","deferredPrompt","onClick","prompt","userChoice","then","choiceResult","outcome","console","log","AddToHomeScreenDirective","formStore","ngOnInit","options$","getOptions$","optionsGetter","RadioGroupQuestionComponent","currentFabsSubject","currentFabs$","asObservable","currentSelections","next","staticFabs","onSelectionChange","selections","updateFabs","fabs","length","selectedItemsFabs","SelectableListContainerComponent","CheckboxQuestionComponent","DescriptionControl","validators","maxLength","MissionDescriptionMaxLength","EmployerControl","employer","state","options","employers","valueProp","valueFormatter","resetable","activeFilter","stringProps","MissionTypeControl","missionType","missionTypes","FinishedControl","finished","text","CreateMissionForm","EditMissionForm","createCriteriaChips","criteria","removeFn","chips","prop","value","chipOption","ignored","Function","push","color","onRemoved","createEnumSelectionChips","_enum","currentSelection","selectFn","Object","keys","filter","key","isNaN","Number","strVal","parseInt","selected","toLowerCase","ChipsFactoryService","_setFullNameOnUserForeigns","entities","users","usersObj","i","entity","user","userName","fullName","firstName","lastName","document","downloadUrl","url","link","href","click","downloadUrls","urls","delay","forEach","setTimeout","body","getElementsByTagName","createElement","appendChild","DownloaderService","_getSetPropCount","obj","ignoredProps","str","setPropCount","ignoredVal","indexOf","store","componentStore","route","criteria$","selectProperty$","filteredTimesheets$","combineLatest","pipe","map","x","records","timesheets$","userTimesheets","missions","relationCfg","timesheetCriteriaFormState$","updateCriteria","timesheetCriteria","dispatch","actionId","setInitialCriteria","selectProperty","rawCriteria","snapshot","params","JSON","parse","dateRange","dateRangePreset","Custom","UserTimesheetListFacade","UserTimesheetListProviders","provide","useValue","multi","filterClicked","editClicked","editTimesheet","id","emit","trackByTimesheet","UserTimesheetListViewComponent","routes","path","facade","router","formService","chipsFactory","modelFormService","navVm$","navConfig","getTopNavConfig","icon","aria","openTimesheetForm","mission","criteriaChips","resetCriteriaProp","entityId","initialValue","dynamicForm","disabledControls","open","formConfig","adapter","stateProp","openTimesheetFilter","formState","title","submitCallback","onBack","navigate","relativeTo","parent","activeCriteriaCount","backFn","buttons","UserTimesheetListComponent","UserTimesheetListRoutingModule","forChild","UserTimesheetListModule","dateProperty","order","SortByDatePipe","trackByChip","index","chip","handleFn","fn","ChipsBarComponent","_formatShortDate","d","date","getDate","getMonth","toString","slice","TimesheetCriteriaChipOptions","range","formatFn","start","end","_formatDateRange","status","translations","_trackByModel","identifier","get","model","_getModelDisplayValue","fkPropModelMap","displayProp","_getMonthRange","getISO","_getFirstDayOfMonth","_getLastDayOfMonth","toISOString","DateRangePresetControl","label","k","TimesheetCriteriaForm","noRenderDisabledControls","resettable","width","datePipeFormat","max","CustomMonth","overrideValueSetterControl","min","defaultOption","Open","Confirmed","onSubmitFormatter","preset","CurrentWeek","CurrentMonth","CurrentYear","ShowAll","_getRangeByDateRangePreset","_objectToDisabledObjectMap","object","disableAll","result","input","setFullYear","_getDateOfWeek","convertFormStateToEntity","missionId","comment","startTime","mergeDateAndTime","getTime","endTime","time","t","setHours","getHours","getMinutes","getSeconds","SetTimesheetCriteriaActionId","SetTimesheetCriteriaReducer","reducerFn","action","EmailForm","_timeValueDefault","DateTimeControlGroup","getRawValue","f","minuteValues","defaultValueGetter","CommentControl","CreateUserTimesheetForm","EditUserTimesheetForm","_getISO","NewPasswordControl","hideable","defaultHidden","minLength","ConfirmPasswordControl","CurrentUserPasswordForm","group","control1","control2","dirty","UserPasswordForm"],"mappings":"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","file":"common.68518a59e42f9870e86c.js","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'readableDuration'\r\n})\r\nexport class ReadableDurationPipe implements PipeTransform {\r\n\r\n  transform(hours: number, format: string = \"long\"): string {\r\n    let fullHours = Math.floor(hours); //Floor to get full hours\r\n    let minutes = Math.floor((hours - fullHours)*60); //Get leftover and convert to minutes\r\n\r\n    if(format === 'short')\r\n      return fullHours + 't ' + minutes + 'min';\r\n    else\r\n      return fullHours + ' timer ' + minutes + ' minutter';\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { AppButton } from '../../shared-app/interfaces/app-button.interface';\r\nimport { ButtonTypes } from '../../shared-app/enums/button-types.enum';\r\n\r\n@Pipe({\r\n  name: 'transformButton'\r\n})\r\nexport class TransformButtonPipe implements PipeTransform {\r\n\r\n  transform(button: AppButton, newType: ButtonTypes): AppButton {\r\n    if(!button) return undefined; //No buttons no roles   \r\n    return {...button, type: newType};\r\n  }\r\n\r\n}\r\n","<mat-card fxLayout=\"column\" fxLayoutAlign=\"space-between start\"\n   *ngIf=\"timesheet\">\n\n  <span fxLayout=\"row\" fxLayoutAlign=\"space-between stretch\" class=\"w-100\">\n\n    <span fxLayout=\"column\" fxLayoutAlign=\"start start\" class=\"ellipsis\">\n\n      <span class=\"mat-body-2 p-0\">\n        {{ this.timesheet.startTime | date : 'longDate'}}\n        {{ this.timesheet.startTime | date : 'shortTime' }} - {{ this.timesheet.endTime | date : 'shortTime' }}\n      </span>\n      <span class=\"mat-small\">\n        {{ this.timesheet.totalHours | readableDuration }} \n      </span>\n      <span class=\"mat-small\">\n        ({{this.timesheet.missionId}}) {{ this.timesheet.mission?.address }} \n      </span>\n      <span class=\"mat-body-2\">\n        {{ timesheet.comment }}\n      </span>\n\n    </span>\n\n    <span fxLayout=\"column\" fxLayoutAlign=\"space-between center\" style=\"min-width:40px\">\n\n      <span *ngIf=\"timesheet.status === 1 else closedIcon\" \n        fxLayout=\"column\" fxLayoutAlign=\"start center\" class=\"color-warn\">\n        <mat-icon>lock_open</mat-icon>\n        <span class=\"mat-caption\">åpen</span>\n      </span>\n\n      <app-button *ngIf=\"actionButton\" [config]=\"actionButton | transformButton : ButtonTypes.Icon\"></app-button>\n\n    </span>\n\n    <ng-template #closedIcon>   \n      <span fxLayout=\"column\" fxLayoutAlign=\"start center\" class=\"color-accent\">\n        <mat-icon>lock</mat-icon>\n        <span class=\"mat-caption\">låst</span>\n      </span>\n    </ng-template>\n\n  </span>\n\n</mat-card>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { Timesheet } from 'src/app/core/models';\r\nimport { ButtonTypes } from 'src/app/shared-app/enums';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\nimport { TimesheetStatus } from 'src/app/shared/enums';\r\n\r\n@Component({\r\n  selector: 'app-timesheet-card',\r\n  templateUrl: './timesheet-card.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\n\r\nexport class TimesheetCardComponent { \r\n  ButtonTypes = ButtonTypes;\r\n  Status = TimesheetStatus;\r\n  \r\n  @Input() timesheet: Timesheet;\r\n  @Input() actionButton: AppButton;\r\n\r\n  constructor() { }\r\n\r\n}\r\n","import { DynamicForm, DynamicControl } from 'src/app/dynamic-forms/interfaces';\r\nimport { StateUsers } from 'src/app/state/interfaces';\r\nimport { WeekCriteria } from 'src/app/timesheet-modules/shared-timesheet/interfaces';\r\nimport { InputQuestionComponent, InputQuestion } from '../../components/dynamic-form-questions/input-question.component';\r\nimport { IonDateQuestionComponent, IonDateQuestion } from '../../components/dynamic-form-questions/ion-date-time-question.component';\r\nimport { OptionsFormState } from '../../form/interfaces';\r\nimport { UserSelectControl } from '../common-controls.const';\r\n\r\nexport interface WeekCriteriaFormState extends OptionsFormState<StateUsers>{ }\r\n\r\ntype FormState = WeekCriteriaFormState;\r\n\r\nexport const WeekCriteriaForm: DynamicForm<WeekCriteria, FormState> = {\r\n    submitText: \"Bruk\", controls: [\r\n        {...UserSelectControl, required: true},\r\n        <DynamicControl<WeekCriteria, any>>{ name: \"year\", required: true,\r\n            type: \"control\", valueGetter: (s: WeekCriteria) => s.year, questions: [{\r\n                component:  IonDateQuestionComponent,\r\n                question: <IonDateQuestion>{ \r\n                    placeholder: \"Velg år\", \r\n                    ionFormat: \"YYYY\", \r\n                    valueSetter: (val: string) => new Date(val).getFullYear() \r\n                }, \r\n            }], \r\n        },\r\n        <DynamicControl<WeekCriteria, any>>{ name: \"weekNr\", required: true,\r\n            type: \"control\", valueGetter: (s: WeekCriteria) => s.weekNr, questions: [{\r\n                component:  InputQuestionComponent,      \r\n                hideOnValueChange: {controlName: \"weekNr\", callback: (val: number) => val == null},\r\n                question: <InputQuestion>{ placeholder: \"Velg uke\", type: \"number\" }, \r\n            }], \r\n        },\r\n    ],\r\n}","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { Question, QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { VALIDATION_ERROR_MESSAGES, ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\nimport { BaseQuestionComponent } from '../../../dynamic-forms/components/base-question.component';\r\n\r\nexport interface TextAreaQuestion extends Question {\r\n  minRows: number;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-text-area-question',\r\n  template: `\r\n    <mat-form-field [color]=\"question.color || 'accent'\" class=\"w-100\">\r\n        <mat-label *ngIf=\"question.label\">{{ question.label }}</mat-label>\r\n        \r\n        <textarea matInput cdkTextareaAutosize #autosize=\"cdkTextareaAutosize\" \r\n            [cdkAutosizeMinRows]=\"question.minRows\"\r\n            [placeholder]=\"question.placeholder\" \r\n            [formControl]=\"control\" \r\n            [required]=\"required\">\r\n        </textarea> \r\n\r\n        <mat-hint *ngIf=\"question.hint\">{{ question.hint }}</mat-hint>\r\n\r\n        <mat-error *ngIf=\"control.dirty && control.invalid\">\r\n          {{ getValidationErrorMessage() }}\r\n        </mat-error>\r\n    </mat-form-field>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class TextAreaQuestionComponent extends BaseQuestionComponent<TextAreaQuestion> \r\n  implements QuestionComponent {\r\n\r\n  constructor(@Inject(VALIDATION_ERROR_MESSAGES) validationErrorMessages: ValidationErrorMap) { \r\n    super(validationErrorMessages) \r\n  }\r\n\r\n}\r\n","import { Directive, HostListener, ElementRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appAddToHomeScreen]'\r\n})\r\nexport class AddToHomeScreenDirective {\r\n  \r\n  deferredPrompt: any;\r\n  showButton = false;\r\n\r\n  constructor(private elementRef: ElementRef) { \r\n    this.elementRef.nativeElement.style.display = 'none';\r\n  }\r\n\r\n\r\n  @HostListener('window:beforeinstallprompt', ['$event'])\r\n  onBeforeInstallPrompt(e) {\r\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\r\n    e.preventDefault();\r\n    // Stash the event so it can be triggered later.\r\n    this.deferredPrompt = e;\r\n    this.elementRef.nativeElement.style.display = 'inline-block';\r\n  }\r\n\r\n  @HostListener('click')\r\n  onClick() {\r\n    // hide our user interface that shows our A2HS button\r\n    this.elementRef.nativeElement.style.display = 'none';\r\n\r\n    if(!this.deferredPrompt) return undefined;\r\n    \r\n    // Show the prompt\r\n    this.deferredPrompt.prompt();\r\n    // Wait for the user to respond to the prompt\r\n    this.deferredPrompt.userChoice\r\n      .then((choiceResult) => {\r\n        if (choiceResult.outcome === 'accepted') {\r\n          console.log('User accepted the A2HS prompt');\r\n        } else {\r\n          console.log('User dismissed the A2HS prompt');\r\n        }\r\n        this.deferredPrompt = null;\r\n      });\r\n  }\r\n}\r\n","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DynamicFormStore } from 'src/app/dynamic-forms/dynamic-form.store';\r\nimport { Question, OptionsGetter, QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { VALIDATION_ERROR_MESSAGES, ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\nimport { BaseQuestionComponent } from '../../../dynamic-forms/components/base-question.component';\r\n\r\nexport interface RadioGroupQuestion<T> extends Question {\r\n    optionsGetter: OptionsGetter<T>;\r\n    defaultOption?: string;\r\n    valueFormatter?: (val: T) => any;\r\n    valueSetter?: (val: T) => any;\r\n    divider?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-radio-group-question',\r\n  template: `\r\n    <div class=\"pb-2\">\r\n        <div class=\"mat-body\" *ngIf=\"question.label\">{{ question.label }}</div>\r\n        <mat-radio-group [formControl]=\"control\" [color]=\"question.color || 'accent'\" fxLayoutGap=\"8px\">\r\n            <mat-radio-button *ngIf=\"question.defaultOption\"\r\n              [checked]=\"control.value == null\">\r\n            {{ question.defaultOption }}\r\n            </mat-radio-button>\r\n            <mat-radio-button *ngFor=\"let option of options$ | async\" \r\n                [value]=\"(question.valueSetter | func : option) || option\">\r\n                {{ (question.valueFormatter | func : option) || option }}\r\n            </mat-radio-button>\r\n        </mat-radio-group>\r\n        <mat-hint *ngIf=\"question.hint\">{{ question.hint }}</mat-hint>\r\n        <mat-error *ngIf=\"control.dirty && control.invalid\">\r\n          {{ getValidationErrorMessage() }}\r\n        </mat-error>\r\n        <mat-divider *ngIf=\"question.divider\" style=\"margin-top:8px!important\"></mat-divider>\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class RadioGroupQuestionComponent extends BaseQuestionComponent<RadioGroupQuestion<any>> \r\n  implements QuestionComponent {\r\n\r\n  hideField: boolean;\r\n\r\n  options$: Observable<any[]>;\r\n  \r\n  constructor(\r\n    @Inject(VALIDATION_ERROR_MESSAGES) validationErrorMessages: ValidationErrorMap,\r\n    private formStore: DynamicFormStore<Object>) { \r\n    super(validationErrorMessages) \r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.options$ = this.formStore.getOptions$(this.question.optionsGetter);\r\n  }\r\n\r\n}\r\n","import { Directive, OnInit, ViewChild } from '@angular/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\nimport { SelectableListComponent } from '../selectable-list/selectable-list.component';\r\n\r\n@Directive()\r\nexport abstract class SelectableListContainerComponent implements OnInit {\r\n    @ViewChild('selectableList') selectableList: SelectableListComponent;\r\n\r\n    private currentFabsSubject = new BehaviorSubject(null);\r\n    currentFabs$: Observable<AppButton[]> = this.currentFabsSubject.asObservable();\r\n\r\n    protected staticFabs: AppButton[];\r\n    protected selectedItemsFabs: AppButton[];\r\n\r\n    protected currentSelections: string[] = [];\r\n\r\n    ngOnInit() { this.currentFabsSubject.next(this.staticFabs) }\r\n\r\n    onSelectionChange(selections: string[]): void{\r\n        if(!selections) return;\r\n        this.currentSelections = selections;\r\n        this.updateFabs();\r\n    }\r\n\r\n    private updateFabs(){\r\n        let fabs = this.staticFabs;\r\n\r\n        if(this.currentSelections.length > 0) \r\n            fabs = [...this.staticFabs, ...this.selectedItemsFabs]\r\n\r\n        this.currentFabsSubject.next(fabs);\r\n    }\r\n\r\n}\r\n","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { Question, QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { VALIDATION_ERROR_MESSAGES, ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\nimport { BaseQuestionComponent } from '../../../dynamic-forms/components/base-question.component';\r\n\r\nexport interface CheckboxQuestion extends Question {\r\n  text: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-checkbox-question',\r\n  template: `  \r\n    <div class=\"mat-body\" *ngIf=\"question.label\">{{ question.label }}</div>\r\n    \r\n    <mat-checkbox\r\n        [color]=\"question.color || 'accent'\" \r\n        [formControl]=\"control\" \r\n        [required]=\"required\" >\r\n        {{ question.text }}\r\n    </mat-checkbox>\r\n\r\n    <mat-hint *ngIf=\"question.hint\">{{ question.hint }}</mat-hint>\r\n\r\n    <mat-error *ngIf=\"control.dirty && control.invalid\">\r\n      {{ getValidationErrorMessage() }}\r\n    </mat-error>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class CheckboxQuestionComponent extends BaseQuestionComponent<CheckboxQuestion> \r\n    implements QuestionComponent {\r\n\r\n  constructor(@Inject(VALIDATION_ERROR_MESSAGES) validationErrorMessages: ValidationErrorMap) { \r\n    super(validationErrorMessages) \r\n  }\r\n\r\n}\r\n","import { Validators } from '@angular/forms';\r\nimport { Employer, Mission, MissionType } from 'src/app/core/models';\r\nimport { DynamicControl, DynamicControlGroup, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { StateEmployers, StateMissionTypes } from 'src/app/state/interfaces';\r\nimport { AutoCompleteQuestionComponent } from '../../components/dynamic-form-questions/auto-complete-question/auto-complete-question.component';\r\nimport { AutoCompleteQuestion } from '../../components/dynamic-form-questions/auto-complete-question/auto-complete-question.interface';\r\nimport { CheckboxQuestionComponent, CheckboxQuestion } from '../../components/dynamic-form-questions/checkbox-question.component';\r\nimport { TextAreaQuestionComponent, TextAreaQuestion } from '../../components/dynamic-form-questions/text-area-question.component';\r\nimport { SaveModelFormState } from '../../model-form';\r\nimport { GoogleAddressControl, HiddenIdControl, PhoneNumberControl } from '../common-controls.const';\r\nimport { ValidationRules } from '../validation-rules.const';\r\n\r\ntype FormState = SaveModelFormState<StateEmployers & StateMissionTypes>;\r\n\r\nconst DescriptionControl = <DynamicControl<Mission, any>>{ name: \"description\",\r\n    type: \"control\", questions: [{\r\n        component:  TextAreaQuestionComponent,\r\n        question: <TextAreaQuestion>{placeholder: \"Beskrivelse\"}, \r\n    }], \r\n    validators: [Validators.maxLength(ValidationRules.MissionDescriptionMaxLength)] \r\n}\r\nconst EmployerControl = <DynamicControlGroup<Mission>>{ name: \"employer\",\r\n    type: \"group\", controls: [\r\n    <DynamicControl<Employer, FormState>>{ name: \"name\",\r\n        valueGetter: (s: Mission) => s.employer?.name, \r\n        type: \"control\", questions: [{\r\n            component:  AutoCompleteQuestionComponent,\r\n            question: <AutoCompleteQuestion<Employer>>{\r\n                optionsGetter: (state: FormState) => state.options.employers,\r\n                placeholder: \"Oppdragsgiver\",\r\n                valueProp: \"name\",\r\n                valueFormatter: (val: Employer) => val.name, \r\n                resetable: true,\r\n                activeFilter: { stringProps: [\"name\"] }\r\n            }, \r\n        }], \r\n    }],\r\n}\r\nconst MissionTypeControl = <DynamicControlGroup<Mission>>{ name: \"missionType\",\r\n    type: \"group\", controls: [\r\n    <DynamicControl<MissionType, FormState>>{ name: \"name\",\r\n        valueGetter: (s: Mission) => s.missionType?.name, \r\n        type: \"control\", questions: [{\r\n            component:  AutoCompleteQuestionComponent,\r\n            question: <AutoCompleteQuestion<MissionType>>{\r\n                optionsGetter: (state: FormState) => state.options.missionTypes,\r\n                placeholder: \"Oppdragstype\",\r\n                valueProp: \"name\",\r\n                valueFormatter: (val: MissionType) => val.name, \r\n                resetable: true,\r\n                activeFilter: { stringProps: [\"name\"] }\r\n            }, \r\n        }], \r\n    }],\r\n}\r\nconst FinishedControl = <DynamicControl<Mission, any>>{ name: \"finished\",\r\n    valueGetter: (s: Mission) => s.finished, \r\n    type: \"control\", questions: [{\r\n        component:  CheckboxQuestionComponent,\r\n        question: <CheckboxQuestion>{   \r\n            text: \"Er oppdraget ferdig?\", \r\n        }, \r\n    }], \r\n}\r\n\r\nexport const CreateMissionForm: DynamicForm<Mission, FormState> = {\r\n    submitText: \"Legg til\",\r\n    controls: [\r\n        {...GoogleAddressControl, required: true},\r\n        PhoneNumberControl,\r\n        DescriptionControl,\r\n        EmployerControl,\r\n        MissionTypeControl,    \r\n    ]\r\n}\r\n\r\nexport const EditMissionForm: DynamicForm<Mission, FormState> = {\r\n    submitText: \"Oppdater\",\r\n    controls: [\r\n        ...CreateMissionForm.controls,   \r\n        FinishedControl,\r\n        HiddenIdControl,\r\n    ],\r\n}","import { Injectable } from '@angular/core';\r\nimport { AppChip } from 'src/app/shared-app/interfaces/app-chip.interface';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { translations } from 'src/app/shared/translations';\r\n\r\nexport interface CriteriaChipOptions {\r\n  valueFormatter?: ((val: any) => string | string),\r\n  ignored?: boolean,\r\n}\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class ChipsFactoryService {\r\n\r\n  constructor() {}\r\n\r\n  createCriteriaChips<TCriteria>(\r\n    criteria: TCriteria, \r\n    removeFn: (prop: Prop<TCriteria>) => void,\r\n    options?: {[key in keyof TCriteria]: CriteriaChipOptions},\r\n): AppChip[] {\r\n    if(!criteria) return;\r\n\r\n    const chips: AppChip[] = [];\r\n\r\n    for(let prop in criteria){\r\n      const value = criteria[prop];\r\n      if(!value) continue;\r\n\r\n      let text: string = value as any;\r\n      const chipOption = options[prop];\r\n      \r\n      if(chipOption){\r\n        if(chipOption.ignored) continue; \r\n        if(chipOption.valueFormatter instanceof Function) text = chipOption.valueFormatter(value)\r\n        else if(chipOption.valueFormatter) text = chipOption.valueFormatter;\r\n      }\r\n\r\n      chips.push({text, color: \"accent\", onRemoved: () => removeFn(prop)})\r\n    }\r\n\r\n    return chips;\r\n  }\r\n\r\n  createEnumSelectionChips<TEnum extends { [s: number]: string }>(\r\n      _enum: TEnum, \r\n      currentSelection: any,\r\n      selectFn: (val: any) => void\r\n    ): AppChip[] {\r\n    const chips: AppChip[] = [];\r\n    const options = Object.keys(_enum).filter(key => isNaN(Number(_enum[key])));\r\n    for(const strVal of options){\r\n      const value = parseInt(strVal);\r\n      const selected = (value === currentSelection as any)\r\n      chips.push({ \r\n        text: translations[_enum[value].toLowerCase()] , color: selected ? \"accent\" : \"background\", \r\n        onClick: !selected ? () => selectFn(value) : null\r\n      })\r\n    }\r\n    return chips;\r\n  }\r\n}","import { User } from 'src/app/core/models';\r\nimport { UserForeign } from 'src/app/core/models/relationships/user-foreign.interface';\r\nimport { _convertArrayToObject } from './array/convert-array-to-object.helper';\r\n\r\nexport function _setFullNameOnUserForeigns<TEntity extends UserForeign>(\r\n    entities: TEntity[],\r\n    users: User[]\r\n  ): TEntity[] {\r\n\r\n    if (!entities || !users) return entities;\r\n\r\n    let usersObj = _convertArrayToObject(users, \"userName\");\r\n\r\n    for(let i = 0; i < entities.length; i++){\r\n      let entity = entities[i];\r\n      const user = usersObj[entity.userName];\r\n      if (user) entity.fullName = user.firstName + \" \" + user.lastName;\r\n    }\r\n\r\n    return entities;\r\n  }","import { Injectable, Inject } from '@angular/core';\r\nimport { DOCUMENT } from '@angular/common';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class DownloaderService {\r\n\r\n  private link: HTMLAnchorElement;\r\n\r\n  constructor(@Inject(DOCUMENT) private document: Document) {\r\n    const body = this.document.getElementsByTagName('body')[0];\r\n    this.link = this.document.createElement('a'); \r\n    this.link.style.display = 'none';\r\n    body.appendChild(this.link);\r\n  }\r\n\r\n  downloadUrl = (url: string): void => {\r\n    this.link.href = url;\r\n    this.link.click();\r\n  };\r\n \r\n  downloadUrls = (urls: string[]): void => {\r\n    let delay = 0;\r\n    urls.forEach(url => {\r\n      setTimeout(() => this.downloadUrl(url), delay);\r\n      delay = delay + 500;\r\n    })\r\n  }\r\n}","import { _isNullOrEmpty } from '../is-null-or-empty.helper';\r\n\r\nexport function _getSetPropCount(obj: Object, ignoredProps: {[key: string]: any}): number{\r\n    let setPropCount = 0;\r\n    for(const key in obj){\r\n        const value = obj[key];\r\n        const ignoredVal = ignoredProps[key];\r\n        if(ignoredVal === value || ignoredVal === null) continue;\r\n        if(typeof value === \"string\" && !_isNullOrEmpty(value)) setPropCount++;\r\n        else if(typeof value !== \"string\" && value != null) setPropCount++;\r\n    }   \r\n    return setPropCount;\r\n}\r\n\r\n\r\n    \r\n","export function _isNullOrEmpty(str: string){\r\n    return str?.indexOf(' ') >= 0 || str === \"\";    \r\n}","import { Injectable } from '@angular/core';\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Mission, Timesheet } from 'src/app/core/models';\r\nimport { _getRangeWithRelations } from 'src/app/model/helpers/get-range-with-relations.helper';\r\nimport { GetWithRelationsConfig } from 'src/app/model/helpers/get-with-relations.config';\r\nimport { DateRangePresets } from 'src/app/shared-app/enums';\r\nimport { TimesheetCriteriaFormState } from 'src/app/shared/constants/forms/timesheet-criteria-form.const';\r\nimport { filterRecords } from 'src/app/shared/operators/filter-records.operator';\r\nimport { ComponentStore } from 'src/app/state/component.store';\r\nimport { StateMissions, StateUserTimesheets } from 'src/app/state/interfaces';\r\nimport { Store } from 'src/app/state/store';\r\nimport { SetTimesheetCriteriaActionId } from '../../shared-timesheet/state/set-timesheet-criteria.reducer';\r\nimport { TimesheetCriteria } from '../../shared-timesheet/timesheet-filter/timesheet-criteria.interface';\r\nimport { TimesheetFilter } from '../../shared-timesheet/timesheet-filter/timesheet-filter.model';\r\nimport { UserTimesheetListState } from './user-timesheet-list.state';\r\n\r\n@Injectable()\r\nexport class UserTimesheetListFacade {\r\n    \r\n      get criteria(){ return this.componentStore.selectProperty<TimesheetCriteria>(\"timesheetCriteria\"); } \r\n      criteria$ = this.componentStore.selectProperty$<TimesheetCriteria>(\"timesheetCriteria\");\r\n  \r\n      private filteredTimesheets$: Observable<Timesheet[]> = combineLatest([\r\n          this.store.selectProperty$<Timesheet[]>(\"userTimesheets\"),\r\n          this.criteria$\r\n      ]).pipe(filterRecords(TimesheetFilter), map(x => x.records));\r\n\r\n      timesheets$: Observable<Timesheet[]> = combineLatest([\r\n        this.filteredTimesheets$, \r\n        this.store.selectProperty$<Mission[]>(\"missions\")\r\n      ]).pipe(\r\n          map(([userTimesheets, missions]) =>  {\r\n              const relationCfg = new GetWithRelationsConfig(\"userTimesheets\", null, [\"missions\"]);\r\n              return _getRangeWithRelations({userTimesheets, missions}, relationCfg);\r\n          })\r\n      );\r\n\r\n      timesheetCriteriaFormState$: Observable<TimesheetCriteriaFormState> = \r\n        this.store.selectProperty$<Mission[]>(\"missions\").pipe(\r\n          map(x => { return {options: {missions: x, users: null} }})\r\n        )\r\n\r\n      constructor(\r\n          private store: Store<StateMissions & StateUserTimesheets>,\r\n          private componentStore: ComponentStore<UserTimesheetListState>,  \r\n          private route: ActivatedRoute,\r\n      ) { \r\n        this.setInitialCriteria(); \r\n      }\r\n      \r\n      updateCriteria = (timesheetCriteria: TimesheetCriteria) => \r\n          this.componentStore.dispatch({ actionId: SetTimesheetCriteriaActionId, timesheetCriteria });\r\n\r\n      private setInitialCriteria(){\r\n        let rawCriteria = this.route.snapshot.params.criteria;\r\n\r\n        const criteria: TimesheetCriteria = rawCriteria ? JSON.parse(rawCriteria) : {};\r\n          \r\n        if(criteria.dateRange && !criteria.dateRangePreset) \r\n          criteria.dateRangePreset = DateRangePresets.Custom\r\n      \r\n        this.updateCriteria(criteria);\r\n      }\r\n \r\n    \r\n}","import { Provider } from '@angular/core';\r\nimport { ComponentStoreProviders } from 'src/app/state/providers.const';\r\nimport { STORE_REDUCERS } from 'src/app/state/injection-tokens';\r\nimport { TimesheetCriteria } from '../../shared-timesheet/timesheet-filter/timesheet-criteria.interface';\r\nimport { UserTimesheetListFacade } from './user-timesheet-list.facade';\r\nimport { SetTimesheetCriteriaReducer } from '../../shared-timesheet/state/set-timesheet-criteria.reducer';\r\n\r\nexport interface UserTimesheetListState { \r\n    timesheetCriteria: TimesheetCriteria,\r\n}\r\n\r\nexport const UserTimesheetListProviders: Provider[] = [\r\n    UserTimesheetListFacade,\r\n    ...ComponentStoreProviders,\r\n    {provide: STORE_REDUCERS, useValue: SetTimesheetCriteriaReducer, multi: true},\r\n]","<div fxLayout=\"column\" fxLayoutAlign=\"start stretch\" class=\"h-100 max-width\">\r\n    <cdk-virtual-scroll-viewport *ngIf=\"timesheets?.length else noContent\"\r\n        itemSize=\"120\" maxBufferPx=\"800\" minBufferPx=\"800\" fxFlex>\r\n        <div class=\"m-1\" *cdkVirtualFor=\"let timesheet of timesheets | sortByDate : 'startTime'; trackBy: trackByTimesheet\">\r\n            <app-timesheet-card [timesheet]=\"timesheet\" \r\n                [actionButton]=\"timesheet.status === 2 ? null : { \r\n                    icon: 'edit', \r\n                    color: 'accent',\r\n                    callback: editTimesheet, params: [timesheet.id]\r\n                }\">\r\n            </app-timesheet-card>\r\n        </div>\r\n    </cdk-virtual-scroll-viewport>\r\n</div> \r\n\r\n<ng-template #noContent>\r\n    <span class=\"text-center w-100\">\r\n        <p>Finner ingen timer med gitte filtre. </p>\r\n        <button mat-raised-button color=\"accent\" class=\"bounceIn\" (click)=\"filterClicked.emit()\">\r\n            <mat-icon>filter_list</mat-icon>\r\n            Åpne filter\r\n        </button>\r\n    </span>\r\n</ng-template>","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { Timesheet } from 'src/app/core/models';\r\nimport { _trackByModel } from 'src/app/shared-app/helpers/trackby/track-by-model.helper';\r\n\r\n@Component({\r\n  selector: 'app-user-timesheet-list-view',\r\n  templateUrl: './user-timesheet-list-view.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class UserTimesheetListViewComponent {\r\n\r\n  @Input() timesheets: Timesheet[];\r\n  @Output() editClicked = new EventEmitter<string>();\r\n  @Output() filterClicked = new EventEmitter();\r\n\r\n  editTimesheet = (id: string) => this.editClicked.emit(id);\r\n  \r\n  trackByTimesheet = _trackByModel(\"timesheets\")\r\n}\r\n","<app-main-skeleton *ngIf=\"navVm$ | async; let navVm\" [fabs]=\"navVm.fabs\" overlayMode=\"true\">\n\n    <ng-container navbar>\n        <app-main-top-nav-bar [config]=\"navVm.navConfig\" >\n        </app-main-top-nav-bar>\n        <app-chips-bar [chips]=\"navVm.criteriaChips\"></app-chips-bar>\n    </ng-container>\n\n    <app-user-timesheet-list-view \n        [timesheets]=\"timesheets$ | async\" \n        (editClicked)=\"openTimesheetForm($event)\"\n        (filterClicked)=\"openTimesheetFilter()\">\n    </app-user-timesheet-list-view>\n\n</app-main-skeleton>\n\n<router-outlet></router-outlet>","import { ChangeDetectionStrategy, Component } from \"@angular/core\";\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from 'rxjs/operators';\r\nimport { Timesheet } from 'src/app/core/models';\r\nimport { ChipsFactoryService } from 'src/app/core/services/ui/chips-factory.service';\r\nimport { _objectToDisabledObjectMap } from 'src/app/dynamic-forms/helpers/disabled-control-map.helper';\r\nimport { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { ModelState } from 'src/app/model/interfaces';\r\nimport { _getSetPropCount } from 'src/app/shared-app/helpers/object/get-set-prop-count.helper';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\nimport { AppChip } from 'src/app/shared-app/interfaces/app-chip.interface';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { TimesheetCriteriaForm, TimesheetCriteriaFormState } from 'src/app/shared/constants/forms/timesheet-criteria-form.const';\r\nimport { CreateUserTimesheetForm, EditUserTimesheetForm, TimesheetForm } from 'src/app/shared/constants/model-forms/save-user-timesheet-form.const';\r\nimport { FormService } from 'src/app/shared/form';\r\nimport { ModelFormService, SaveModelFormState } from 'src/app/shared/model-form';\r\nimport { UserTimesheetFormToSaveModelAdapter } from '../../shared-timesheet/state/save-user-timesheet/user-timesheet-form-to-save-model.adapter';\r\nimport { TimesheetCriteriaChipOptions } from '../../shared-timesheet/timesheet-filter/timesheet-criteria-chip-options.const';\r\nimport { TimesheetCriteria } from '../../shared-timesheet/timesheet-filter/timesheet-criteria.interface';\r\nimport { UserTimesheetListFacade } from './user-timesheet-list.facade';\r\nimport { UserTimesheetListProviders } from './user-timesheet-list.state';\r\n\r\ninterface ViewModel { \r\n  timesheets: Timesheet[];\r\n  fabs: AppButton[], \r\n  criteriaChips: AppChip[], \r\n  navConfig: MainTopNavConfig  \r\n}\r\n\r\n@Component({\r\n  selector: \"app-user-timesheet-list\",\r\n  templateUrl: \"./user-timesheet-list.component.html\",\r\n  providers: UserTimesheetListProviders,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class UserTimesheetListComponent {\r\n\r\n  navVm$: Observable<Partial<ViewModel>> = this.facade.criteria$.pipe(\r\n    map(criteria => { return {\r\n      navConfig: this.getTopNavConfig(criteria),\r\n      fabs: [\r\n        {icon: \"add\", aria: 'Legg til', color: 'accent', \r\n          callback: this.openTimesheetForm,\r\n          params: [null, {mission: criteria?.mission}]}\r\n      ],\r\n      criteriaChips: this.chipsFactory.createCriteriaChips(criteria, \r\n          (prop) => this.resetCriteriaProp(prop, criteria),\r\n          TimesheetCriteriaChipOptions\r\n        )\r\n    }})\r\n  )\r\n\r\n  timesheets$: Observable<Timesheet[]> = this.facade.timesheets$;\r\n\r\n  constructor(\r\n    private facade: UserTimesheetListFacade,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private formService: FormService,\r\n    private chipsFactory: ChipsFactoryService,\r\n    private modelFormService: ModelFormService\r\n  ) {}\r\n  \r\n  openTimesheetForm = (entityId?: string, initialValue?: TimesheetForm): void => {\r\n    let dynamicForm: DynamicForm<TimesheetForm, SaveModelFormState<Partial<ModelState>>>;\r\n    if(!entityId) dynamicForm = {...CreateUserTimesheetForm, disabledControls: _objectToDisabledObjectMap(initialValue)}\r\n    else dynamicForm = EditUserTimesheetForm\r\n\r\n    this.modelFormService.open<TimesheetForm>({\r\n      formConfig:{\r\n        dynamicForm: {...dynamicForm, initialValue}, entityId,\r\n        adapter: UserTimesheetFormToSaveModelAdapter, \r\n        stateProp: \"userTimesheets\",  \r\n      }\r\n    })\r\n  };\r\n\r\n  openTimesheetFilter = (): void => {\r\n    this.formService.open<TimesheetCriteria, TimesheetCriteriaFormState>({\r\n      formConfig: { ...TimesheetCriteriaForm, \r\n        disabledControls: {user: true},\r\n        initialValue: this.facade.criteria}, \r\n      formState: this.facade.timesheetCriteriaFormState$,\r\n      navConfig: {title: \"Velg filtre\"},\r\n      submitCallback: (val: TimesheetCriteria) => this.facade.updateCriteria(val)\r\n    });\r\n  }\r\n\r\n  private onBack = (): void => {\r\n    this.router.navigate(['../'], { relativeTo: this.route.parent })\r\n  }\r\n\r\n  private getTopNavConfig = (criteria: TimesheetCriteria): MainTopNavConfig => {\r\n    let activeCriteriaCount = _getSetPropCount(criteria, {dateRangePreset:null})\r\n    return {\r\n      title:  \"Timeliste\", \r\n      backFn: this.onBack,     \r\n      buttons: [{\r\n        icon: 'filter_list', \r\n        callback: this.openTimesheetFilter,\r\n        color: (activeCriteriaCount && activeCriteriaCount > 0) ? \"accent\" : null\r\n      }],\r\n    }\r\n  }\r\n  \r\n  private resetCriteriaProp(prop: string, criteria: TimesheetCriteria){\r\n    criteria[prop] = null;\r\n    this.facade.updateCriteria(criteria);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { UserTimesheetListComponent } from './user-timesheet-list/user-timesheet-list.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserTimesheetListComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class UserTimesheetListRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { DeleteModelProviders } from 'src/app/model/state/providers.const';\r\nimport { ModelFormModule } from 'src/app/shared/model-form/model-form.module';\r\nimport { StateModule } from 'src/app/state/state.module';\r\nimport { SharedTimesheetModule } from '../shared-timesheet/shared-timesheet.module';\r\nimport { SaveUserTimesheetProviders } from '../shared-timesheet/state/providers.const';\r\nimport { UserTimesheetListRoutingModule } from './user-timesheet-list-routing.module';\r\nimport { UserTimesheetListViewComponent } from './user-timesheet-list/user-timesheet-list-view/user-timesheet-list-view.component';\r\nimport { UserTimesheetListComponent } from './user-timesheet-list/user-timesheet-list.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    UserTimesheetListComponent,\r\n    UserTimesheetListViewComponent,\r\n  ],\r\n  providers:[\r\n    ...SaveUserTimesheetProviders,\r\n    ...DeleteModelProviders,\r\n  ],\r\n  imports: [\r\n    SharedTimesheetModule,\r\n    ModelFormModule,\r\n    StateModule,\r\n    UserTimesheetListRoutingModule,\r\n  ]\r\n})\r\nexport class UserTimesheetListModule {\r\n  constructor(){}\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { _sortByDate } from 'src/app/shared-app/helpers/array/sort-by-date.helper';\n\n@Pipe({\n  name: 'sortByDate'\n})\n\nexport class SortByDatePipe implements PipeTransform {\n\n  transform(entities: any[], dateProperty: string, order: \"asc\" | \"desc\" = \"desc\"): any {\n    if(!entities) return entities;\n    return _sortByDate(entities, dateProperty, order)\n  }\n\n}\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { AppChip } from 'src/app/shared-app/interfaces/app-chip.interface';\r\n\r\n@Component({\r\n  selector: 'app-chips-bar',\r\n  template: `\r\n     <div class=\"horizontal-chips-container\" *ngIf=\"chips && chips.length > 0\">\r\n\r\n        <mat-chip-list aria-orientation=\"horizontal\" class=\"horizontal-chips\">\r\n\r\n        <mat-chip *ngFor=\"let chip of chips; trackBy: trackByChip\" selected=\"true\"\r\n            [color]=\"chip.color || 'background'\"\r\n            [removable]=\"chip.onRemoved\"  \r\n            (click)=\"handleFn(chip.onClick)\"\r\n            (removed)=\"handleFn(chip.onRemoved)\">   \r\n            <span class=\"ellipsis\">{{ chip.text }}</span>\r\n            <mat-icon *ngIf=\"chip.onRemoved\" matChipRemove>cancel</mat-icon>\r\n        </mat-chip>\r\n\r\n        </mat-chip-list>\r\n\r\n    </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class ChipsBarComponent{\r\n\r\n  @Input() chips: AppChip[];\r\n\r\n  trackByChip = (index: number, chip:AppChip) => chip.text;\r\n\r\n  handleFn = (fn: Function): void => fn ? fn() : null;\r\n\r\n}\r\n","export function _formatShortDate(d: Date | string | number): string{\r\n    if(!d) return;\r\n    const date = new Date(d);\r\n    return date.getDate() + '.' + (date.getMonth() + 1) + '.' + date.getFullYear().toString().slice(2,4);\r\n}","import { User, Mission } from 'src/app/core/models';\r\nimport { CriteriaChipOptions } from 'src/app/core/services/ui/chips-factory.service';\r\nimport { _getModelDisplayValue } from 'src/app/model/helpers/get-model-property.helper';\r\nimport { _formatDateRange } from 'src/app/shared-app/helpers/datetime/format-date-range.helper';\r\nimport { _formatShortDate } from 'src/app/shared-app/helpers/datetime/format-short-date.helper';\r\nimport { TimesheetStatus } from 'src/app/shared/enums';\r\nimport { DateRange } from 'src/app/shared/interfaces/date-range.interface';\r\nimport { translations } from 'src/app/shared/translations';\r\nimport { TimesheetCriteria } from './timesheet-criteria.interface';\r\n\r\nexport const TimesheetCriteriaChipOptions: {[key in keyof TimesheetCriteria]: CriteriaChipOptions} = {\r\n    user: {valueFormatter: (val: User) => val.lastName + ', ' + val.lastName}, \r\n    mission: {valueFormatter: (val: Mission) => _getModelDisplayValue(\"missions\", val)},\r\n    dateRange: {valueFormatter: (val: DateRange) => _formatDateRange(val, _formatShortDate)}, \r\n    dateRangePreset: {ignored: true},\r\n    status: {valueFormatter: (val: TimesheetStatus) => translations[TimesheetStatus[val]?.toLowerCase()]}, \r\n}","import { DateRange } from 'src/app/shared/interfaces/date-range.interface';\r\n\r\nexport function _formatDateRange(range:DateRange, formatFn: (d: any) => string): string{\r\n    if(!range) return;\r\n    return formatFn(range.start) + \" ~ \" + formatFn(range.end)\r\n}","\r\nimport { Model } from 'src/app/core/models';\r\nimport { ModelState } from 'src/app/model/interfaces';\r\nimport { ModelStateConfig } from 'src/app/model/model-state.config';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\n\r\nexport function _trackByModel(prop: Prop<ModelState>){\r\n    const identifier = ModelStateConfig.get(prop).identifier;\r\n    return (index:number, model:Model): any => model[identifier];\r\n}","import { Model } from 'src/app/core/models';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { ModelState } from '../interfaces';\r\nimport { ModelStateConfig } from '../model-state.config';\r\n\r\nexport function _getModelDisplayValue(prop: Prop<ModelState>, value: Model): any {\r\n    const fkPropModelMap = ModelStateConfig.get(prop)\r\n    return fkPropModelMap ? value[fkPropModelMap.displayProp] : null;\r\n} ","import { DateRange } from 'src/app/shared/interfaces/date-range.interface';\r\nimport { _getFirstDayOfMonth } from './get-first-day-of-month.helper';\r\nimport { _getLastDayOfMonth } from './get-last-day-of-month.helper';\r\n\r\nexport function _getMonthRange(date: Date | string | number = new Date(), getISO?: boolean): DateRange {\r\n    const start = _getFirstDayOfMonth(date);   \r\n    const end = _getLastDayOfMonth(date);\r\n    return {\r\n      start: getISO ? start.toISOString() : start, \r\n      end: getISO ? end.toISOString() : end\r\n    };\r\n}","export function _getFirstDayOfMonth(date: Date | string | number = new Date()): Date  {\r\n    const d = new Date(date);\r\n    return new Date(d.getFullYear(), d.getMonth(), 1);\r\n}","export function _getLastDayOfMonth(date: Date | string | number = new Date()): Date  {\r\n    const d = new Date(date);\r\n    return new Date(d.getFullYear(), d.getMonth() + 1, 0);\r\n}","import { DynamicControl, DynamicControlGroup, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { DateRangePresets } from 'src/app/shared-app/enums';\r\nimport { _getISO } from 'src/app/shared-app/helpers/datetime/get-iso-with-timezone.helper';\r\nimport { _getMonthRange } from 'src/app/shared-app/helpers/datetime/get-month-range.helper';\r\nimport { _getRangeByDateRangePreset } from 'src/app/shared-app/helpers/datetime/get-range-by-date-range-preset.helper';\r\nimport { StateUsers, StateMissions } from 'src/app/state/interfaces';\r\nimport { TimesheetCriteria } from 'src/app/timesheet-modules/shared-timesheet/timesheet-filter/timesheet-criteria.interface';\r\nimport { IonDateQuestionComponent, IonDateQuestion } from '../../components/dynamic-form-questions/ion-date-time-question.component';\r\nimport { RadioGroupQuestionComponent, RadioGroupQuestion } from '../../components/dynamic-form-questions/radio-group-question.component';\r\nimport { TimesheetStatus } from '../../enums';\r\nimport { OptionsFormState } from '../../form/interfaces';\r\nimport { DateRange } from '../../interfaces/date-range.interface';\r\nimport { translations } from '../../translations';\r\nimport { MissionAutoCompleteControl, UserSelectControl } from '../common-controls.const';\r\n\r\nexport interface TimesheetCriteriaFormState extends OptionsFormState<StateUsers & StateMissions>{}\r\n\r\ntype FormState = TimesheetCriteriaFormState;  \r\n\r\nconst DateRangePresetControl = <DynamicControl<TimesheetCriteria, any>>{ name: \"dateRangePreset\", required: true,\r\n    valueGetter: (s: TimesheetCriteria) => s.dateRangePreset, \r\n    type: \"control\", questions: [{\r\n        component:  RadioGroupQuestionComponent,\r\n        question: <RadioGroupQuestion<DateRangePresets>>{   \r\n            label: \"Velg tidsrom *\",\r\n            optionsGetter: Object.keys(DateRangePresets).filter(k => !isNaN(Number(k))).map(x =>  parseInt(x)),\r\n            valueFormatter: (val: DateRangePresets) => translations[DateRangePresets[val].toLowerCase()] \r\n        }, \r\n    }], \r\n}\r\nconst DateRangeControlGroup = <DynamicControlGroup<TimesheetCriteria>>{ name: \"dateRange\", \r\n    type: \"group\", controls: [\r\n        <DynamicControl<DateRange, any>>{ name: \"start\",\r\n            valueGetter: (s: TimesheetCriteria) => _getISO(s.dateRange?.start),\r\n            type: \"control\", questions: [\r\n                {component:  IonDateQuestionComponent,       \r\n                    hideOnValueChange: {controlName: \"dateRangePreset\", callback: (val) => val !== DateRangePresets.Custom},\r\n                    question: <IonDateQuestion>{\r\n                        placeholder: \"Startdato\", \r\n                        width: \"45%\",\r\n                        ionFormat:\"YYYY-MMMM-DD\",\r\n                        datePipeFormat: \"MMM d, y\",\r\n                        max: {controlName: [\"dateRange\", \"end\"], callback: (val: any) => val},\r\n                    }, \r\n                },\r\n                {component:  IonDateQuestionComponent,        \r\n                    hideOnValueChange: {controlName: \"dateRangePreset\", callback: (val) => val !== DateRangePresets.CustomMonth},\r\n                    question:<IonDateQuestion>{\r\n                        placeholder: \"Måned\", \r\n                        width: \"50%\",\r\n                        ionFormat:\"YYYY-MMMM\",\r\n                        datePipeFormat: \"MMMM, y\",                    \r\n                        valueSetter: (val: string) => val ? _getMonthRange(val, true) : {start: null, end: null},\r\n                        overrideValueSetterControl: \"dateRange\"\r\n                    }, \r\n                }\r\n            ], \r\n        },\r\n        <DynamicControl<DateRange, any>>{ name: \"end\",\r\n            valueGetter: (s: TimesheetCriteria) => _getISO(s.dateRange?.end),\r\n            type: \"control\", questions: [\r\n                {component:  IonDateQuestionComponent,              \r\n                hideOnValueChange: {controlName: \"dateRangePreset\", callback: (val) => val !== DateRangePresets.Custom},\r\n                question: <IonDateQuestion>{\r\n                    placeholder: \"Sluttdato\", \r\n                    width: \"45%\",\r\n                    ionFormat:\"YYYY-MMMM-DD\",      \r\n                    datePipeFormat: \"MMM d, y\", \r\n                    min: {controlName: [\"dateRange\", \"start\"], callback: (val: any) => val},\r\n                }, \r\n            }], \r\n        },\r\n    ]\r\n}\r\nconst StatusControl = <DynamicControl<TimesheetCriteria, any>>{ name: \"status\",\r\n    valueGetter: (s: TimesheetCriteria) => s.status, \r\n    type: \"control\", questions: [{\r\n        component:  RadioGroupQuestionComponent,\r\n        question: <RadioGroupQuestion<TimesheetStatus>>{   \r\n            label: \"Velg status\", defaultOption: \"Begge\",\r\n            optionsGetter: [TimesheetStatus.Open, TimesheetStatus.Confirmed],\r\n            valueFormatter: (val) => translations[TimesheetStatus[val]?.toLowerCase()]\r\n        }, \r\n    }], \r\n}\r\n\r\nexport const TimesheetCriteriaForm: DynamicForm<TimesheetCriteria, FormState> = {\r\n    submitText: \"Bruk\", noRenderDisabledControls: true, resettable: true,\r\n    controls: [\r\n        UserSelectControl,\r\n        MissionAutoCompleteControl,\r\n        DateRangePresetControl,\r\n        DateRangeControlGroup,\r\n        StatusControl\r\n    ],\r\n    onSubmitFormatter: (criteria: TimesheetCriteria): TimesheetCriteria => {\r\n        const preset = criteria.dateRangePreset;  \r\n        if(preset !== DateRangePresets.Custom && preset !== DateRangePresets.CustomMonth )\r\n        criteria.dateRange = _getRangeByDateRangePreset(preset);\r\n        \r\n        const {start, end} = criteria.dateRange || {};\r\n        if(start || end) criteria.dateRange = {start: new Date(start), end: new Date(end || new Date())};\r\n        else criteria.dateRange = null;\r\n\r\n        return criteria;\r\n    }\r\n}","import { DateRangePresets } from \"src/app/shared-app/enums/date-range-presets.enum\";\r\nimport { DateRange } from 'src/app/shared/interfaces/date-range.interface';\r\nimport { _getLastDayOfYear } from './get-last-day-of-year.helper';\r\nimport { _getMonthRange } from './get-month-range.helper';\r\nimport { _getWeekRange } from './get-week-range.helper';\r\nimport { _getYearRange } from './get-year-range.helper';\r\n\r\nexport function _getRangeByDateRangePreset(preset: DateRangePresets, getISO?: boolean): DateRange {\r\n    switch (preset) {\r\n      case DateRangePresets.CurrentWeek:\r\n        return _getWeekRange(new Date(), getISO);\r\n      case DateRangePresets.CurrentMonth:\r\n        return _getMonthRange(new Date(), getISO);\r\n      case DateRangePresets.CurrentYear:\r\n        return _getYearRange(new Date(), getISO);\r\n      case DateRangePresets.ShowAll:{\r\n        const start = new Date(0);   \r\n        const end = _getLastDayOfYear(new Date());\r\n        return {\r\n          start: getISO ? start.toISOString() : start, \r\n          end: getISO ? end.toISOString() : end\r\n        };\r\n      }\r\n      default: return undefined;\r\n    }\r\n  }","import { DisabledObjectMap } from '../interfaces';\r\n\r\nexport function _objectToDisabledObjectMap<T>(object: T, disableAll?: boolean): DisabledObjectMap<T>{\r\n    let result = {} as DisabledObjectMap<T>;\r\n\r\n    for(const key in object){\r\n        if(disableAll) result[key] = true;\r\n        else if(object[key]) result[key] = true;\r\n    }\r\n\r\n    return result;\r\n}","import { User } from 'src/app/core/models';\r\nimport { DateRangePresets } from 'src/app/shared-app/enums';\r\nimport { _getDateOfWeek } from 'src/app/shared-app/helpers/datetime/get-date-of-week.helper';\r\nimport { _getWeekRange } from 'src/app/shared-app/helpers/datetime/get-week-range.helper';\r\nimport { _getYearRange } from 'src/app/shared-app/helpers/datetime/get-year-range.helper';\r\nimport { DateRange } from 'src/app/shared/interfaces/date-range.interface';\r\nimport { WeekCriteria } from '../interfaces/week-criteria.interface';\r\nimport { TimesheetCriteria } from './timesheet-criteria.interface';\r\n\r\nexport class WeekToTimesheetCriteriaAdapter implements TimesheetCriteria {\r\n    \r\n    user?: User;\r\n    dateRange?: DateRange; \r\n    dateRangePreset?: DateRangePresets = DateRangePresets.Custom;\r\n\r\n    constructor(input: WeekCriteria){\r\n        if(!input) return;\r\n\r\n        this.user = input.user;\r\n\r\n        if(input.weekNr && input.year) \r\n            this.dateRange = _getWeekRange(_getDateOfWeek(input.weekNr, input.year));\r\n\r\n        else if(input.year){\r\n            let date = new Date();\r\n            date.setFullYear(input.year);\r\n            this.dateRange = _getYearRange(date);\r\n        }\r\n    }\r\n\r\n\r\n}","export function _getDateOfWeek(weekNr: number, year: number) {\r\n    var d = (1 + (weekNr - 1) * 7); // 1st of January + 7 days for each week\r\n    return new Date(year, 0, d);\r\n}","import { Timesheet } from 'src/app/core/models';\r\nimport { BaseFormToSaveModelStateCommandAdapter } from 'src/app/model/abstracts/base-form-to-save-model-state-command.adapter';\r\nimport { SaveModelStateCommand } from 'src/app/model/state/save-model/save-model-action.const';\r\nimport { TimesheetForm } from 'src/app/shared/constants/model-forms/save-user-timesheet-form.const';\r\nimport { ModelFormToSaveModelInput } from 'src/app/shared/model-form';\r\nimport { SaveUserTimesheetActionId } from './save-user-timesheet-command.interface';\r\n\r\nexport class UserTimesheetFormToSaveModelAdapter extends BaseFormToSaveModelStateCommandAdapter<Timesheet, TimesheetForm>\r\n    implements SaveModelStateCommand<Timesheet>{\r\n\r\n    actionId: string = SaveUserTimesheetActionId;\r\n    \r\n    constructor(input:  ModelFormToSaveModelInput<TimesheetForm>){\r\n        super(input);\r\n    }\r\n\r\n    protected convertFormStateToEntity(): void{\r\n        const formState = this.input.formState;\r\n        this.entity = {\r\n            id: formState.id,\r\n            missionId: formState.mission.id,\r\n            comment: formState.comment,\r\n            startTime: this.mergeDateAndTime(formState.date, formState.startTime).getTime(),\r\n            endTime:  this.mergeDateAndTime(formState.date, formState.endTime).getTime(),\r\n        };   \r\n    }\r\n\r\n    private mergeDateAndTime(date: any, time:any): Date{\r\n        const d = new Date(date);\r\n        const t = new Date(time);\r\n        d.setHours(t.getHours(), t.getMinutes(), t.getSeconds());\r\n        return d;\r\n    }\r\n}","import { StateAction, Reducer } from 'src/app/state/interfaces';\r\nimport { TimesheetCriteria } from '../timesheet-filter/timesheet-criteria.interface';\r\n\r\nexport const SetTimesheetCriteriaActionId = \"SET_TIMESHEET_CRITERIA\";\r\n\r\nexport interface SetTimesheetCriteriaCommand extends StateAction { timesheetCriteria: TimesheetCriteria }\r\n\r\nexport const SetTimesheetCriteriaReducer: Reducer<any> = {\r\n    actionId: SetTimesheetCriteriaActionId,\r\n    reducerFn: (state: {timesheetCriteria: TimesheetCriteria}, action: SetTimesheetCriteriaCommand) => {\r\n        return { timesheetCriteria: action.timesheetCriteria }\r\n    }       \r\n}  ","import { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { EmailControl } from '../common-controls.const';\r\n\r\nexport interface EmailForm { email: string };\r\n\r\nexport const EmailForm: DynamicForm<EmailForm, any> = {\r\n    submitText: \"Send\", controls: [{...EmailControl, required: true}],\r\n}","import { Validators } from '@angular/forms';\r\nimport { Mission } from 'src/app/core/models';\r\nimport { DynamicControlGroup, DynamicControl, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { _getISO } from 'src/app/shared-app/helpers/datetime/get-iso-with-timezone.helper';\r\nimport { StateMissions } from 'src/app/state/interfaces';\r\nimport { IonDateQuestionComponent, IonDateQuestion } from '../../components/dynamic-form-questions/ion-date-time-question.component';\r\nimport { TextAreaQuestionComponent, TextAreaQuestion } from '../../components/dynamic-form-questions/text-area-question.component';\r\nimport { SaveModelFormState } from '../../model-form';\r\nimport { HiddenIdControl, MissionAutoCompleteControl } from '../common-controls.const';\r\n\r\ntype FormState = SaveModelFormState<StateMissions> & {defaultStartTime: string, defaultEndTime: string};\r\n\r\nconst _timeValueDefault = (date: number, hours: number = 0, minutes: number = 0): string => \r\n    new Date((date ? new Date(date) : new Date).getFullYear(), 1, 1, hours, minutes, 0).toISOString();\r\n\r\nexport interface TimesheetForm {\r\n    id?: string;\r\n    date?: number;\r\n    mission?: Mission;\r\n    startTime?: string;\r\n    endTime?: string;\r\n    comment?: string;\r\n}\r\n\r\nconst DateTimeControlGroup = <DynamicControlGroup<TimesheetForm>>{ type: \"group\", controls: [\r\n    <DynamicControl<TimesheetForm, any>>{ name: \"date\", required: true, \r\n        valueGetter: (s: TimesheetForm) => _getISO(s.date) || _getISO(s.startTime),\r\n        getRawValue:true,\r\n        type: \"control\", questions: [{\r\n            component:  IonDateQuestionComponent,\r\n            question: <IonDateQuestion>{\r\n                placeholder: \"Dato\", \r\n                width: \"42%\",\r\n                ionFormat:\"YYYY-MMMM-DD\",\r\n                datePipeFormat: \"MMM d, y\",\r\n            }, \r\n        }], \r\n    } ,\r\n    <DynamicControl<TimesheetForm, any>>{ name: \"startTime\", required: true,\r\n        valueGetter: (f: TimesheetForm) => _getISO(f?.startTime),\r\n        type: \"control\", questions: [{\r\n            component:  IonDateQuestionComponent,\r\n            question: <IonDateQuestion>{\r\n                placeholder: \"Starttid\", \r\n                width: \"20%\",\r\n                ionFormat:\"HH:mm\",\r\n                datePipeFormat: \"HH:mm\",\r\n                minuteValues: [0,15,30,45],\r\n                defaultValueGetter:  (f: TimesheetForm) => _timeValueDefault(f?.date, 7),\r\n                max: {controlName: \"endTime\", callback: (val: any) => val}\r\n            }, \r\n        }], \r\n    },\r\n    <DynamicControl<TimesheetForm, any>>{ name: \"endTime\", required: true,\r\n        valueGetter: (f: TimesheetForm) => _getISO(f?.endTime),\r\n        type: \"control\", questions: [{\r\n            component:  IonDateQuestionComponent,\r\n            question: <IonDateQuestion>{\r\n                placeholder: \"Sluttid\", \r\n                width: \"20%\",\r\n                ionFormat:\"HH:mm\",\r\n                datePipeFormat: \"HH:mm\",\r\n                minuteValues: [0,15,30,45],  \r\n                defaultValueGetter:  (f: TimesheetForm) => _timeValueDefault(f.date, 12),          \r\n                min: {controlName: \"startTime\", callback: (val: any) => val}\r\n            }, \r\n        }], \r\n    },\r\n]}\r\nconst CommentControl = <DynamicControl<TimesheetForm, any>>{ name: \"comment\", required: true,\r\n    type: \"control\", valueGetter: (s: TimesheetForm) => s?.comment, questions: [{\r\n        component:  TextAreaQuestionComponent,\r\n        question: <TextAreaQuestion>{placeholder: \"Kommentar\"}, \r\n    }], \r\n    validators: [Validators.maxLength(400)], \r\n}\r\n\r\nexport const CreateUserTimesheetForm: DynamicForm<TimesheetForm, FormState> = {\r\n    submitText: \"Legg til\", getRawValue: true,\r\n    controls: [\r\n        {...MissionAutoCompleteControl, required: true},\r\n        DateTimeControlGroup,\r\n        CommentControl,\r\n    ]\r\n}\r\nexport const EditUserTimesheetForm: DynamicForm<TimesheetForm, FormState> = {\r\n    submitText: \"Oppdater\", getRawValue: true,\r\n    controls: [\r\n        ...CreateUserTimesheetForm.controls,\r\n        HiddenIdControl,\r\n    ],\r\n}","export function _getISOWithTimezone(date: Date | string | number): string{\r\n    if(!date) return;\r\n    const _date = new Date(date);\r\n    const timezone = _date.getTimezoneOffset();\r\n\r\n    if(timezone == 0) return _date.toISOString();\r\n    const hours = Math.abs(timezone / 60); //Convert to hours\r\n    const newDate = new Date(_date); \r\n\r\n    newDate.setHours(_date.getHours() + hours, 0,0,0);\r\n\r\n    let result: string = newDate.toISOString();\r\n    const isoSuffix = `${timezone > 0 ? \"-\" : \"+\"}${hours > 9 ? \"\" : \"0\"}${hours}:00`;\r\n\r\n    result = result.substring(0, result.length - 1) + isoSuffix;\r\n    \r\n    return result;\r\n  }\r\n\r\n\r\n  export function _getISO(date: Date | string | number): string{\r\n    if(!date) return;\r\n    return new Date(date).toISOString()\r\n  }","import { Validators } from '@angular/forms';\r\nimport { DynamicControl, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { InputQuestion, InputQuestionComponent } from '../../components/dynamic-form-questions/input-question.component';\r\nimport { isSamePasswordsValidator } from '../../form/validators/is-same-passwords.validator';\r\nimport { UserNameControl } from '../common-controls.const';\r\n\r\ninterface PasswordForm { newPassword: string, confirmPassword: string }\r\n\r\nexport interface CurrentUserPasswordFormState extends PasswordForm { oldPassword: string }\r\n\r\nconst NewPasswordControl = <DynamicControl<PasswordForm, any>>{ name: \"newPassword\", required: true,\r\n    type: \"control\", questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{ \r\n            placeholder: \"Nytt passord\", type: \"password\", hideable: true, defaultHidden: true,\r\n        }, \r\n    }],\r\n    validators: [Validators.minLength(7)] \r\n}\r\nconst ConfirmPasswordControl = <DynamicControl<PasswordForm, any>>{ name: \"confirmPassword\", required: true,\r\n    type: \"control\", questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{ \r\n            placeholder: \"Gjenta nytt passord\", type: \"password\", hideable: true, defaultHidden: true,\r\n        }, \r\n    }],\r\n}\r\n\r\nexport const CurrentUserPasswordForm: DynamicForm<CurrentUserPasswordFormState, any> = {\r\n    submitText: \"Oppdater\", controls: [\r\n        <DynamicControl<CurrentUserPasswordFormState, any>>{ name: \"oldPassword\", required: true,\r\n            type: \"control\", questions: [{\r\n                component:  InputQuestionComponent,\r\n                question: <InputQuestion>{ \r\n                    placeholder: \"Nåværende passord\", type: \"password\", hideable: true, defaultHidden: true,\r\n                }, \r\n            }],\r\n            validators: [Validators.minLength(7)] \r\n        },\r\n        NewPasswordControl,\r\n        ConfirmPasswordControl\r\n    ], validators: [isSamePasswordsValidator<PasswordForm>(\"newPassword\", \"confirmPassword\")],\r\n}\r\n\r\nexport interface UserPasswordFormState extends PasswordForm { userName: string }\r\nexport const UserPasswordForm: DynamicForm<UserPasswordFormState,  any> = {\r\n    submitText: \"Oppdater\", disabledControls: {userName: true}, getRawValue: true,\r\n    controls: [\r\n        UserNameControl,\r\n        NewPasswordControl,\r\n        ConfirmPasswordControl,\r\n    ],\r\n}","import { FormGroup, ValidationErrors, ValidatorFn } from '@angular/forms';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\n\r\nexport function isSamePasswordsValidator<TForm>(controlName1: Prop<TForm>, controlName2: Prop<TForm>): ValidatorFn {\r\n    return (group: FormGroup): ValidationErrors => { \r\n        const control1 = group.get(controlName1);\r\n        const control2 = group.get(controlName2);\r\n        return (control1.dirty && control2.dirty && \r\n            (control1.value !== control2.value)) ? {'issamepasswords': false} : null\r\n    }     \r\n    \r\n}\r\n"],"sourceRoot":"webpack:///"}
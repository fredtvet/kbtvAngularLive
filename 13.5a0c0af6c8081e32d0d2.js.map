{"version":3,"sources":["./src/app/shared-app/helpers/validate-file-extension.helper.ts","./src/app/shared/enums/timesheet-status.enum.ts","./src/app/shared/data.filter.ts","./src/app/model/abstracts/base-form-to-save-model-file-state-command.adapter.ts","./src/app/shared/model-form/adapters/form-to-save-model-file-state-command.adapter.ts","./src/app/shared/form/form.service.ts","./src/app/shared/operators/filter-records.operator.ts","./src/app/model/model-file.wrapper.ts","./src/app/core/services/ui/bottom-sheet-menu.service.ts","./src/app/shared/constants/forms/mission-criteria-form.const.ts","./src/app/shared/mission-filter.model.ts","./src/app/mission-modules/mission-list/set-mission-criteria.reducer.ts","./src/app/mission-modules/mission-list/update-last-visited.reducer.ts","./src/app/mission-modules/mission-list/mission-list.facade.ts","./src/app/mission-modules/mission-list/mission-list/mission-list-providers.const.ts","./src/app/mission-modules/mission-list/mission-list/mission-list-default-state.const.ts","./src/app/mission-modules/mission-list/mission-list/mission-list-view/mission-list-view.component.html","./src/app/mission-modules/mission-list/mission-list/mission-list-view/mission-list-view.component.ts","./src/app/mission-modules/mission-list/mission-list/mission-list.component.html","./src/app/mission-modules/mission-list/mission-list/mission-list.component.ts","./src/app/shared/components/detail-top-nav-bar/detail-top-nav-bar.component.html","./src/app/shared/components/detail-top-nav-bar/detail-top-nav-bar.component.ts","./src/app/mission-modules/mission-list/mission-details/mission-details-view/mission-details-view.component.html","./src/app/mission-modules/mission-list/mission-details/mission-details-view/mission-details-view.component.ts","./src/app/mission-modules/mission-list/mission-details/mission-details.component.html","./src/app/mission-modules/mission-list/mission-details/mission-details.component.ts","./src/app/mission-modules/mission-list/mission-list-routing.module.ts","./src/app/mission-modules/mission-list/mission-list.module.ts","./src/app/shared/enums/group-by-period.enum.ts","./src/app/shared/enums/index.ts","./src/app/shared/pipes/app-file-url.pipe.ts","./src/app/state/component.store.ts","./src/app/state/providers.const.ts","./src/app/shared/constants/image-file-extensions.const.ts","./src/app/shared/form/index.ts","./src/app/shared-app/helpers/app-file-url.helper.ts","./src/app/shared-app/const/app-notifications.const.ts","./src/app/shared/directives/image-error-reloader.directive.ts"],"names":["_validateFileExtension","file","allowedExtensions","includes","name","split","pop","TimesheetStatus","criteria","maxChecks","ignoreInital","checksCount","checkDefault","record","exp","addChecks","checkInitial","addInitialChecks","this","check","isCriteriaEmpty","console","error","input","adapt","formState","fileWrapper","entity","modelConfig","identifier","actionId","convertFormStateToEntity","matBottomSheet","open","config","data","formConfig","navConfig","submitCallback","formComponent","formState$","FormService","filterRecords","filterType","source","pipe","timesheets","records","filter","filterArgs","inputFile","id","type","extension","getExtension","modifiedFile","File","fileName","buttons","BottomSheetMenuService","SearchStringControl","valueGetter","s","searchString","questions","component","question","optionsGetter","options","missions","valueFormatter","val","address","valueProp","placeholder","resetable","activeFilter","stringProps","MissionTypeControl","missionType","missionTypes","compareWith","MissionCriteriaForm","submitText","resettable","resetState","finished","controls","label","ignoreInitial","searchStringLower","toLowerCase","sixtyDaysAgo","Date","setDate","getDate","employer","mission","filterSearchString","employerId","missionTypeId","updatedAt","lastVisited","m","SetMissionCriteriaActionId","SetMissionCriteriaReducer","reducerFn","state","action","missionCriteria","UpdateLastVisitedActionId","UpdateLastVisitedReducer","stateProperties","noDeepCloneState","index","findIndex","x","getTime","notificationService","store","componentStore","filteredMissions$","combineLatest","selectProperty$","map","criteria$","criteriaFormState$","select$","addCriteria","dispatch","updateLastVisited","selectProperty","getMissionDetails$","relationCfg","includedProps","updateHeaderImage","notify","title","command","stateProp","saveAction","apiUrlOverride","MissionListFacade","MissionListProviders","provide","useValue","multi","trackByFn","MissionListViewComponent","formService","chipsFactory","modelFormService","facade","route","navVm$","criteriaChips","getCriteriaChips","getTopNavConfig","missions$","searchMissions","openMissionForm","dynamicForm","openMissionFilter","initialValue","fabs","icon","aria","color","callback","allowedRoles","Leder","Mellomleder","snapshot","paramMap","get","searchBar","createCriteriaChips","prop","resetCriteriaProp","MissionListComponent","DetailTopNavBarComponent","RolePresets","MissionDetailsViewComponent","routes","path","depth","children","router","appFileUrl","menuService","vm$","missionId","getNavConfig","files","openHeaderImageInput","window","navigator","onLine","OnlineRequired","imageInput","nativeElement","click","entityId","onDeleteUri","goToTimesheets","navigate","returnUrl","url","JSON","stringify","status","Open","relativeTo","openBottomSheetMenu","text","params","onBack","titleLines","replace","subTitle","subIcon","imgSrc","transform","backFn","Internal","Authority","MissionDetailsComponent","child","loadChildren","then","UserTimesheetListModule","MissionImageListModule","valueOf","MissionDocumentListModule","MissionNoteListModule","MissionListRoutingModule","forChild","effectsSubscriber","MissionListModule","GroupByPeriod","domSanitizer","modelFile","folder","disableCache","temp_localFileUrl","bypassSecurityTrustResourceUrl","AppFileUrlPipe","hostStore","queryDispatcher","dispatcher","reducers","defaultState","ComponentStore","ComponentStoreProviders","ImageFileExtensions","_appFileUrl","fileServerUrl","Math","floor","random","AppNotifications","el","maxRetries","retries","resetSrc","src","onError","setTimeout","ImageErrorReloaderDirective"],"mappings":"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","file":"13.5a0c0af6c8081e32d0d2.js","sourcesContent":["export function _validateFileExtension(file: File, allowedExtensions: string[]): boolean{\r\n    return allowedExtensions.includes(file.name?.split('.').pop());\r\n}\r\n","export enum TimesheetStatus {\r\n  Open = 1,\r\n  Confirmed\r\n}\r\n","export type DataFilterConstructor<TCriteria>  = \r\n    new (criteria: TCriteria, ...args: any[]) => DataFilter<any, TCriteria>;\r\n\r\nexport abstract class DataFilter<TRecord, TCriteria>{\r\n\r\n    private checksCount: number = 0;\r\n\r\n    protected get isCriteriaEmpty(): boolean{ return !this.criteria }\r\n\r\n    criteria: TCriteria;\r\n\r\n    constructor(criteria: TCriteria, private maxChecks?: number, ignoreInital?: boolean){\r\n        this.criteria = criteria || {} as any;\r\n        if(ignoreInital) \r\n            this.check = this.checkDefault\r\n        else \r\n            this.check = this.isCriteriaEmpty ? this.checkInitial : this.checkDefault;\r\n    }\r\n\r\n    check: (record: TRecord) => boolean; \r\n\r\n    protected addChecks(record: TRecord): boolean{\r\n        console.error(\"Method not implemented\");\r\n        return null;\r\n    }\r\n\r\n    protected addInitialChecks(record: TRecord): boolean{\r\n        return true; \r\n    }\r\n\r\n    private checkDefault = (record: TRecord): boolean => { \r\n        if(!record) return false;\r\n        if(this.maxChecks && this.checksCount >= this.maxChecks) return false;\r\n        \r\n        let exp = true;\r\n\r\n        exp = exp && this.addChecks(record);\r\n\r\n        if(exp && this.maxChecks) this.checksCount++; //if true, append checksCount\r\n\r\n        return exp;\r\n    }\r\n\r\n    private checkInitial = (record: TRecord): boolean => {\r\n        return this.addInitialChecks(record);\r\n    }\r\n\r\n}","import { ModelFile } from 'src/app/core/models';\r\nimport { ModelFormToSaveModelInput } from 'src/app/shared/model-form/interfaces/model-form-to-state-command-adapter.interface';\r\nimport { ModelFileWrapper } from '../model-file.wrapper';\r\nimport { SaveModelFileStateCommand } from '../state/save-model-file/save-model-file-action.const';\r\nimport { BaseFormToSaveModelStateCommandAdapter } from './base-form-to-save-model-state-command.adapter';\r\n\r\n\r\nexport abstract class BaseFormToSaveModelFileStateCommandAdapter<TModel extends ModelFile, TFormState extends {file: File}> \r\n    extends BaseFormToSaveModelStateCommandAdapter<TModel, TFormState> implements SaveModelFileStateCommand<ModelFile> {\r\n\r\n    fileWrapper: ModelFileWrapper;\r\n    actionId: string;\r\n\r\n    constructor(   \r\n        protected input: ModelFormToSaveModelInput<TFormState>\r\n    ){\r\n        super(input);\r\n    }\r\n    \r\n    protected adapt(): void{\r\n        const file = this.input.formState.file;\r\n        super.adapt();\r\n        // var fileId = Math.floor(Math.random() * 100).toString() + command.entity.id;\r\n        this.fileWrapper = \r\n            new ModelFileWrapper(file, this.entity[this.modelConfig.identifier] as any);\r\n    }\r\n}","import { ModelFile } from 'src/app/core/models';\r\nimport { BaseFormToSaveModelFileStateCommandAdapter } from 'src/app/model/abstracts/base-form-to-save-model-file-state-command.adapter';\r\nimport { SaveModelFileStateCommand, SaveModelFileActionId } from 'src/app/model/state/save-model-file/save-model-file-action.const';\r\nimport { ModelFormToSaveModelInput } from '../interfaces/model-form-to-state-command-adapter.interface';\r\n\r\nexport class FormToSaveModelFileStateCommandAdapter\r\n    extends BaseFormToSaveModelFileStateCommandAdapter<ModelFile, ModelFile & {file: File}> implements SaveModelFileStateCommand<ModelFile> {\r\n\r\n    actionId: string = SaveModelFileActionId;\r\n\r\n    constructor(   \r\n        protected input: ModelFormToSaveModelInput<ModelFile & {file: File}> \r\n    ){\r\n        super(input);\r\n    }\r\n\r\n    protected convertFormStateToEntity(): void{\r\n        delete this.input.formState.file;\r\n        this.entity = this.input.formState;      \r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { MatBottomSheet, MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { Observable, of } from 'rxjs';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { FormSheetWrapperComponent } from './form-sheet-wrapper.component';\r\nimport { DynamicFormComponent } from 'src/app/dynamic-forms/components/dynamic-form.component';\r\nimport { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { FormSheetWrapperConfig } from './interfaces';\r\n\r\nexport interface FormServiceConfig<TForm, TFormState>{\r\n  formConfig: DynamicForm<TForm, TFormState>, \r\n  navConfig: MainTopNavConfig,\r\n  formState?: TFormState | Observable<TFormState>,\r\n  submitCallback?: (val: TForm) => void\r\n}\r\n\r\n@Injectable({ providedIn: \"any\" })\r\nexport class FormService {\r\n\r\n  constructor(private matBottomSheet: MatBottomSheet) {}\r\n\r\n  open<TForm, TFormState>(config: FormServiceConfig<TForm, TFormState>)\r\n  : MatBottomSheetRef<FormSheetWrapperComponent, TForm> {      \r\n    return this.matBottomSheet.open(FormSheetWrapperComponent, { \r\n      data: <FormSheetWrapperConfig<DynamicForm<TForm, TFormState>, any, TForm>>{\r\n        formConfig: config.formConfig, \r\n        navConfig: config.navConfig, \r\n        submitCallback: config.submitCallback,\r\n        formComponent: DynamicFormComponent,\r\n        formState$: config.formState instanceof Observable ? config.formState : of(config.formState)\r\n      } \r\n    });\r\n  }\r\n\r\n}\r\n","import { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { _filter } from 'src/app/shared-app/helpers/array/filter.helper';\r\nimport { DataFilterConstructor } from 'src/app/shared/data.filter';\r\nimport { FilteredResponse } from 'src/app/shared/interfaces';\r\n\r\nexport const filterRecords = <TRecord, TCriteria>(filterType: DataFilterConstructor<TCriteria>, ...filterArgs: any[]) => \r\n    (source: Observable<[TRecord[], TCriteria]> ): Observable<FilteredResponse<TCriteria, TRecord>> => \r\n        source.pipe(\r\n            map(([timesheets, criteria]) => {\r\n                if(!criteria) return {criteria: null, records: null};\r\n                const filter = new filterType(criteria, ...filterArgs);\r\n                return {\r\n                    criteria,\r\n                    records: _filter(timesheets, (entity) => filter.check(entity)),\r\n                };\r\n            }), \r\n        )","export class ModelFileWrapper{\r\n\r\n    modifiedFile: File;\r\n    id: any;\r\n\r\n    constructor(inputFile: File, id: any){\r\n        if(!inputFile || !id) console.error( \"File and Id are required\");\r\n        this.id = id;\r\n        var type = inputFile.type;\r\n        var extension = this.getExtension(inputFile.name);\r\n        this.modifiedFile = new File([inputFile], `${id}.${extension}`, {type});\r\n    }\r\n\r\n    private getExtension(fileName: string): string{\r\n        return fileName.split('.').pop() || fileName;\r\n    }\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { MatBottomSheet, MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\nimport { BottomSheetMenuComponent } from 'src/app/shared/components';\r\n\r\n@Injectable({ providedIn: \"any\" })\r\nexport class BottomSheetMenuService {\r\n\r\n  constructor(private matBottomSheet: MatBottomSheet) {}\r\n\r\n  open(buttons: AppButton[]): MatBottomSheetRef<BottomSheetMenuComponent> {\r\n    return this.matBottomSheet.open(BottomSheetMenuComponent, { data: buttons });\r\n  }\r\n}","import { Mission, MissionType } from 'src/app/core/models';\r\nimport { DynamicControl, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { StateMissions, StateEmployers, StateMissionTypes } from 'src/app/state/interfaces';\r\nimport { AutoCompleteQuestionComponent } from '../../components/dynamic-form-questions/auto-complete-question/auto-complete-question.component';\r\nimport { AutoCompleteQuestion } from '../../components/dynamic-form-questions/auto-complete-question/auto-complete-question.interface';\r\nimport { RadioGroupQuestionComponent, RadioGroupQuestion } from '../../components/dynamic-form-questions/radio-group-question.component';\r\nimport { SelectQuestionComponent, SelectQuestion } from '../../components/dynamic-form-questions/select-question.component';\r\nimport { _compareProp } from '../../form/helpers/compare-with-prop.helper';\r\nimport { OptionsFormState } from '../../form/interfaces';\r\nimport { MissionCriteria } from '../../interfaces';\r\nimport { EmployerSelectControl } from '../common-controls.const';\r\n\r\nexport interface MissionCriteriaFormState \r\n    extends OptionsFormState<StateMissions & StateEmployers & StateMissionTypes> {}\r\n\r\ntype FormState = MissionCriteriaFormState;\r\n\r\nconst SearchStringControl = <DynamicControl<MissionCriteria, FormState>>{ name: \"searchString\", \r\n    valueGetter: (s: MissionCriteria) => s.searchString,\r\n    type: \"control\", questions: [{\r\n        component:  AutoCompleteQuestionComponent,\r\n        question: <AutoCompleteQuestion<Mission>>{\r\n            optionsGetter: (s: FormState) => s.options.missions,\r\n            valueFormatter: (val: Mission) => val.address,\r\n            valueProp: \"address\",\r\n            placeholder: \"Søk med adresse\",\r\n            resetable: true,\r\n            activeFilter: { stringProps: [\"address\"], maxChecks: 50 }\r\n        }, \r\n    }], \r\n}\r\nconst MissionTypeControl = <DynamicControl<MissionCriteria, FormState>>{ name: \"missionType\",\r\n    valueGetter: (s: MissionCriteria) => s.missionType,\r\n    type: \"control\", questions: [{\r\n        component:  SelectQuestionComponent,\r\n        question: <SelectQuestion<MissionType>>{\r\n            optionsGetter: (s: FormState) => s.options.missionTypes, \r\n            valueFormatter: (val: MissionType) => val.name,\r\n            compareWith: _compareProp(\"id\"),\r\n            placeholder: \"Velg oppdragstype\",\r\n        }, \r\n    }], \r\n}\r\nconst FinishedControl = <DynamicControl<MissionCriteria, FormState>>{ name: \"finished\",\r\n    valueGetter: (s: MissionCriteria) => s.finished, \r\n    type: \"control\", questions: [{\r\n        component:  RadioGroupQuestionComponent,\r\n        question: <RadioGroupQuestion<boolean>>{   \r\n            label: \"Velg status\", optionsGetter: [false, true],\r\n            valueFormatter: (finished: boolean) => finished ? \"Ferdig\" : \"Aktiv\"\r\n        }, \r\n    }], \r\n}\r\n\r\nexport const MissionCriteriaForm: DynamicForm<MissionCriteria, FormState> = {\r\n    submitText: \"Bruk\", resettable: true, resetState: {finished: false},\r\n    controls: [\r\n        SearchStringControl,\r\n        EmployerSelectControl,\r\n        MissionTypeControl,\r\n        FinishedControl\r\n    ],\r\n}","import { Mission } from '../core/models';\r\nimport { MissionCriteria } from './interfaces';\r\nimport { DataFilter } from './data.filter';\r\n\r\nexport class MissionFilter extends DataFilter<Mission, MissionCriteria>{\r\n\r\n    protected get isCriteriaEmpty(): boolean{\r\n        return !this.criteria || \r\n            (this.criteria.finished == null && !this.criteria.searchString && !this.criteria.employer && !this.criteria.missionType)\r\n    }\r\n\r\n    private searchStringLower: string;\r\n    private sixtyDaysAgo: number;\r\n\r\n    constructor(criteria: MissionCriteria, maxChecks?: number, ignoreInitial?: boolean){\r\n        super(criteria, maxChecks, ignoreInitial);\r\n        this.searchStringLower = criteria?.searchString?.toLowerCase();\r\n        if(this.isCriteriaEmpty) this.sixtyDaysAgo = new Date().setDate(new Date().getDate() - 60);\r\n    }\r\n\r\n    protected addChecks(mission: Mission): boolean{\r\n        let exp = true;\r\n\r\n        if(this.criteria.finished != null)\r\n            exp = exp && ((mission.finished === this.criteria.finished) || (!mission.finished && this.criteria.finished === false));\r\n\r\n        if(this.criteria.searchString)\r\n            exp = exp && this.filterSearchString(mission);\r\n\r\n        if(this.criteria.employer?.id)\r\n            exp = exp && mission.employerId === this.criteria.employer.id;\r\n\r\n        if(this.criteria.missionType?.id)\r\n            exp = exp && mission.missionTypeId === this.criteria.missionType.id;\r\n\r\n        return exp;\r\n    }\r\n\r\n    protected addInitialChecks(mission: Mission): boolean{\r\n        let exp = mission.updatedAt >= this.sixtyDaysAgo; //Grab missions updated last 30 days\r\n        exp = exp || mission.lastVisited >= this.sixtyDaysAgo;//Grab missions visited last 30 days\r\n        return exp;\r\n    }\r\n    \r\n    private filterSearchString(m: Mission): boolean{\r\n        return m.address.toLowerCase().includes(this.searchStringLower) || \r\n            m.id.includes(this.searchStringLower);\r\n    }   \r\n       \r\n};","import { StoreState } from 'src/app/core/services/auth/interfaces/store-state';\r\nimport { MissionCriteria } from 'src/app/shared/interfaces';\r\nimport { Reducer, StateAction } from 'src/app/state/interfaces';\r\n\r\nexport const SetMissionCriteriaActionId = \"SET_MISSION_CRITERIA\";\r\n\r\nexport interface SetMissionCriteriaCommand extends StateAction { missionCriteria: MissionCriteria }\r\n\r\nexport const SetMissionCriteriaReducer: Reducer<any> = {\r\n    actionId: SetMissionCriteriaActionId,\r\n    reducerFn: (state: StoreState, action: SetMissionCriteriaCommand) => {\r\n        return { missionCriteria: action.missionCriteria }\r\n    }       \r\n}  \r\n","import { Reducer, StateAction, StateMissions } from 'src/app/state/interfaces';\r\n\r\nexport interface UpdateLastVisitedCommand extends StateAction { id: string; }\r\n\r\nexport const UpdateLastVisitedActionId = \"MISSION_LIST_UPDATE_LAST_VISITED\";\r\n\r\nexport const UpdateLastVisitedReducer: Reducer<StateMissions> = {\r\n    actionId: UpdateLastVisitedActionId,\r\n    stateProperties: [\"missions\"],\r\n    noDeepCloneState: true,\r\n    reducerFn: (state: StateMissions, action: UpdateLastVisitedCommand): StateMissions => {\r\n        const index = state.missions?.findIndex(x => x.id === action.id);\r\n        if(!index || state.missions) return null;\r\n        let mission = state.missions[index];\r\n        if(!index || !mission) return null;\r\n        mission = {...mission, lastVisited: new Date().getTime()};\r\n        return state;\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { combineLatest, Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { ApiUrl } from 'src/app/core/api-url.enum';\r\nimport { Mission } from \"src/app/core/models\";\r\nimport { GetWithRelationsConfig } from 'src/app/model/helpers/get-with-relations.config';\r\nimport { _getWithRelations } from 'src/app/model/helpers/get-with-relations.helper';\r\nimport { SaveModelFileStateCommand } from 'src/app/model/state/save-model-file/save-model-file-action.const';\r\nimport { NotificationService, NotificationType } from 'src/app/notification';\r\nimport { ActionType } from 'src/app/shared-app/enums';\r\nimport { _sortByDate } from 'src/app/shared-app/helpers/array/sort-by-date.helper';\r\nimport { _validateFileExtension } from 'src/app/shared-app/helpers/validate-file-extension.helper';\r\nimport { MissionCriteriaFormState } from 'src/app/shared/constants/forms/mission-criteria-form.const';\r\nimport { ImageFileExtensions } from 'src/app/shared/constants/image-file-extensions.const';\r\nimport { MissionCriteria } from 'src/app/shared/interfaces';\r\nimport { MissionFilter } from 'src/app/shared/mission-filter.model';\r\nimport { FormToSaveModelFileStateCommandAdapter } from 'src/app/shared/model-form/adapters/form-to-save-model-file-state-command.adapter';\r\nimport { filterRecords } from 'src/app/shared/operators/filter-records.operator';\r\nimport { ComponentStore } from 'src/app/state/component.store';\r\nimport { Store } from 'src/app/state/store';\r\nimport { ComponentStoreState, StoreState } from './interfaces/store-state';\r\nimport { SetMissionCriteriaActionId } from './set-mission-criteria.reducer';\r\nimport { UpdateLastVisitedActionId, UpdateLastVisitedCommand } from './update-last-visited.reducer';\r\n\r\n@Injectable()\r\nexport class MissionListFacade {\r\n\r\n  filteredMissions$: Observable<Mission[]> = combineLatest([\r\n    this.store.selectProperty$<Mission[]>(\"missions\"),\r\n    this.componentStore.selectProperty$<MissionCriteria>(\"missionCriteria\")\r\n  ]).pipe(\r\n    filterRecords<Mission, MissionCriteria>(MissionFilter, null, true),   \r\n    map(x => _sortByDate(x.records, \"updatedAt\") ),\r\n  );\r\n\r\n  criteria$: Observable<MissionCriteria> = \r\n    this.componentStore.selectProperty$<MissionCriteria>(\"missionCriteria\");\r\n\r\n  get criteria(): MissionCriteria {\r\n    return this.componentStore.selectProperty<MissionCriteria>(\"missionCriteria\");\r\n  }\r\n\r\n  criteriaFormState$: Observable<MissionCriteriaFormState> = \r\n    this.store.select$([\"missionTypes\", \"employers\", \"missions\"], false).pipe(\r\n      map(options => { return {options} as any})\r\n    )\r\n\r\n  constructor(\r\n    private notificationService: NotificationService,\r\n    private store: Store<StoreState>,\r\n    private componentStore: ComponentStore<ComponentStoreState>\r\n  ) {}\r\n\r\n  getMissionDetails$(id: string): Observable<Mission> {\r\n    this.updateLastVisited(id);\r\n\r\n    let relationCfg = new GetWithRelationsConfig(\"missions\", \r\n      [\"missionNotes\", \"missionDocuments\", \"missionImages\"]);\r\n\r\n    return this.store.select$(relationCfg.includedProps as any).pipe(\r\n      map(state => _getWithRelations(state, relationCfg, id))\r\n    )\r\n  }\r\n\r\n  addCriteria = (missionCriteria: MissionCriteria): void => \r\n    this.componentStore.dispatch({actionId: SetMissionCriteriaActionId, missionCriteria});\r\n    \r\n  updateHeaderImage(id: string, file: File): void {\r\n    if(!_validateFileExtension(file, ImageFileExtensions)) \r\n      return this.notificationService.notify(\r\n          {title: \"Filtypen er ikke tillatt.\", type: NotificationType.Error}\r\n      );  \r\n\r\n    let command: SaveModelFileStateCommand<Mission> = new FormToSaveModelFileStateCommandAdapter({\r\n      formState: {id, file},\r\n      stateProp: \"missions\",\r\n      saveAction: ActionType.Update\r\n    });\r\n\r\n    command.apiUrlOverride = `${ApiUrl.Mission}/${id}/UpdateHeaderImage`;\r\n\r\n    this.store.dispatch(command);\r\n  }\r\n\r\n  private updateLastVisited = (id: string): void => \r\n    this.store.dispatch(<UpdateLastVisitedCommand>{\r\n      actionId: UpdateLastVisitedActionId, id\r\n    })\r\n\r\n}\r\n","import { Provider } from '@angular/core';\r\nimport { ComponentStoreProviders } from 'src/app/state/providers.const';\r\nimport { STORE_DEFAULT_STATE, STORE_REDUCERS } from 'src/app/state/injection-tokens';\r\nimport { MissionListFacade } from '../mission-list.facade';\r\nimport { SetMissionCriteriaReducer } from '../set-mission-criteria.reducer';\r\nimport { MissionListDefaultState } from './mission-list-default-state.const';\r\n\r\nexport const MissionListProviders: Provider[] = [\r\n    MissionListFacade,\r\n    ...ComponentStoreProviders,\r\n    { provide: STORE_REDUCERS, useValue: SetMissionCriteriaReducer, multi: true },\r\n    { provide: STORE_DEFAULT_STATE, useValue: MissionListDefaultState }\r\n]","export const MissionListDefaultState = {\r\n    missionCriteria: {finished: false}\r\n}","<div class=\"h-100 pl-1 pr-1 max-width\" style=\"overflow:hidden\" fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\r\n  \r\n    <p *ngIf=\"!missions || missions.length == 0\" class=\"m-2\">Fant ingen oppdrag</p>\r\n\r\n    <cdk-virtual-scroll-viewport itemSize=\"56\" maxBufferPx=\"800\" minBufferPx=\"800\" class=\"h-100\">\r\n \r\n            <app-list-card *cdkVirtualFor=\"let mission of missions; trackBy: trackByFn;\" \r\n                [routerLink]=\"[mission.id, 'detaljer']\">        \r\n                <mat-icon left-side>home_work</mat-icon>\r\n                <span fxHide.xs>{{'(' + mission.id + ') '}}</span>{{ mission.address }}\r\n                <mat-icon right-side>{{ mission.finished ? 'check':'chevron_right' }}</mat-icon>\r\n            </app-list-card>\r\n\r\n    </cdk-virtual-scroll-viewport>\r\n\r\n</div>","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { Mission } from 'src/app/core/models';\r\nimport { _trackByModel } from 'src/app/shared-app/helpers/trackby/track-by-model.helper';\r\n\r\n@Component({\r\n  selector: 'app-mission-list-view',\r\n  templateUrl: './mission-list-view.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MissionListViewComponent {\r\n\r\n  @Input() missions: Mission[];\r\n\r\n  constructor() { }\r\n\r\n  trackByFn = _trackByModel(\"missions\");\r\n}\r\n","\r\n\r\n<app-main-skeleton [fabs]=\"fabs\">\r\n\r\n  <ng-container navbar *ngIf=\"navVm$ | async; let navVm\">\r\n    <app-main-top-nav-bar [config]=\"navVm.navConfig\" >\r\n    </app-main-top-nav-bar>\r\n    <app-chips-bar [chips]=\"navVm.criteriaChips\"></app-chips-bar>\r\n  </ng-container>\r\n\r\n  <app-mission-list-view\r\n    [missions]=\"missions$ | async\" \r\n    (search)=\"searchMissions($event)\">\r\n  </app-mission-list-view>\r\n\r\n</app-main-skeleton>\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { ChangeDetectionStrategy, Component } from \"@angular/core\";\r\nimport { ActivatedRoute } from \"@angular/router\";\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from \"rxjs/operators\";\r\nimport { Employer, Mission, MissionType } from \"src/app/core/models\";\r\nimport { ChipsFactoryService } from 'src/app/core/services/ui/chips-factory.service';\r\nimport { _getModelDisplayValue } from 'src/app/model/helpers/get-model-property.helper';\r\nimport { Roles } from \"src/app/shared-app/enums\";\r\nimport { _getSetPropCount } from 'src/app/shared-app/helpers/object/get-set-prop-count.helper';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\nimport { AppChip } from 'src/app/shared-app/interfaces/app-chip.interface';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { MissionCriteriaForm, MissionCriteriaFormState } from 'src/app/shared/constants/forms/mission-criteria-form.const';\r\nimport { CreateMissionForm } from 'src/app/shared/constants/model-forms/save-mission-forms.const';\r\nimport { FormService } from 'src/app/shared/form';\r\nimport { MissionCriteria } from \"src/app/shared/interfaces/mission-criteria.interface\";\r\nimport { ModelFormService } from 'src/app/shared/model-form';\r\nimport { MissionListFacade } from '../mission-list.facade';\r\nimport { MissionListProviders } from './mission-list-providers.const';\r\n\r\ninterface NavViewModel{ criteriaChips?: AppChip[], navConfig?: MainTopNavConfig }\r\n\r\n@Component({\r\n  selector: \"app-mission-list\",\r\n  templateUrl: \"./mission-list.component.html\",\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: MissionListProviders,\r\n})\r\nexport class MissionListComponent {\r\n\r\n  navVm$: Observable<NavViewModel> = this.facade.criteria$.pipe(map(x => { return {\r\n    criteriaChips: this.getCriteriaChips(x),\r\n    navConfig: this.getTopNavConfig(x)\r\n  }}))\r\n\r\n  missions$: Observable<Mission[]> = this.facade.filteredMissions$;\r\n\r\n  get initialMissionId() { return this.route.snapshot.paramMap.get('initialMissionId') }\r\n\r\n  fabs: AppButton[];\r\n\r\n  constructor(\r\n    private formService: FormService,\r\n    private chipsFactory: ChipsFactoryService,\r\n    private modelFormService: ModelFormService,\r\n    private facade: MissionListFacade,\r\n    private route: ActivatedRoute\r\n  ) {\r\n    this.fabs = [\r\n      {icon: \"add\", aria: \"Legg til\", color: \"accent\",\r\n        callback: this.openMissionForm,\r\n        allowedRoles: [Roles.Leder, Roles.Mellomleder]}\r\n    ];\r\n  }\r\n\r\n  searchMissions = (searchString: string) => \r\n    this.facade.addCriteria({ ...this.facade.criteria, searchString });\r\n\r\n  private openMissionForm = () => \r\n    this.modelFormService.open({formConfig: {\r\n      dynamicForm: CreateMissionForm,\r\n      stateProp: \"missions\",\r\n    }})\r\n\r\n  private openMissionFilter = () => \r\n    this.formService.open<MissionCriteria, MissionCriteriaFormState>({\r\n        formConfig: {...MissionCriteriaForm, initialValue: this.facade.criteria}, \r\n        formState: this.facade.criteriaFormState$,\r\n        navConfig: {title: \"Velg filtre\"},\r\n        submitCallback: (val: MissionCriteria) => this.facade.addCriteria(val),\r\n      });   \r\n\r\n  private getTopNavConfig(criteria: MissionCriteria): MainTopNavConfig {\r\n    return {\r\n      title: \"Oppdrag\",\r\n      buttons: [\r\n        {icon: \"filter_list\",\r\n          callback: this.openMissionFilter,\r\n          color: _getSetPropCount(criteria, {finished:false}) ? \"accent\" : null},\r\n      ],\r\n      searchBar: {\r\n        callback: this.searchMissions,\r\n        initialValue: criteria?.searchString,\r\n        placeholder: \"Søk med adresse eller id\",\r\n      },\r\n    };\r\n  }\r\n\r\n  private getCriteriaChips(criteria: MissionCriteria){\r\n    return this.chipsFactory.createCriteriaChips(criteria, \r\n      (prop) => this.resetCriteriaProp(prop, criteria),      \r\n      {\r\n        finished: {valueFormatter: (val: boolean) => val ? \"Ferdig\" : null},\r\n        employer: {valueFormatter: (val: Employer) => _getModelDisplayValue(\"employers\", val)},\r\n        missionType: {valueFormatter: (val: MissionType) => _getModelDisplayValue(\"missionTypes\", val)}\r\n      },\r\n    )\r\n  }\r\n\r\n  private resetCriteriaProp(prop: string, criteria: MissionCriteria){\r\n    criteria[prop] = null;\r\n    this.facade.addCriteria(criteria);\r\n  }\r\n\r\n}\r\n","\r\n<div class=\"container primary\" *ngIf=\"config\">\r\n    \r\n    <div *ngIf=\"config.imgSrc\" class=\"img-container text-center mr-auto ml-auto \">\r\n      <img appImageErrorReloader #img [src]=\"config.imgSrc\" (error)=\"img.src = '/assets/notfound.png?'\" alt=\"Forsidebilde\" />\r\n    </div>\r\n  \r\n    <app-main-top-nav-bar [config]=\"config\" \r\n        [stylingClass]=\"config.imgSrc ? 'detail-navbar-overlay detail-navbar-overlay-top' : ''\">\r\n    </app-main-top-nav-bar>\r\n  \r\n    <mat-toolbar *ngIf=\"config?.titleLines && config.titleLines.length > 0\" \r\n      [ngClass]=\"config.imgSrc ? 'detail-navbar-overlay detail-navbar-overlay-bottom' : ''\"\r\n      class=\"detail-nav\">\r\n  \r\n      <span class=\"ml-6 mb-2\">\r\n          <ng-container *ngFor=\"let line of config.titleLines; let last = last\">\r\n              <div [ngClass]=\"config.imgSrc ? 'img-title-overlay' : ''\" class=\"title-line pl-2 pr-2\">{{ line }}</div><br />\r\n          </ng-container>\r\n      </span>\r\n  \r\n    </mat-toolbar>\r\n</div>\r\n\r\n  ","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { DetailTopNavConfig } from './detail-top-nav.config';\r\n\r\n@Component({\r\n  selector: 'app-detail-top-nav-bar',\r\n  templateUrl: './detail-top-nav-bar.component.html',\r\n  styleUrls: ['detail-top-nav-bar.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DetailTopNavBarComponent{\r\n  @Input() config: DetailTopNavConfig;    \r\n}\r\n","<div class=\"p-1 max-width\" *ngIf=\"mission\">\r\n\r\n  <div fxLayout=\"row\" fxLayoutGap=\"8px\" class=\"mat-subheading-2 mb-2\">\r\n    \r\n    <a *ngIf=\"mission?.phoneNumber else noPhone\" class=\"mat-elevation-z2 foreground-card text-center p-6\" fxFlex=\"50\"\r\n      href=\"tel:{{ mission?.phoneNumber }}\"  matRipple>\r\n      <mat-icon class=\"scale-150 mb-1\">phone</mat-icon><br />\r\n      <span>{{ mission?.phoneNumber || 'N/A' }} </span>\r\n    </a>\r\n\r\n    <ng-template #noPhone>\r\n      <span class=\"mat-elevation-z2 foreground-card text-center p-6\" fxFlex=\"50\">\r\n        <mat-icon class=\"scale-150 mb-1\">phone</mat-icon><br />\r\n        <span>{{ mission?.phoneNumber || 'N/A' }} </span>\r\n      </span>\r\n    </ng-template>\r\n\r\n    <a href=\"https://www.google.com/maps/dir/?api=1&destination={{ mission?.address }}&travelmode=driving\"\r\n      target=\"_blank\" class=\"mat-elevation-z2 foreground-card text-center p-6\" fxFlex=\"50\" matRipple>\r\n      <mat-icon class=\"scale-150\">directions_car</mat-icon><br />\r\n      <span>Veibeskrivelse</span>\r\n    </a>\r\n\r\n  </div>\r\n\r\n  <app-list-card ellipsisDisabled=\"true\" [routerLink]=\"['/oppdrag', mission?.id, 'detaljer','bilder']\">\r\n    <mat-icon left-side>photo_library</mat-icon>\r\n    <span [matBadge]=\"mission.missionImages ? mission.missionImages.length : 0\" \r\n      matBadgeOverlap=\"false\" matBadgeColor=\"accent\">Bilder</span>\r\n    <mat-icon right-side>chevron_right</mat-icon>\r\n  </app-list-card>\r\n\r\n  <app-list-card *ifRole=\"RolePresets.Internal\" ellipsisDisabled=\"true\"  \r\n    [routerLink]=\"['/oppdrag', mission?.id, 'detaljer','dokumenter']\">\r\n    <mat-icon left-side>folder</mat-icon>\r\n    <span [matBadge]=\"mission.missionDocuments ? mission.missionDocuments.length : 0\" \r\n      matBadgeOverlap=\"false\" matBadgeColor=\"accent\">Dokumenter</span>\r\n    <mat-icon right-side>chevron_right</mat-icon>\r\n  </app-list-card>\r\n\r\n  <app-list-card *ifRole=\"RolePresets.Internal\" ellipsisDisabled=\"true\"\r\n    [routerLink]=\"['/oppdrag', mission?.id, 'detaljer','notater']\">\r\n    <mat-icon left-side>rate_review</mat-icon>\r\n    <span [matBadge]=\"mission.missionNotes ? mission.missionNotes.length : 0\" \r\n      matBadgeOverlap=\"false\" matBadgeColor=\"accent\">Notater</span>\r\n    <mat-icon right-side>chevron_right</mat-icon>\r\n  </app-list-card>\r\n\r\n\r\n</div>","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\r\nimport { Mission } from 'src/app/core/models';\r\nimport { RolePresets } from 'src/app/shared-app/enums';\r\n\r\n@Component({\r\n  selector: 'app-mission-details-view',\r\n  templateUrl: './mission-details-view.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MissionDetailsViewComponent {\r\n\r\n  RolePresets = RolePresets;\r\n\r\n  @Input() mission: Mission;\r\n\r\n  constructor() { }\r\n  \r\n}","\r\n<app-main-skeleton *ngIf=\"vm$ | async; let vm\" overlayMode=\"true\">\r\n\r\n    <app-detail-top-nav-bar navbar [config]=\"vm.navConfig\" >\r\n    </app-detail-top-nav-bar>\r\n\r\n    <app-mission-details-view [mission]=\"vm.mission\">\r\n    </app-mission-details-view>\r\n        \r\n</app-main-skeleton>\r\n  \r\n<input type=\"file\" style=\"display:none\" #imageInput (change)=\"updateHeaderImage($event.target.files)\">\r\n","import { ChangeDetectionStrategy, Component, ElementRef, ViewChild } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Mission } from 'src/app/core/models';\r\nimport { BottomSheetMenuService } from 'src/app/core/services/ui/bottom-sheet-menu.service';\r\nimport { NotificationService } from 'src/app/notification';\r\nimport { AppNotifications } from 'src/app/shared-app/const/app-notifications.const';\r\nimport { RolePresets, Roles } from 'src/app/shared-app/enums';\r\nimport { DetailTopNavConfig } from 'src/app/shared/components/detail-top-nav-bar/detail-top-nav.config';\r\nimport { EditMissionForm } from 'src/app/shared/constants/model-forms/save-mission-forms.const';\r\nimport { TimesheetStatus } from 'src/app/shared/enums';\r\nimport { ModelFormService } from 'src/app/shared/model-form';\r\nimport { AppFileUrlPipe } from 'src/app/shared/pipes/app-file-url.pipe';\r\nimport { MissionListFacade } from '../mission-list.facade';\r\n\r\ninterface ViewModel { mission: Mission, navConfig: DetailTopNavConfig }\r\n\r\n@Component({\r\n  selector: 'app-mission-details',\r\n  templateUrl: './mission-details.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MissionDetailsComponent{\r\n  @ViewChild('imageInput') imageInput: ElementRef<HTMLElement>;\r\n\r\n  vm$: Observable<ViewModel> = this.facade.getMissionDetails$(this.missionId).pipe(\r\n    map(mission => { return {\r\n      navConfig: this.getNavConfig(mission), mission\r\n    }})\r\n  );\r\n\r\n  get missionId() { return this.route.snapshot.paramMap.get('id') }\r\n\r\n  constructor(\r\n    private facade: MissionListFacade,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private appFileUrl: AppFileUrlPipe,\r\n    private menuService: BottomSheetMenuService,\r\n    private notificationService: NotificationService,\r\n    private modelFormService: ModelFormService\r\n  ){ }\r\n\r\n  updateHeaderImage = (files: FileList): void => \r\n    files && files[0] ? this.facade.updateHeaderImage(this.missionId, files[0]) : null;\r\n  \r\n  private openHeaderImageInput = (): void =>{ \r\n    if(!window.navigator.onLine)\r\n      return this.notificationService.notify(AppNotifications.OnlineRequired)\r\n  \r\n    this.imageInput?.nativeElement?.click();\r\n  }\r\n  \r\n  private openMissionForm = (entityId: number) => \r\n    this.modelFormService.open({ \r\n      onDeleteUri: \"/oppdrag\",\r\n      formConfig: {\r\n        dynamicForm: EditMissionForm,\r\n        stateProp: \"missions\",\r\n        entityId\r\n      }, \r\n    })\r\n\r\n  private goToTimesheets = (mission: Mission) => \r\n    this.router.navigate(['timer', {\r\n      returnUrl: this.router.url, \r\n      criteria: JSON.stringify({mission, status: TimesheetStatus.Open})\r\n    }], {relativeTo: this.route});\r\n\r\n  private openBottomSheetMenu = (mission: Mission) => {   \r\n    this.menuService.open([\r\n      {text: \"Rediger\", icon: \"edit\", callback: this.openMissionForm, params: [mission?.id], allowedRoles: [Roles.Leder]},\r\n      {text: `${mission?.fileName ? 'Oppdater' : 'Legg til'} forsidebilde`, icon: \"add_photo_alternate\", callback: this.openHeaderImageInput, allowedRoles: [Roles.Leder]},\r\n    ]);\r\n  }\r\n\r\n  private getNavConfig(mission: Mission): DetailTopNavConfig {\r\n    return {\r\n        titleLines: mission?.address?.split(',').filter(x => x.toLowerCase().replace(/\\s/g, '') !== 'norge'),\r\n        subTitle: mission?.finished ? 'Oppdrag ferdig!' : `ID: ${mission?.id}`,\r\n        subIcon: mission?.finished ? 'check' : '',\r\n        imgSrc: this.appFileUrl.transform(mission, \"missionheader\"),\r\n        backFn: this.onBack,\r\n        buttons: [\r\n          {icon: \"timer\", callback: this.goToTimesheets, params: [mission], allowedRoles: RolePresets.Internal},\r\n          {icon: \"more_vert\", callback: this.openBottomSheetMenu, params: [mission], allowedRoles: RolePresets.Authority},\r\n        ]\r\n    }\r\n  }\r\n\r\n  private onBack = () => this.router.navigate(['../../'], {relativeTo: this.route})\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { MissionListComponent } from './mission-list/mission-list.component';\r\nimport { MissionDetailsComponent } from './mission-details/mission-details.component';\r\nimport { RolePresets } from 'src/app/shared-app/enums';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MissionListComponent,\r\n    data: {depth: 1},\r\n    children: [\r\n      {\r\n        path: ':id/detaljer',\r\n        component: MissionDetailsComponent,\r\n        data: {child: true},\r\n        children: [\r\n          {\r\n            path: 'timer',\r\n            data: {child: true},\r\n            loadChildren: () => import('src/app/timesheet-modules/user-timesheet-list/user-timesheet-list.module').then(m => m.UserTimesheetListModule),\r\n          },\r\n          {\r\n            path: 'bilder',\r\n            data: {child: true},\r\n            loadChildren: () => import('src/app/mission-modules/mission-image-list/mission-image-list.module').then(m => m.MissionImageListModule),\r\n          },\r\n          {\r\n            path: 'dokumenter',\r\n            data: {allowedRoles: RolePresets.Internal.valueOf(), child: true},\r\n            loadChildren: () => import('src/app/mission-modules/mission-document-list/mission-document-list.module').then(m => m.MissionDocumentListModule),\r\n        \r\n          },\r\n          {\r\n            path: 'notater',\r\n            data: {allowedRoles: RolePresets.Internal.valueOf(), child: true},\r\n            loadChildren: () => import('src/app/mission-modules/mission-note-list/mission-note-list.module').then(m => m.MissionNoteListModule),\r\n          },\r\n        ]\r\n      },\r\n    ]\r\n  },\r\n\r\n];\r\n\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MissionListRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { DeleteModelProviders, SaveModelFileProviders, SaveModelProviders } from 'src/app/model/state/providers.const';\r\nimport { ModelFormModule } from 'src/app/shared/model-form/model-form.module';\r\nimport { AppFileUrlPipe } from 'src/app/shared/pipes/app-file-url.pipe';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { EffectsSubscriber } from 'src/app/state/effects.subscriber';\r\nimport { STORE_REDUCERS } from 'src/app/state/injection-tokens';\r\nimport { StateModule } from 'src/app/state/state.module';\r\nimport { MissionDetailsViewComponent } from './mission-details/mission-details-view/mission-details-view.component';\r\nimport { MissionDetailsComponent } from './mission-details/mission-details.component';\r\nimport { MissionListRoutingModule } from './mission-list-routing.module';\r\nimport { MissionListViewComponent } from './mission-list/mission-list-view/mission-list-view.component';\r\nimport { MissionListComponent } from './mission-list/mission-list.component';\r\nimport { UpdateLastVisitedReducer } from './update-last-visited.reducer';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MissionDetailsComponent,\r\n    MissionDetailsViewComponent,\r\n    MissionListComponent,\r\n    MissionListViewComponent, \r\n  ],\r\n  providers: [\r\n    AppFileUrlPipe,\r\n    ...SaveModelFileProviders,\r\n    ...SaveModelProviders,\r\n    ...DeleteModelProviders,\r\n    {provide: STORE_REDUCERS, useValue: UpdateLastVisitedReducer, multi: true}\r\n  ],\r\n  imports: [\r\n    SharedModule,\r\n    MissionListRoutingModule,\r\n    StateModule,\r\n    ModelFormModule,\r\n  ]\r\n})\r\nexport class MissionListModule { \r\n  constructor(effectsSubscriber: EffectsSubscriber){}\r\n}\r\n","export enum GroupByPeriod {\r\n    None,\r\n    Day,\r\n    Week,\r\n    Month,\r\n    Year\r\n}","export * from './group-by-period.enum';\r\nexport * from './timesheet-status.enum';","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { FileFolders } from '../constants/file-folders.const';\r\nimport { ModelFile } from 'src/app/core/models';\r\nimport { DomSanitizer } from '@angular/platform-browser';\r\nimport { _appFileUrl } from 'src/app/shared-app/helpers/app-file-url.helper';\r\n\r\n@Pipe({\r\n  name: 'appFileUrl'\r\n})\r\nexport class AppFileUrlPipe implements PipeTransform {\r\n\r\n  constructor(private readonly domSanitizer: DomSanitizer){}\r\n\r\n  transform(modelFile: ModelFile, folder: typeof FileFolders[number], disableCache?: boolean): any {\r\n    if(!modelFile) return;\r\n    if(modelFile.temp_localFileUrl) \r\n      return this.domSanitizer.bypassSecurityTrustResourceUrl(modelFile.temp_localFileUrl); \r\n    if(modelFile.fileName)\r\n      return _appFileUrl(modelFile.fileName, folder, disableCache);\r\n  }\r\n\r\n}\r\n","import { Inject, Injectable, Optional, Self, SkipSelf } from '@angular/core';\r\nimport { ActionDispatcher } from './action-dispatcher';\r\nimport { STORE_DEFAULT_STATE, STORE_REDUCERS } from './injection-tokens';\r\nimport { Reducer } from './interfaces';\r\nimport { QueryDispatcher } from './query-dispatcher';\r\nimport { StateBase } from './state-base';\r\nimport { Store } from './store';\r\nimport { StoreBase } from './store-base';\r\n\r\n@Injectable()\r\nexport class ComponentStore<TState> extends StoreBase<TState> {\r\n\r\n    constructor(\r\n        @SkipSelf() @Optional() hostStore: Store<any>,\r\n        queryDispatcher: QueryDispatcher,\r\n        @Self() dispatcher: ActionDispatcher,\r\n        @Self() @Optional() @Inject(STORE_REDUCERS) reducers: Reducer<any>[],\r\n        @Self() @Optional() @Inject(STORE_DEFAULT_STATE) defaultState: Partial<TState>,\r\n    ) { \r\n        super(new StateBase(defaultState), hostStore, queryDispatcher, dispatcher, reducers);    \r\n    }\r\n\r\n}","import { Provider } from '@angular/core'\r\nimport { ActionDispatcher } from './action-dispatcher'\r\nimport { ComponentStore } from './component.store'\r\n\r\nexport const ComponentStoreProviders: Provider[] = [\r\n    ActionDispatcher,\r\n    ComponentStore,\r\n]\r\n","export const ImageFileExtensions: string[] = [\"jpg\", \"jpeg\", \"png\"];  \r\n\r\n","export * from './interfaces'\r\nexport * from './form.service';","import { FileFolders } from 'src/app/shared/constants/file-folders.const';\r\nimport { environment } from 'src/environments/environment';\r\n\r\nexport function _appFileUrl(fileName: string, folder: typeof FileFolders[number], disableCache?: boolean): string{ \r\n    let url = `${environment.fileServerUrl}/${folder}/${fileName}`;\r\n    if(disableCache) url = url + `/?x=${Math.floor(Math.random() * 100)}`\r\n    return url;\r\n};\r\n","import { AppNotification, NotificationType } from 'src/app/notification';\r\n\r\nexport const AppNotifications: {[key: string]: AppNotification} = {\r\n    OnlineRequired: {title: \"Denne funksjonen krever internett\", type: NotificationType.Warning}\r\n}","import { Directive, HostListener, ElementRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[appImageErrorReloader]'\r\n})\r\nexport class ImageErrorReloaderDirective {\r\n\r\n  @Input() maxRetries = 5;\r\n\r\n  private retries = 0;\r\n\r\n  constructor(private el: ElementRef) {}\r\n\r\n  @HostListener('error') onError() {\r\n    if(this.retries >= this.maxRetries) return false;\r\n    setTimeout(this.resetSrc, 1000)\r\n  }\r\n\r\n  private resetSrc = () => {\r\n    this.el.nativeElement.src = this.el.nativeElement.src;\r\n    this.retries++;\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}
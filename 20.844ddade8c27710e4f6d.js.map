{"version":3,"sources":["./src/app/shared/components/dynamic-form-questions/file-question.component.ts","./src/app/shared/form/validators/file-extension.validator.ts","./src/app/shared/constants/model-forms/create-mission-document-form.const.ts","./src/app/shared/constants/document-file-extensions.const.ts","./src/app/mission-modules/mission-document-list/mission-document-list.facade.ts","./src/app/mission-modules/mission-document-list/pipes/file-extension-icon.pipe.ts","./src/app/mission-modules/mission-document-list/pipes/file-extension.pipe.ts","./src/app/mission-modules/mission-document-list/mission-document-list/mission-document-list.component.html","./src/app/mission-modules/mission-document-list/mission-document-list/mission-document-list.component.ts","./src/app/mission-modules/mission-document-list/mission-document-list-routing.module.ts","./src/app/mission-modules/mission-document-list/mission-document-list.module.ts","./src/app/model/helpers/get-range-with-relations.helper.ts"],"names":["allowedExtensions","validationErrorMessages","onFileChange","e","target","files","this","control","reset","markAsDirty","setValue","question","multiple","FileQuestionComponent","CreateMissionDocumentForm","submitText","controls","name","type","required","questions","component","optionsGetter","state","options","documentTypes","placeholder","valueProp","valueFormatter","val","resetable","activeFilter","stringProps","validators","maxLength","value","store","delete","command","dispatch","stateProp","actionId","mailDocuments","toEmail","ids","getMissionDocuments$","missionId","select$","pipe","map","relationCfg","x","getMissionEmployerEmail","select","mission","employer","email","MissionDocumentListFacade","transform","Csv","Pdf","ImageFile","Word","Excel","DefaultFile","FileExtensionIconPipe","split","pop","FileExtensionPipe","routes","path","deviceInfoService","formService","downloaderService","facade","route","router","notificationService","confirmService","modelFormService","vm$","combineLatest","isXs$","currentFabs$","documents","isXs","fabs","navConfig","downloadDocument","document","downloadUrl","fileName","deleteSelectedDocuments","currentSelections","selectableList","clearSelections","openConfirmDeleteDialog","open","title","confirmText","confirmCallback","openMailDocumentSheet","formConfig","initialValue","submitCallback","openDocumentForm","window","navigator","onLine","notify","OnlineRequired","dynamicForm","adapter","onBack","navigate","relativeTo","parent","backFn","staticFabs","icon","aria","color","callback","allowedRoles","Leder","selectedItemsFabs","snapshot","params","id","MissionDocumentListComponent","MissionDocumentListRoutingModule","forChild","MissionDocumentListModule","_getRangeWithRelations","cfg","filter","modelCfg","get","modelProp","modelState","length","hasChildren","includedChildProps","hasForeigns","includedForeignProps","foreignLookups","props","lookups","prop","identifier","_createStatePropertyLookups","childLookups","groupBy","_createGroupedLookups","foreignKey","i","entity","_mapForeignsToEntity","_mapChildrenToEntity","foreignProp","foreignCfg","propCfg","childProp"],"mappings":"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","file":"20.844ddade8c27710e4f6d.js","sourcesContent":["import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { Question, QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { VALIDATION_ERROR_MESSAGES, ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\nimport { BaseQuestionComponent } from '../../../dynamic-forms/components/base-question.component';\r\n\r\nexport interface FileQuestion extends Question {\r\n    multiple?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-file-question',\r\n  template: `\r\n  <div class=\"mt-3 mb-3\" fxLayout=\"column\">\r\n    <div class=\"mat-body\" *ngIf=\"question.label\">{{ question.label }}</div>\r\n    \r\n    <input (change)=\"onFileChange($event)\" type=\"file\" [attr.multiple]=\"question.multiple\" [attr.required]=\"required\">\r\n\r\n    <mat-hint *ngIf=\"question.hint\">{{ question.hint }}</mat-hint>\r\n\r\n    <mat-error *ngIf=\"control.dirty && control.invalid\">\r\n      {{ getValidationErrorMessage() }}\r\n    </mat-error>\r\n  </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FileQuestionComponent extends BaseQuestionComponent<FileQuestion> \r\n  implements QuestionComponent {\r\n\r\n  constructor(@Inject(VALIDATION_ERROR_MESSAGES) validationErrorMessages: ValidationErrorMap) { \r\n    super(validationErrorMessages) \r\n  }\r\n\r\n  onFileChange(e) {      \r\n    if(!e.target.files) return this.control.reset()\r\n    this.control.markAsDirty();\r\n    this.control.setValue(this.question.multiple ? e.target.files : e.target.files[0]);\r\n  }\r\n\r\n}\r\n","import { ValidatorFn, AbstractControl } from '@angular/forms';\r\nimport { _validateFileExtension } from 'src/app/shared-app/helpers/validate-file-extension.helper';\r\n\r\nexport function fileExtensionValidator(allowedExtensions: string[]): ValidatorFn{ \r\n    return (control: AbstractControl): {[key: string]: any} | null => {\r\n        if(control.value == null) return null;\r\n        const invalid = !_validateFileExtension(control.value, allowedExtensions);\r\n        return invalid ? {'fileextension': {value: control.value}} : null;\r\n    };\r\n}\r\n\r\n","import { Validators } from '@angular/forms';\r\nimport { AppDocumentType, MissionDocument } from 'src/app/core/models';\r\nimport { DynamicControlGroup, DynamicControl, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { StateDocumentTypes } from 'src/app/state/interfaces';\r\nimport { AutoCompleteQuestionComponent } from '../../components/dynamic-form-questions/auto-complete-question/auto-complete-question.component';\r\nimport { AutoCompleteQuestion } from '../../components/dynamic-form-questions/auto-complete-question/auto-complete-question.interface';\r\nimport { FileQuestionComponent } from '../../components/dynamic-form-questions/file-question.component';\r\nimport { fileExtensionValidator } from '../../form/validators/file-extension.validator';\r\nimport { SaveModelFormState } from '../../model-form';\r\nimport { HiddenMissionIdControl } from '../common-controls.const';\r\nimport { DocumentFileExtensions } from '../document-file-extensions.const';\r\n\r\ntype FormState = SaveModelFormState<StateDocumentTypes>;\r\n\r\nexport interface MissionDocumentForm extends Partial<MissionDocument>{\r\n    missionId: string;\r\n    documentType: AppDocumentType;\r\n    file: File;\r\n}\r\n\r\nconst DocumentTypeControl = <DynamicControlGroup<MissionDocumentForm>>{ name: \"documentType\",\r\n    type: \"group\", controls: [\r\n    <DynamicControl<AppDocumentType, FormState>>{ name: \"name\", required: true,\r\n        type: \"control\", questions: [{\r\n            component:  AutoCompleteQuestionComponent,\r\n            question: <AutoCompleteQuestion<AppDocumentType>>{\r\n                optionsGetter: (state: FormState) => state.options.documentTypes,\r\n                placeholder: \"Velg type dokument\",\r\n                valueProp: \"name\",\r\n                valueFormatter: (val: AppDocumentType) => val.name, \r\n                resetable: true,\r\n                activeFilter: { stringProps: [\"name\"] }\r\n            }, \r\n        }], \r\n        validators: [Validators.maxLength(45)]\r\n    }],\r\n}\r\nconst FileControl = <DynamicControl<MissionDocumentForm, any>>{ name: \"file\", required: true,\r\n    type: \"control\", questions: [{\r\n        component:  FileQuestionComponent, question: {}\r\n    }],\r\n    validators: [fileExtensionValidator(DocumentFileExtensions)]\r\n}\r\n\r\nexport const CreateMissionDocumentForm: DynamicForm<MissionDocumentForm, FormState> = {\r\n    submitText: \"Legg til\",\r\n    controls: [DocumentTypeControl, FileControl, HiddenMissionIdControl],\r\n}","export const DocumentFileExtensions: string[] = [\r\n    \"doc\",\"docm\", \"docx\", \"txt\", \r\n    \"pdf\", \"dot\", \"csv\", \"dotm\", \r\n    \"dotx\", \"xla\", \"odt\", \"xlam\", \r\n    \"xls\", \"xlsb\", \"xlsm\", \"xlsx\", \r\n    \"xlt\", \"xlw\"\r\n];","import { Host, Injectable } from \"@angular/core\";\r\nimport { ActivatedRoute } from '@angular/router';\r\nimport { Observable } from \"rxjs\";\r\nimport { map, tap } from 'rxjs/operators';\r\nimport { Employer, Mission, MissionDocument } from \"src/app/core/models\";\r\nimport { _getRangeWithRelations } from 'src/app/model/helpers/get-range-with-relations.helper';\r\nimport { GetWithRelationsConfig } from 'src/app/model/helpers/get-with-relations.config';\r\nimport { _getWithRelations } from 'src/app/model/helpers/get-with-relations.helper';\r\nimport { DeleteModelStateCommand, DeleteModelActionId } from 'src/app/model/state/delete-model/delete-model-action.const';\r\nimport { MailModelsStateCommand, MailModelsActionId } from 'src/app/model/state/mail-models/mail-models-state-command.interface';\r\nimport { Store } from 'src/app/state/store';\r\nimport { StoreState } from './store-state';\r\n\r\n@Injectable({providedIn: 'any'})\r\nexport class MissionDocumentListFacade  {\r\n\r\n  constructor(private store: Store<StoreState>) { }\r\n\r\n  getMissionDocuments$(missionId: string): Observable<MissionDocument[]> {\r\n    return this.store.select$([\"missionDocuments\", \"employers\", \"documentTypes\"]).pipe(map(state => {\r\n      const relationCfg = new GetWithRelationsConfig(\"missionDocuments\", null, [\"documentTypes\"])\r\n      return _getRangeWithRelations(state, relationCfg, (x: MissionDocument) => x.missionId === missionId);\r\n    }))\r\n  }\r\n\r\n  getMissionEmployerEmail(missionId: string): string{  \r\n    const relationCfg = new GetWithRelationsConfig(\"missions\", null, [\"employers\"])\r\n    let state = this.store.select([\"missions\", \"employers\"], false);\r\n    const mission = _getWithRelations<Mission>(state, relationCfg, missionId);\r\n    const email = mission?.employer?.email;\r\n    return email;\r\n  }\r\n\r\n  delete = (command: {ids?: string[], id?: string}): void => \r\n    this.store.dispatch<DeleteModelStateCommand>({\r\n      ...command, \r\n      stateProp: \"missionDocuments\", \r\n      actionId: DeleteModelActionId\r\n    });\r\n\r\n  mailDocuments = (toEmail: string, ids: string[]): void => \r\n    this.store.dispatch<MailModelsStateCommand>({\r\n      toEmail, ids, \r\n      stateProp: \"missionDocuments\",\r\n      actionId: MailModelsActionId \r\n    })\r\n}\r\n\r\n","import { Pipe, PipeTransform } from '@angular/core';\nimport { Icons } from 'src/app/shared-app/enums';\n\n\n@Pipe({\n  name: 'fileExtensionIcon'\n})\nexport class FileExtensionIconPipe implements PipeTransform {\n\n  transform(value: string): string {\n    switch(value){\n      case 'csv':\n        return Icons.Csv;\n      case 'pdf': \n        return Icons.Pdf;\n      case 'jpg': case 'png': \n        return Icons.ImageFile;\n      case 'doc': case 'docm': case 'docx': case 'dot': case 'dotm': case 'dotx':\n        return Icons.Word;\n      case 'xla': case 'xlam': case 'xls': case 'xlsb': case 'xlsm': case 'xlsx': case 'xlt': case 'xlw':\n          return Icons.Excel;\n      default: return Icons.DefaultFile;\n    }\n  }\n\n}\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'fileExtension'\n})\nexport class FileExtensionPipe implements PipeTransform {\n\n  transform(value: string): string {\n    return value?.split('.').pop();\n  }\n\n}\n","<app-main-skeleton *ngIf=\"vm$ | async; let vm\" [fabs]=\"vm.fabs\" overlayMode=\"true\">\n\n    <app-main-top-nav-bar navbar [config]=\"vm.navConfig\" >\n    </app-main-top-nav-bar>\n\n    <app-selectable-list #selectableList *ngIf=\"vm.documents\" identifier=\"id\" selectedText=\"Dokument valgt\"\n        [totalRows]=\"vm.isXs ? 2 : 4\"\n        [entities]=\"vm.documents\" \n        [itemTemplate]=\"documentTemplate\"\n        selectionText=\"\"\n        (selectionChanged)=\"onSelectionChange($event)\"\n        (itemClicked)=\"downloadDocument($event)\">\n    </app-selectable-list>\n\n</app-main-skeleton>\n\n<ng-template #documentTemplate let-entity>\n    <div class=\"foreground-card text-center mat-elevation-z2 p-2 pt-6 pb-6 m-1\">\n        <mat-icon [svgIcon]=\"entity.fileName | fileExtension | fileExtensionIcon\" class=\"scale-150 mb-2\"></mat-icon>\n        <div>{{ entity.documentType?.name }}</div>\n\n        <div class=\"mat-caption\">Filtype: {{ entity.fileName | fileExtension | uppercase }}</div>\n        <div class=\"mat-caption\">Lastet opp {{ entity.updatedAt | date : 'dd.MMM yyyy' }}</div>\n    </div>\n</ng-template>\n\n<router-outlet></router-outlet>","import { ChangeDetectionStrategy, Component, Host, SkipSelf } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { MissionDocument } from 'src/app/core/models';\r\nimport { DeviceInfoService } from 'src/app/core/services/device-info.service';\r\nimport { DownloaderService } from 'src/app/core/services/downloader.service';\r\nimport { ConfirmDialogService } from 'src/app/core/services/ui/confirm-dialog.service';\r\nimport { NotificationService } from 'src/app/notification';\r\nimport { AppNotifications } from 'src/app/shared-app/const/app-notifications.const';\r\nimport { Roles } from 'src/app/shared-app/enums';\r\nimport { _appFileUrl } from 'src/app/shared-app/helpers/app-file-url.helper';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\nimport { SelectableListContainerComponent } from 'src/app/shared/components/abstracts/selectable-list-container.component';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { EmailForm } from 'src/app/shared/constants/forms/email-form.const';\r\nimport { CreateMissionDocumentForm } from 'src/app/shared/constants/model-forms/create-mission-document-form.const';\r\nimport { FormService } from 'src/app/shared/form';\r\nimport { ModelFormService } from 'src/app/shared/model-form';\r\nimport { FormToSaveModelFileStateCommandAdapter } from 'src/app/shared/model-form/adapters/form-to-save-model-file-state-command.adapter';\r\nimport { MissionDocumentListFacade } from '../mission-document-list.facade';\r\n\r\ninterface ViewModel { documents: MissionDocument[], isXs: boolean,  fabs: AppButton[], navConfig: MainTopNavConfig}\r\n\r\n@Component({\r\n  selector: 'app-mission-document-list',\r\n  templateUrl: './mission-document-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MissionDocumentListComponent extends SelectableListContainerComponent {\r\n\r\n  vm$: Observable<ViewModel> = combineLatest([\r\n    this.facade.getMissionDocuments$(this.missionId),\r\n    this.deviceInfoService.isXs$,\r\n    this.currentFabs$\r\n  ]).pipe(\r\n    map(([documents, isXs, fabs]) => { return { \r\n      documents, isXs, fabs, navConfig: this.navConfig\r\n    }})\r\n  )\r\n\r\n  private get missionId(): string { return this.route.parent.parent.snapshot.params.id }\r\n\r\n  private navConfig: MainTopNavConfig;\r\n  \r\n  constructor( \r\n    private deviceInfoService: DeviceInfoService,     \r\n    private formService: FormService, \r\n    private downloaderService: DownloaderService,\r\n    private facade: MissionDocumentListFacade,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private notificationService: NotificationService,\r\n    private confirmService: ConfirmDialogService,\r\n    private modelFormService: ModelFormService) {\r\n      super();\r\n      \r\n      this.navConfig = {title:  \"Dokumenter\", backFn: this.onBack, }\r\n\r\n      this.staticFabs = [\r\n        {icon: \"note_add\", aria: 'Legg til', color: 'accent', callback: this.openDocumentForm, allowedRoles: [Roles.Leder]}\r\n      ];\r\n\r\n      this.selectedItemsFabs = [\r\n        {icon: \"send\", aria: 'Send', color: 'accent', callback: this.openMailDocumentSheet, allowedRoles: [Roles.Leder]}, \r\n        {icon: \"delete_forever\", aria: 'Slett', color: 'warn', callback: this.openConfirmDeleteDialog, allowedRoles: [Roles.Leder]}\r\n      ]\r\n    }\r\n\r\n  downloadDocument = (document: MissionDocument) => \r\n    this.downloaderService.downloadUrl(_appFileUrl(document.fileName, \"documents\"));\r\n\r\n  private deleteSelectedDocuments = () => {\r\n    this.facade.delete({ids: this.currentSelections});    \r\n    this.selectableList.clearSelections();\r\n  }\r\n\r\n  private openConfirmDeleteDialog = () => {   \r\n    this.confirmService.open({\r\n      title: 'Slett utvalgte dokumenter?', \r\n      confirmText: 'Slett',\r\n      confirmCallback: this.deleteSelectedDocuments\r\n    })\r\n  }\r\n  \r\n  private openMailDocumentSheet = () => {\r\n    this.formService.open({\r\n      formConfig: {...EmailForm, \r\n        initialValue: {email: this.facade.getMissionEmployerEmail(this.missionId) }}, \r\n      navConfig: {title: \"Send Dokumenter\"},\r\n      submitCallback: (val: EmailForm) => { \r\n        this.facade.mailDocuments(val.email, this.currentSelections);\r\n        this.selectableList.clearSelections();\r\n      },\r\n    })\r\n  }\r\n\r\n  private openDocumentForm = (): void => {\r\n    if(!window.navigator.onLine)\r\n      return this.notificationService.notify(AppNotifications.OnlineRequired)\r\n\r\n    this.modelFormService.open({\r\n      formConfig: {\r\n        dynamicForm: {...CreateMissionDocumentForm, initialValue: {missionId: this.missionId}},\r\n        adapter: FormToSaveModelFileStateCommandAdapter,\r\n        stateProp: \"missionDocuments\",\r\n      }\r\n    });\r\n  }\r\n\r\n  private onBack = () => this.router.navigate(['../'], {relativeTo: this.route.parent});\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MissionDocumentListComponent } from './mission-document-list/mission-document-list.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MissionDocumentListComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MissionDocumentListRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { SaveModelFileProviders, DeleteModelProviders, MailModelsProviders } from 'src/app/model/state/providers.const';\r\nimport { ModelFormModule } from 'src/app/shared/model-form/model-form.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { StateModule } from 'src/app/state/state.module';\r\nimport { MissionDocumentListRoutingModule } from './mission-document-list-routing.module';\r\nimport { MissionDocumentListComponent } from './mission-document-list/mission-document-list.component';\r\nimport { FileExtensionIconPipe } from './pipes/file-extension-icon.pipe';\r\nimport { FileExtensionPipe } from './pipes/file-extension.pipe';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MissionDocumentListComponent,\r\n    FileExtensionIconPipe,\r\n    FileExtensionPipe,\r\n  ],\r\n  imports: [\r\n    SharedModule,   \r\n    StateModule,\r\n    ModelFormModule,\r\n    MissionDocumentListRoutingModule\r\n  ],\r\n  providers: [\r\n    ...MailModelsProviders\r\n  ],\r\n})\r\nexport class MissionDocumentListModule {}\r\n","import { Model } from 'src/app/core/models/base-entity.interface';\r\nimport { _convertArrayToObject } from 'src/app/shared-app/helpers/array/convert-array-to-object.helper';\r\nimport { _filter } from 'src/app/shared-app/helpers/array/filter.helper';\r\nimport { _groupBy } from 'src/app/shared-app/helpers/array/group-by.helper';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { ModelState } from '../interfaces/model-state.interface';\r\nimport { ModelConfig, ModelStateConfig } from '../model-state.config';\r\nimport { GetWithRelationsConfig } from './get-with-relations.config';\r\n\r\nexport function _getRangeWithRelations<TModel extends Model>(\r\n    state: Readonly<Partial<ModelState>>,\r\n    cfg: GetWithRelationsConfig,\r\n    filter?: (value: TModel, index?: number, Array?: any[]) => boolean, \r\n): TModel[] {\r\n    const modelCfg = ModelStateConfig.get(cfg.modelProp); \r\n\r\n    let modelState = state[cfg.modelProp] as TModel[];\r\n    \r\n    if(filter)\r\n        modelState = _filter(modelState, filter);\r\n\r\n    if(!modelState || modelState.length == 0) return modelState;\r\n\r\n    const hasChildren = cfg.includedChildProps && cfg.includedChildProps.length > 0;      \r\n    const hasForeigns = cfg.includedForeignProps && cfg.includedForeignProps.length > 0;\r\n\r\n    let foreignLookups = {};\r\n    if(hasForeigns)\r\n        foreignLookups = _createStatePropertyLookups(cfg.includedForeignProps, state); \r\n\r\n    let childLookups = {};\r\n    if(hasChildren) \r\n        childLookups = _createGroupedLookups(cfg.includedChildProps, modelCfg.foreignKey, state) \r\n\r\n    if(hasForeigns || hasChildren){\r\n        for(var i = 0; i < modelState.length; i++){\r\n            let entity = modelState[i];                   \r\n                _mapForeignsToEntity(cfg.includedForeignProps, foreignLookups, entity);        \r\n                _mapChildrenToEntity(cfg.includedChildProps, modelCfg, childLookups, entity);\r\n            modelState[i] = entity;\r\n        }\r\n    }\r\n    return modelState\r\n}\r\n\r\n//Lookup of children grouped by foreign key\r\nfunction _createGroupedLookups(\r\n    props: Prop<ModelState>[], \r\n    groupBy: string, state: Object\r\n): {[key: string]: {[key: string]: Object[]}}{\r\n    const lookups = {} as {[key: string]: {[key: string]: Object[]}}\r\n\r\n    for(const prop of props) lookups[prop] = _groupBy(state[prop], groupBy);\r\n        \r\n    return lookups;\r\n}\r\n\r\n//Lookup of foreign entities by identifier\r\nfunction _createStatePropertyLookups(\r\n    props: Prop<ModelState>[], \r\n    state: Readonly<Object>\r\n): {[key: string]: Object}{\r\n    const lookups: {[key: string]: Readonly<Object>} = {};\r\n    for(const prop of props){ //Convert foreign state props to lookup tables\r\n        const cfg = ModelStateConfig.get(prop); \r\n        lookups[prop] = _convertArrayToObject(state[prop], cfg.identifier);\r\n    }\r\n    return lookups;\r\n}\r\n\r\nfunction _mapForeignsToEntity<T>(\r\n    props: Prop<ModelState>[], \r\n    lookups: {[key: string]: Readonly<Object>}, \r\n    entity: T\r\n  ): void{\r\n    for(const foreignProp of props){ //Map foreign entity to entity\r\n        const foreignCfg = ModelStateConfig.get(foreignProp);\r\n        entity[foreignCfg.foreignProp] = lookups[foreignProp][entity[foreignCfg.foreignKey]]\r\n    }\r\n}\r\n\r\nfunction _mapChildrenToEntity<T>(\r\n    props: Prop<ModelState>[], \r\n    propCfg: ModelConfig<T>, \r\n    lookups: {[key: string]: Readonly<Object>}, \r\n    entity: T\r\n): void{\r\n    for(let childProp of props){\r\n        const entityId = entity[propCfg.identifier] as any;\r\n        entity[childProp] = lookups[childProp][entityId]\r\n    }\r\n}"],"sourceRoot":"webpack:///"}
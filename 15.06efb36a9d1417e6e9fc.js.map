{"version":3,"sources":["./src/app/shared/components/confirm-dialog/confirm-dialog.component.html","./src/app/shared/components/confirm-dialog/confirm-dialog.component.ts","./src/app/shared/components/bottom-sheet-menu.component.ts","./src/app/shared/components/abstracts/ag-grid-table.component.ts","./src/app/shared/components/selectable-card/selectable-card.component.ts","./src/app/shared/components/selectable-card/selectable-card.component.html","./src/app/shared/pipes/array-slice.pipe.ts","./src/app/shared/components/selectable-list/selectable-list.component.html","./src/app/shared/components/selectable-list/selectable-list.component.ts","./src/app/shared/components/selectable-list/selectable-list.presenter.ts","./src/app/core/services/ui/confirm-dialog.service.ts","./src/app/shared/form/form.service.ts","./src/app/shared/constants/forms/profile-form.const.ts","./src/app/shared/components/dynamic-form-questions/slider-question.component.ts","./src/app/shared/constants/forms/sync-config.form.const.ts","./src/app/profile/state/update-current-user/update-current-user-state-command.interface.ts","./src/app/profile/state/update-password/update-password-state-command.interface.ts","./src/app/profile/profile.facade.ts","./src/app/profile/profile-routing.module.ts","./src/app/profile/profile/profile.component.ts","./src/app/profile/profile/profile.component.html","./src/app/profile/state/update-current-user/update-current-user.http.effect.ts","./src/app/profile/state/update-current-user/update-current-user.reducer.ts","./src/app/profile/state/update-password/update-password.http.effect.ts","./src/app/profile/profile.module.ts","./src/app/shared/pipes/array-from-number.pipe.ts","./src/app/shared/form/index.ts"],"names":["dialogRef","config","onNoClick","this","close","ConfirmDialogComponent","_bottomSheetRef","buttons","handleFn","fn","parameters","dismiss","BottomSheetMenuComponent","columnDefs","rowData","_config","value","initNgGrid","autoSizeGrid","cols","dataGrid","columnApi","getAllColumns","filter","x","getColId","autoSizeColumns","cfg","data","length","currentObject","record","hasSameObjectProps","addColDefs","obj1","obj2","objProps1","Object","keys","hasOwnProperty","AgGridTableComponent","isSelected","selected","toggleSelection","emit","SelectableCardComponent","transform","items","rowNr","totalRows","iterations","Math","ceil","rowItems","i","sliced","slice","push","ArraySlicePipe","selectableListPresenter","selectionChanged","itemClicked","selectableEntities$","clickDisabled","onItemClick","item","isEntitySelected","_identifier","trackByFn","index","selectable","entity","clearSelections","addSelections","addEntities","setIdentifier","ngOnInit","selectedIds$","pipe","skip","takeUntil","unsubscribe","subscribe","toggleSelect","toggleEntity","setTimeout","SelectableListComponent","selectedIdsSubject","asObservable","entitiesSubject","entities$","getSelectableEntities","id","includes","identifier","entities","next","ids","findIndex","splice","selectedIds","result","SelectableListPresenter","matDialog","open","cancelCallback","confirmCallback","afterClosed","confirmed","ConfirmDialogService","matBottomSheet","formConfig","navConfig","submitCallback","formComponent","formState$","formState","FormService","ProfileForm","submitText","getRawValue","disabledControls","userName","firstName","lastName","controls","required","validationErrorMessages","updateValue","val","control","setValue","markAsDirty","onQuestionChanges","question","value$","valueChanges","startWith","SliderQuestionComponent","SyncConfigForm","resettable","resetState","syncConfig","refreshTime","name","valueGetter","s","type","questions","component","label","hint","valueSuffix","min","max","tickInterval","thumbLabel","validators","initialNumberOfMonths","UpdateCurrentUserActionId","UpdatePasswordActionId","store","authService","updateCurrentUser","user","dispatch","actionId","updatePassword","oldPassword","newPassword","updateSyncConfig","propagate","syncAll","reloadData","logout","selectProperty","ProfileFacade","routes","path","formService","facade","confirmService","title","confirmPurge","message","confirmText","updateProfile","initialValue","currentUser","ProfileComponent","depth","ProfileRoutingModule","forChild","handle$","actions$","map","request","createHttpRequest","action","stateSnapshot","method","body","apiUrl","cancelMessage","UpdateCurrentUserHttpEffect","UpdateCurrentUserReducer","stateProperties","reducerFn","state","apiService","mergeMap","put","UpdatePasswordHttpEffect","ProfileModule","provide","useClass","multi","useValue","includeZero","arr","ArrayFromNumberPipe"],"mappings":"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","file":"15.06efb36a9d1417e6e9fc.js","sourcesContent":["<mat-card>\r\n\r\n  <mat-card-header *ngIf=\"config.title\">\r\n    <mat-card-title>\r\n      {{ config.title }}\r\n    </mat-card-title>\r\n  </mat-card-header>\r\n\r\n  <mat-card-content *ngIf=\"config.message\">\r\n    <p>{{ config.message || 'Vennligst bekreft operasjonen.' }}</p>\r\n  </mat-card-content>\r\n\r\n  <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n    <button mat-button (click)=\"onNoClick()\">{{ config.discardText || 'Avbryt'}}</button>\r\n    <button mat-button  [mat-dialog-close]=\"true\" cdkFocusInitial>{{ config.confirmText }}</button>\r\n  </mat-card-actions>\r\n  \r\n</mat-card>\r\n","import { Component, Inject, ChangeDetectionStrategy } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ConfirmDialogComponent {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ConfirmDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public config: ConfirmDialogConfig) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n}\r\n\r\nexport interface ConfirmDialogConfig {\r\n  title?: string,\r\n  message?: string,\r\n  discardText?: string,\r\n  confirmText: string,\r\n  confirmCallback?: Function,\r\n  cancelCallback?: Function,\r\n}\r\n","import { Component, Inject, ChangeDetectionStrategy } from '@angular/core';\r\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\n\r\n@Component({\r\n  selector: 'app-bottom-sheet-menu',\r\n  template:`\r\n  <span class=\"nav-list mat-subheading-2\">\r\n    <ng-container #navs *ngFor=\"let button of buttons\">\r\n        <a *ifRole=\"button.allowedRoles\" (click)=\"handleFn(button.callback, button.params)\">\r\n            <mat-icon>{{ button.icon }}</mat-icon>\r\n            <span class=\"ml-2 mr-2\">{{ button.text }}</span>\r\n        </a>\r\n    </ng-container>\r\n  </span>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BottomSheetMenuComponent {\r\n  constructor(\r\n    private _bottomSheetRef: MatBottomSheetRef<BottomSheetMenuComponent>,\r\n    @Inject(MAT_BOTTOM_SHEET_DATA) public buttons: AppButton[]) { }\r\n\r\n  handleFn = (fn: Function, parameters: any[] = []) => {\r\n    fn(...parameters);\r\n    this.close();\r\n  };\r\n\r\n  close = () => this._bottomSheetRef.dismiss(); \r\n}\r\n","import { Input, ViewChild, Directive } from '@angular/core';\r\nimport { AgGridAngular } from 'ag-grid-angular';\r\nimport { ColDef } from 'ag-grid-community';\r\nimport { AgGridConfig } from './ag-grid-config.interface';\r\n\r\n@Directive()\r\nexport abstract class AgGridTableComponent<TRecord, TConfig extends AgGridConfig<TRecord>> {\r\n  @ViewChild('dataGrid') dataGrid: AgGridAngular;\r\n\r\n  private _config: TConfig;\r\n  get config(): TConfig { return this._config; }\r\n\r\n  @Input() set config(value: TConfig) {\r\n      this._config = value;\r\n      this.initNgGrid(value);\r\n  }\r\n\r\n  columnDefs: ColDef[] = [];\r\n\r\n  rowData: any[] = [];\r\n\r\n  private currentObject: TRecord;\r\n\r\n  constructor() { }\r\n\r\n  autoSizeGrid(){\r\n    let cols = this.dataGrid.columnApi.getAllColumns().filter(x => x.getColId() != 'checkbox')\r\n    this.dataGrid.columnApi.autoSizeColumns(cols);\r\n  }\r\n\r\n  protected abstract addColDefs(object: Object): ColDef[];\r\n\r\n  protected initNgGrid(cfg: TConfig): void{\r\n    \r\n    if(!cfg?.data || cfg.data.length === 0){ //Reset grid if no data\r\n      this.columnDefs = [];\r\n      this.rowData = [];\r\n      this.currentObject = null;\r\n      return;\r\n    };\r\n\r\n    const record = cfg.data[0];\r\n    if(!this.hasSameObjectProps(record, this.currentObject)){\r\n      this.currentObject = record;\r\n      this.columnDefs = this.addColDefs(record);\r\n    }\r\n\r\n    this.rowData = cfg.data;\r\n  }\r\n\r\n  protected hasSameObjectProps(obj1: Object, obj2: Object): boolean{\r\n    let objProps1 = Object.keys(obj1 || {});\r\n\r\n    if(objProps1.length !== Object.keys(obj2 || {}).length) return false;\r\n\r\n    for(const prop of objProps1){\r\n      if(!obj2.hasOwnProperty(prop)) return false   \r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n}","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-selectable-card',\r\n  templateUrl: './selectable-card.component.html',\r\n  styleUrls: ['./selectable-card.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class SelectableCardComponent {\r\n\r\n  @Input() selectedText: string;\r\n  @Input() selectedIcon: string;\r\n  @Input() isSelected: boolean = false;\r\n  \r\n  @Output() selected = new EventEmitter<boolean>()\r\n\r\n  constructor() { }\r\n\r\n  toggleSelection = () => {\r\n    this.isSelected = !this.isSelected;\r\n    this.selected.emit(this.isSelected);\r\n  };\r\n  \r\n}\r\n","<div class=\"container\" matRipple\r\n    (press)=\"toggleSelection()\">\r\n\r\n    <ng-content>\r\n\r\n    </ng-content>\r\n\r\n    <div class=\"overlay\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\r\n        [style.opacity]=\"isSelected ? .65:0\">\r\n        <mat-icon>{{ selectedIcon }}</mat-icon>\r\n        <span class=\"mat-body-strong\">{{ selectedText }}</span>\r\n    </div>\r\n\r\n</div>","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({name: 'arrayslice'})\r\n\r\n//Slices items up and grabs n'th index based on rowNr from each slice. \r\n//Used to keep items in order when displaying mulitple columns.\r\nexport class ArraySlicePipe implements PipeTransform { \r\n    transform(items: any[], rowNr: number, totalRows: number): any {\r\n        let iterations = Math.ceil(items.length / totalRows);\r\n        let rowItems = [];\r\n        for(let i = 0; i < iterations;i++) //Grabs every n'th item,\r\n        {\r\n            let sliced = items.slice(i*totalRows, (i+1)*totalRows);\r\n            if(sliced.length >= rowNr) rowItems.push(sliced[rowNr - 1]);\r\n        }\r\n        return rowItems;\r\n    }\r\n}\r\n","<div class=\"entity-row\">\r\n    <div class=\"entity-column\" *ngFor=\"let i of totalRows | arrayFromNumber\">\r\n        <app-selectable-card \r\n            *ngFor=\"let selectable of (selectableEntities$ | async) | arrayslice: i:totalRows;let i = index;trackBy: trackByFn\"\r\n            [selectedText]=\"selectedText\" selectedIcon=\"check_circle\"\r\n            [isSelected]=\"selectable.selected\" \r\n            (selected)=\"toggleSelect(selectable)\"\r\n            (click)=\"onItemClick(selectable.entity)\">\r\n\r\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: selectable.entity}\"></ng-container>\r\n\r\n        </app-selectable-card>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef } from \"@angular/core\";\r\nimport { skip, takeUntil } from \"rxjs/operators\";\r\nimport { WithUnsubscribe } from 'src/app/shared-app/mixins/with-unsubscribe.mixin';\r\nimport { SelectableEntity } from 'src/app/shared/interfaces';\r\nimport { SelectableListPresenter } from './selectable-list.presenter';\r\n\r\n@Component({\r\n  selector: 'app-selectable-list',\r\n  templateUrl: './selectable-list.component.html',\r\n  styleUrls: ['./selectable-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers:[SelectableListPresenter]\r\n})\r\nexport class SelectableListComponent extends WithUnsubscribe() {\r\n    @Input('entities')\r\n    set entities(value: any[]) {this.selectableListPresenter.addEntities(value)}\r\n\r\n    private _identifier: string;\r\n    @Input('identifier') \r\n    set identifier(value: string) {\r\n      this._identifier = value;\r\n      this.selectableListPresenter.setIdentifier(value)\r\n    }\r\n\r\n    @Input() selectedText: string;\r\n    @Input() selectedIcon: string;\r\n    @Input() itemTemplate: TemplateRef<any>;\r\n    @Input() totalRows: number = 2;  \r\n    @Output() selectionChanged = new EventEmitter<string[]>();\r\n    @Output() itemClicked = new EventEmitter<any>();\r\n  \r\n    selectableEntities$ = this.selectableListPresenter.selectableEntities$;\r\n\r\n    clickDisabled: boolean = false;\r\n\r\n    constructor(private selectableListPresenter: SelectableListPresenter<any>) {\r\n      super();\r\n    }\r\n    \r\n    ngOnInit(): void {\r\n        this.selectableListPresenter.selectedIds$.pipe(\r\n            skip(1),\r\n            takeUntil(this.unsubscribe)\r\n        ).subscribe(x => this.selectionChanged.emit(x))\r\n    }\r\n\r\n    onItemClick = (item: any): void => {\r\n      if(this.clickDisabled || this.selectableListPresenter.isEntitySelected(item[this._identifier] || item))\r\n        return;\r\n  \r\n      this.itemClicked.emit(item)\r\n    }\r\n\r\n    toggleSelect(selectable: SelectableEntity<any>) {\r\n      this.clickDisabled = true;\r\n      this.selectableListPresenter.toggleEntity(selectable.entity[this._identifier] || selectable.entity)\r\n      setTimeout(() => (this.clickDisabled = false), 500);\r\n    }\r\n\r\n    trackByFn = (index: number, selectable: SelectableEntity<any>): string => \r\n      selectable.entity[this._identifier];\r\n    \r\n    clearSelections = () => this.selectableListPresenter.addSelections([]);\r\n  \r\n  }\r\n  ","import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SelectableEntity } from 'src/app/shared/interfaces';\r\n\r\n@Injectable()\r\nexport class SelectableListPresenter<T> {\r\n\r\n    private selectedIdsSubject = new BehaviorSubject<any[]>([]);\r\n    selectedIds$ = this.selectedIdsSubject.asObservable();\r\n\r\n    private entitiesSubject =  new BehaviorSubject<T[]>([]);\r\n    private entities$ = this.entitiesSubject.asObservable();\r\n\r\n    selectableEntities$: Observable<SelectableEntity<T>[]> = combineLatest([this.entities$, this.selectedIds$]).pipe(\r\n        map(([entities, selectedIds]) => this.getSelectableEntities(entities, selectedIds))\r\n    )\r\n\r\n    private identifier:string; \r\n\r\n    constructor(){}\r\n    \r\n    get entities(){\r\n        return [...this.entitiesSubject.value]\r\n    }\r\n\r\n    setIdentifier(identifier: string){ this.identifier = identifier; }\r\n\r\n    addEntities(entities: T[]){\r\n        this.entitiesSubject.next(entities);\r\n    }\r\n\r\n    addSelections(ids: any[]){\r\n        this.selectedIdsSubject.next(ids);\r\n    }\r\n\r\n    toggleEntity(id: any){\r\n        let ids = [...this.selectedIdsSubject.value];\r\n        let index = ids.findIndex(x => x == id);\r\n        if(index == -1) ids.push(id); //if not selected\r\n        else ids.splice(index, 1);\r\n        this.selectedIdsSubject.next(ids);\r\n    }\r\n\r\n    isEntitySelected = (id:any) => this.selectedIdsSubject.value.includes(id);\r\n    \r\n    private getSelectableEntities(entities:T[], selectedIds:any[]): SelectableEntity<T>[]{\r\n        let result = [];\r\n        for(let i = 0; i < entities.length; i++){\r\n            let isSelected = selectedIds.includes(entities[i][this.identifier]);\r\n            result.push({entity: entities[i], selected:isSelected})\r\n        }\r\n        return result;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ConfirmDialogComponent, ConfirmDialogConfig } from 'src/app/shared/components';\r\n\r\n@Injectable({ providedIn: \"any\" })\r\nexport class ConfirmDialogService {\r\n\r\n  constructor(private matDialog: MatDialog) {}\r\n\r\n  open(config: ConfirmDialogConfig): MatDialogRef<ConfirmDialogComponent, boolean> {\r\n    const dialogRef = this.matDialog.open(ConfirmDialogComponent, { data: config });\r\n    \r\n    if(config.cancelCallback || config.confirmCallback)\r\n        dialogRef.afterClosed().subscribe(confirmed => {\r\n            if(confirmed && config.confirmCallback) config.confirmCallback();\r\n            else if(!confirmed && config.cancelCallback) config.cancelCallback();\r\n        })\r\n\r\n    return dialogRef;\r\n  }  \r\n}","import { Injectable } from '@angular/core';\r\nimport { MatBottomSheet, MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { Observable, of } from 'rxjs';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { FormSheetWrapperComponent } from './form-sheet-wrapper.component';\r\nimport { DynamicFormComponent } from 'src/app/dynamic-forms/components/dynamic-form.component';\r\nimport { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { FormSheetWrapperConfig } from './interfaces';\r\n\r\nexport interface FormServiceConfig<TForm, TFormState>{\r\n  formConfig: DynamicForm<TForm, TFormState>, \r\n  navConfig: MainTopNavConfig,\r\n  formState?: TFormState | Observable<TFormState>,\r\n  submitCallback?: (val: TForm) => void\r\n}\r\n\r\n@Injectable({ providedIn: \"any\" })\r\nexport class FormService {\r\n\r\n  constructor(private matBottomSheet: MatBottomSheet) {}\r\n\r\n  open<TForm, TFormState>(config: FormServiceConfig<TForm, TFormState>)\r\n  : MatBottomSheetRef<FormSheetWrapperComponent, TForm> {      \r\n    return this.matBottomSheet.open(FormSheetWrapperComponent, { \r\n      data: <FormSheetWrapperConfig<DynamicForm<TForm, TFormState>, any, TForm>>{\r\n        formConfig: config.formConfig, \r\n        navConfig: config.navConfig, \r\n        submitCallback: config.submitCallback,\r\n        formComponent: DynamicFormComponent,\r\n        formState$: config.formState instanceof Observable ? config.formState : of(config.formState)\r\n      } \r\n    });\r\n  }\r\n\r\n}\r\n","import { User } from 'src/app/core/models';\r\nimport { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { EmailControl, FirstNameControl, LastNameControl, PhoneNumberControl, UserNameControl } from '../common-controls.const';\r\n\r\nexport const ProfileForm: DynamicForm<User, any> = {\r\n    submitText: \"Oppdater\", getRawValue: true,\r\n    disabledControls: {userName: true, firstName: true, lastName: true},\r\n    controls: [\r\n        {...UserNameControl, required: true},\r\n        {...FirstNameControl, required: true},\r\n        {...LastNameControl, required: true},\r\n        PhoneNumberControl,\r\n        EmailControl,\r\n    ],\r\n}","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { startWith } from 'rxjs/operators';\r\nimport { Question, QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { VALIDATION_ERROR_MESSAGES, ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\nimport { BaseQuestionComponent } from '../../../dynamic-forms/components/base-question.component';\r\n\r\nexport interface SliderQuestion extends Question {\r\n  tickInterval?: number;\r\n  min?: number;\r\n  max?: number;\r\n  thumbLabel?: boolean;\r\n  valueSuffix?: string;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-slider-question',\r\n  template: `  \r\n    <div class=\"mat-body\" *ngIf=\"question.label\">{{ question.label }}</div>\r\n\r\n    <span *ngIf=\"question.hint\" class=\"mat-caption\">{{ question.hint }}</span>\r\n    \r\n    <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\r\n        <span class=\"mat-body\">{{ control.value + \" \" + question.valueSuffix }}</span>\r\n        <mat-slider [color]=\"question.color || 'accent'\" fxFlex [value]=\"value$ | async\" \r\n            (input)=\"updateValue($event.value)\"\r\n            [thumbLabel]=\"question.thumbLabel\"\r\n            [tickInterval]=\"question.tickInterval || 1\"\r\n            [min]=\"question.min\"\r\n            [max]=\"question.max\">\r\n        </mat-slider>\r\n    </div>\r\n\r\n    <mat-error *ngIf=\"control.dirty && control.invalid\">\r\n      {{ getValidationErrorMessage() }}\r\n    </mat-error>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SliderQuestionComponent extends BaseQuestionComponent<SliderQuestion> \r\n    implements QuestionComponent {\r\n\r\n    value$: Observable<any>;\r\n\r\n    constructor(@Inject(VALIDATION_ERROR_MESSAGES) validationErrorMessages: ValidationErrorMap) { \r\n        super(validationErrorMessages) \r\n    }\r\n\r\n    updateValue(val: number){\r\n        this.control.setValue(val);\r\n        this.control.markAsDirty();\r\n    }\r\n\r\n    protected onQuestionChanges(question: SliderQuestion): void { \r\n        super.onQuestionChanges(question);\r\n        this.value$ = this.control.valueChanges.pipe(startWith(this.control.value));\r\n    }\r\n\r\n}\r\n","import { Validators } from '@angular/forms';\r\nimport { SyncConfig } from 'src/app/core/services/sync/interfaces';\r\nimport { DynamicControl, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { DefaultState } from 'src/app/shared-app/const/default-state.const';\r\nimport { SliderQuestion, SliderQuestionComponent } from '../../components/dynamic-form-questions/slider-question.component';\r\n\r\nexport const SyncConfigForm: DynamicForm<SyncConfig, any> = {\r\n    submitText: \"Lagre\", resettable: true, \r\n    resetState: {...DefaultState.syncConfig, refreshTime: DefaultState.syncConfig.refreshTime / 60}, \r\n    controls: [\r\n        <DynamicControl<SyncConfig, any>>{ name: \"refreshTime\", required: true,\r\n            valueGetter: (s: SyncConfig) => s.refreshTime,\r\n            type: \"control\", questions: [{\r\n                component:  SliderQuestionComponent,\r\n                question: <SliderQuestion>{\r\n                    label: \"Synkroniseringstid\",\r\n                    hint: \"Hvor ofte skal det sjekkes etter oppdatert data?\",\r\n                    valueSuffix: \"min\", \r\n                    min: 3, max: 60, tickInterval: 5, thumbLabel: true\r\n                }, \r\n            }], \r\n            validators: [Validators.min(1)] \r\n        },\r\n        <DynamicControl<SyncConfig, any>>{ name: \"initialNumberOfMonths\", required: true,\r\n        valueGetter: (s: SyncConfig) => s.initialNumberOfMonths,\r\n        type: \"control\", questions: [{\r\n            component:  SliderQuestionComponent,\r\n            question: <SliderQuestion>{\r\n                label: \"Antall måneder med data\",\r\n                hint: \"Hvor mange måneder med data skal lastes inn?\",\r\n                valueSuffix: \"mnd\", \r\n                min: 4, max: 80, tickInterval: 4, thumbLabel: true\r\n            }, \r\n        }], \r\n        validators: [Validators.min(1)] \r\n        }\r\n    ],\r\n}","import { User } from 'src/app/core/models';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\n\r\nexport const UpdateCurrentUserActionId = \"UPDATE_CURRENT_USER\"\r\n\r\nexport interface UpdateCurrentUserStateCommand extends StateAction{\r\n    user: User;\r\n}","import { StateAction } from 'src/app/state/interfaces';\r\n\r\nexport const UpdatePasswordActionId = \"UPDATE_CURRENT_USER_PASSWORD\";\r\n\r\nexport interface UpdatePasswordStateCommand extends StateAction {\r\n    oldPassword: string, \r\n    newPassword: string\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { User } from \"src/app/core/models\";\r\nimport { AuthService } from '../core/services/auth';\r\nimport { SyncConfig } from '../core/services/sync/interfaces';\r\nimport { ReloadSyncStateActionId, SyncStateActionId, UpdateSyncConfigActionId, UpdateSyncConfigCommand } from '../core/services/sync/state/actions.const';\r\nimport { Store } from '../state/store';\r\nimport { UpdateCurrentUserActionId, UpdateCurrentUserStateCommand } from './state/update-current-user/update-current-user-state-command.interface';\r\nimport { UpdatePasswordActionId, UpdatePasswordStateCommand } from './state/update-password/update-password-state-command.interface';\r\nimport { StoreState } from './store-state';\r\n\r\n@Injectable({providedIn: 'any'})\r\nexport class ProfileFacade {\r\n\r\n  get currentUser(): User{\r\n    return this.store.selectProperty<User>(\"currentUser\")\r\n  };\r\n\r\n  get syncConfig(): SyncConfig{\r\n    return this.store.selectProperty<SyncConfig>(\"syncConfig\")\r\n  };\r\n\r\n  constructor(\r\n    private store: Store<StoreState>,\r\n    private authService: AuthService\r\n  ) {}\r\n  \r\n  updateCurrentUser = (user: User): void => \r\n    this.store.dispatch<UpdateCurrentUserStateCommand>({\r\n      actionId: UpdateCurrentUserActionId, user\r\n    });\r\n  \r\n  updatePassword = (oldPassword: string, newPassword: string) => \r\n    this.store.dispatch<UpdatePasswordStateCommand>({\r\n      actionId: UpdatePasswordActionId, oldPassword, newPassword\r\n    });\r\n  \r\n  updateSyncConfig = (syncConfig: SyncConfig) => \r\n    this.store.dispatch<UpdateSyncConfigCommand>({\r\n      actionId: UpdateSyncConfigActionId, syncConfig, propagate: true\r\n    });\r\n  \r\n  syncAll = () => this.store.dispatch({actionId: SyncStateActionId, propagate: true});\r\n\r\n  reloadData = () => this.store.dispatch({actionId: ReloadSyncStateActionId, propagate: true});\r\n\r\n  logout = () => this.authService.logout(); \r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ProfileComponent } from './profile/profile.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ProfileComponent,\r\n    data: {depth: 1},\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class ProfileRoutingModule { }\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { User } from 'src/app/core/models';\r\nimport { SyncConfig } from 'src/app/core/services/sync/interfaces';\r\nimport { ConfirmDialogService } from 'src/app/core/services/ui/confirm-dialog.service';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { CurrentUserPasswordForm, CurrentUserPasswordFormState } from 'src/app/shared/constants/forms/password-form.const';\r\nimport { ProfileForm } from 'src/app/shared/constants/forms/profile-form.const';\r\nimport { SyncConfigForm } from 'src/app/shared/constants/forms/sync-config.form.const';\r\nimport { FormService } from 'src/app/shared/form';\r\nimport { ProfileFacade } from '../profile.facade';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ProfileComponent {\r\n\r\n  passwordStatus: string;\r\n\r\n  navConfig: MainTopNavConfig = {title: \"Profil\"};\r\n\r\n  constructor(\r\n    private formService: FormService,\r\n    private facade: ProfileFacade,\r\n    private confirmService: ConfirmDialogService,\r\n  ){}\r\n\r\n  updateProfile(): void{\r\n    this.formService.open<User, any>({\r\n      formConfig: {...ProfileForm, initialValue: this.facade.currentUser}, \r\n      navConfig: {title: \"Oppdater profil\"},\r\n      submitCallback: (val: User) => this.facade.updateCurrentUser(val)\r\n    });\r\n  }\r\n\r\n  updatePassword(): void {\r\n    this.formService.open<CurrentUserPasswordFormState, any>({\r\n      formConfig: CurrentUserPasswordForm, \r\n      navConfig: {title: \"Oppdater passord\"},\r\n      submitCallback: (val: CurrentUserPasswordFormState) => this.facade.updatePassword(val.oldPassword, val.newPassword)\r\n    })\r\n  }\r\n\r\n  updateSyncConfig(): void {\r\n    const config = this.facade.syncConfig;\r\n    this.formService.open<SyncConfig, any>({\r\n      formConfig: {...SyncConfigForm, initialValue: {...config, refreshTime: config.refreshTime / 60 }}, \r\n      navConfig: {title: \"Konfigurasjoner\"},\r\n      submitCallback: (val: SyncConfig) => \r\n        this.facade.updateSyncConfig({...val, refreshTime: val.refreshTime * 60})\r\n    })\r\n  }\r\n\r\n  confirmPurge = () => {\r\n    this.confirmService.open({\r\n      title: 'Slett lokalt data?',\r\n      message: 'All data vil bli lastet ned på nytt. Vær varsom ved bruk av mobildata.', \r\n      confirmText: 'Slett',\r\n      confirmCallback: this.facade.reloadData\r\n    });\r\n  }\r\n\r\n  syncAll = () => this.facade.syncAll();\r\n\r\n  logout = () => this.facade.logout();\r\n}\r\n","<app-main-skeleton>\r\n\r\n  <app-main-top-nav-bar navbar [config]=\"navConfig\" >\r\n  </app-main-top-nav-bar>\r\n\r\n  <div class=\"pl-1 pr-1 pb-1 max-width h-100\" fxLayout=\"column\" fxLayoutAlign=\"space-between stretch\">\r\n\r\n    <span>\r\n      <app-list-card (click)=\"updateProfile()\">\r\n        <mat-icon left-side>account_circle</mat-icon>\r\n        Oppdater profil\r\n        <mat-icon right-side>chevron_right</mat-icon>\r\n      </app-list-card>\r\n      <app-list-card (click)=\"updatePassword()\">\r\n        <mat-icon left-side>vpn_key</mat-icon>\r\n        Oppdater passord\r\n        <mat-icon right-side>chevron_right</mat-icon>\r\n      </app-list-card>\r\n      <app-list-card (click)=\"updateSyncConfig()\">\r\n        <mat-icon left-side>settings</mat-icon>\r\n        Konfigurasjoner\r\n        <mat-icon right-side>chevron_right</mat-icon>\r\n      </app-list-card>\r\n      <app-list-card appAddToHomeScreen>\r\n        <mat-icon left-side>get_app</mat-icon>\r\n        Legg til app\r\n        <mat-icon right-side>chevron_right</mat-icon>\r\n      </app-list-card>\r\n\r\n      <app-list-card (click)=\"syncAll()\">\r\n        <mat-icon left-side>update</mat-icon>\r\n        Synkroniser data\r\n        <mat-icon right-side>chevron_right</mat-icon>\r\n      </app-list-card>\r\n    </span>\r\n  \r\n    <span>\r\n      <app-list-card (click)=\"confirmPurge()\">\r\n        <mat-icon left-side>delete_sweep</mat-icon>\r\n        Slett lokal data\r\n        <mat-icon right-side>chevron_right</mat-icon>\r\n      </app-list-card>\r\n      <app-list-card (click)=\"logout()\">\r\n        <mat-icon left-side>power_settings_new</mat-icon>\r\n        Logg ut\r\n        <mat-icon right-side>chevron_right</mat-icon>\r\n      </app-list-card>\r\n    </span>\r\n\r\n    \r\n  </div>\r\n\r\n</app-main-skeleton>\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ApiUrl } from 'src/app/core/api-url.enum';\r\nimport { HttpRequest } from 'src/app/core/services/http/interfaces';\r\nimport { HttpCommand, HttpActionId } from 'src/app/core/services/http/state/http.effect';\r\nimport { DispatchedAction } from 'src/app/state/action-dispatcher';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\nimport { Effect } from 'src/app/state/interfaces/effect.interface';\r\nimport { listenTo } from 'src/app/state/operators/listen-to.operator';\r\nimport { UpdateCurrentUserActionId, UpdateCurrentUserStateCommand } from './update-current-user-state-command.interface';\r\n\r\n@Injectable()\r\nexport class UpdateCurrentUserHttpEffect implements Effect<UpdateCurrentUserStateCommand> {\r\n\r\n    constructor(){}\r\n\r\n    handle$(actions$: Observable<DispatchedAction<UpdateCurrentUserStateCommand>>): Observable<StateAction> {\r\n        return actions$.pipe(\r\n            listenTo([UpdateCurrentUserActionId]),\r\n            map(x => { return <HttpCommand>{\r\n                actionId: HttpActionId, propagate: true,\r\n                request: this.createHttpRequest(x.action),\r\n                stateSnapshot: x.stateSnapshot\r\n            }}),  \r\n        )\r\n    }\r\n\r\n    protected createHttpRequest(action: UpdateCurrentUserStateCommand): HttpRequest{\r\n        return {\r\n            method: \"PUT\", \r\n            body: action.user, \r\n            apiUrl: ApiUrl.Auth, \r\n            cancelMessage: \"Oppdatering av profil er reversert\"\r\n        }\r\n    }\r\n\r\n}","import { Reducer, StateCurrentUser } from 'src/app/state/interfaces';\r\nimport { UpdateCurrentUserActionId, UpdateCurrentUserStateCommand } from './update-current-user-state-command.interface';\r\n\r\nexport const UpdateCurrentUserReducer: Reducer<StateCurrentUser> = {\r\n    actionId: UpdateCurrentUserActionId,\r\n    stateProperties: [\"currentUser\"],\r\n    reducerFn: (state: StateCurrentUser, action: UpdateCurrentUserStateCommand) => {\r\n        state.currentUser = {...state.currentUser, ...action.user}\r\n        return state;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { ApiUrl } from 'src/app/core/api-url.enum';\r\nimport { ApiService } from 'src/app/core/services/api.service';\r\nimport { DispatchedAction } from 'src/app/state/action-dispatcher';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\nimport { Effect } from 'src/app/state/interfaces/effect.interface';\r\nimport { listenTo } from 'src/app/state/operators/listen-to.operator';\r\nimport { UpdatePasswordActionId, UpdatePasswordStateCommand } from './update-password-state-command.interface';\r\n\r\n@Injectable()\r\nexport class UpdatePasswordHttpEffect implements Effect<UpdatePasswordStateCommand> {\r\n\r\n    constructor(private apiService: ApiService){}\r\n\r\n    handle$(actions$: Observable<DispatchedAction<UpdatePasswordStateCommand>>): Observable<StateAction> {\r\n        return actions$.pipe(\r\n            listenTo([UpdatePasswordActionId]),\r\n            mergeMap(({action}) => \r\n                this.apiService.put(`${ApiUrl.Auth}/changePassword`, action)),\r\n        )\r\n    }\r\n\r\n}","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { STORE_EFFECTS, STORE_REDUCERS } from '../state/injection-tokens';\r\nimport { StateModule } from '../state/state.module';\r\nimport { ProfileRoutingModule } from './profile-routing.module';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { UpdateCurrentUserHttpEffect } from './state/update-current-user/update-current-user.http.effect';\r\nimport { UpdateCurrentUserReducer } from './state/update-current-user/update-current-user.reducer';\r\nimport { UpdatePasswordHttpEffect } from './state/update-password/update-password.http.effect';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ProfileComponent\r\n  ],\r\n  imports: [ \r\n    SharedModule,\r\n    StateModule,\r\n    ProfileRoutingModule\r\n  ],\r\n  providers: [\r\n    { provide: STORE_EFFECTS, useClass: UpdateCurrentUserHttpEffect, multi: true },\r\n    { provide: STORE_EFFECTS, useClass: UpdatePasswordHttpEffect, multi: true },\r\n    { provide: STORE_REDUCERS, useValue: UpdateCurrentUserReducer, multi: true }\r\n  ]\r\n})\r\nexport class ProfileModule {}  \r\n\r\n","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'arrayFromNumber'\n})\nexport class ArrayFromNumberPipe implements PipeTransform {\n\n  transform(value: number, includeZero: boolean = false): any {\n    let arr = [];\n    let i = includeZero ? 0 : 1;\n    for(i; i <= value; i++){\n      arr.push(i);\n    }\n    return arr;\n  }\n\n}\n","export * from './interfaces'\r\nexport * from './form.service';"],"sourceRoot":"webpack:///"}
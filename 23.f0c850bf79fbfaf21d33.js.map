{"version":3,"sources":["./src/app/shared/constants/model-forms/save-mission-note-forms.const.ts","./src/app/mission-modules/mission-note-list/mission-note-list.facade.ts","./src/app/mission-modules/mission-note-list/mission-note-list/note-card/note-card.component.html","./src/app/mission-modules/mission-note-list/mission-note-list/note-card/note-card.component.ts","./src/app/mission-modules/mission-note-list/mission-note-list/mission-note-list.component.html","./src/app/mission-modules/mission-note-list/mission-note-list/mission-note-list.component.ts","./src/app/mission-modules/mission-note-list/mission-note-list-routing.module.ts","./src/app/mission-modules/mission-note-list/mission-note-list.module.ts"],"names":["CreateMissionNoteForm","submitText","controls","name","type","valueGetter","s","title","questions","component","question","placeholder","validators","maxLength","MissionNoteTitleMaxLength","required","content","minRows","MissionNoteContentMaxLength","EditMissionNoteForm","store","getByMissionId$","id","selectProperty$","pipe","map","arr","x","missionId","MissionNoteListFacade","RolePresets","deleteClicked","editClicked","deleteNote","emit","note","editNote","NoteCardComponent","routes","path","facade","route","router","modelFormService","notes$","this","openEditNoteForm","entityId","open","formConfig","dynamicForm","stateProp","trackByNote","openCreateNoteForm","initialValue","onBack","navigate","relativeTo","parent","navConfig","backFn","fabs","icon","aria","color","callback","allowedRoles","Internal","snapshot","params","MissionNoteListComponent","MissionNoteListRoutingModule","forChild","MissionNoteListModule"],"mappings":"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","file":"23.f0c850bf79fbfaf21d33.js","sourcesContent":["import { Validators } from '@angular/forms';\r\nimport { MissionNote } from 'src/app/core/models';\r\nimport { DynamicControl, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { InputQuestionComponent, InputQuestion } from '../../components/dynamic-form-questions/input-question.component';\r\nimport { TextAreaQuestionComponent, TextAreaQuestion } from '../../components/dynamic-form-questions/text-area-question.component';\r\nimport { HiddenIdControl, HiddenMissionIdControl } from '../common-controls.const';\r\nimport { ValidationRules } from '../validation-rules.const';\r\n\r\nconst TitleControl = <DynamicControl<MissionNote, any>>{ name: \"title\", \r\n    type: \"control\", valueGetter: (s: MissionNote) => s?.title, questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{placeholder: \"Tittel\"}, \r\n    }], \r\n    validators: [Validators.maxLength(ValidationRules.MissionNoteTitleMaxLength)] \r\n}\r\nconst ContentControl = <DynamicControl<MissionNote, any>>{ name: \"content\", required: true,\r\n    type: \"control\", valueGetter: (s: MissionNote) => s?.content, questions: [{\r\n        component:  TextAreaQuestionComponent,\r\n        question: <TextAreaQuestion>{placeholder: \"Beskrivelse\", minRows: 4}, \r\n    }], \r\n    validators: [Validators.maxLength(ValidationRules.MissionNoteContentMaxLength)] \r\n}\r\n\r\nexport const CreateMissionNoteForm: DynamicForm<MissionNote, any> = {\r\n    submitText: \"Legg til\",\r\n    controls: [\r\n        TitleControl, \r\n        ContentControl, \r\n        HiddenMissionIdControl\r\n    ],\r\n}\r\n\r\nexport const EditMissionNoteForm: DynamicForm<MissionNote, any> = {\r\n    submitText: \"Oppdater\",\r\n    controls: [\r\n        ...CreateMissionNoteForm.controls,\r\n        HiddenIdControl\r\n    ],\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from 'rxjs/operators';\r\nimport { MissionNote } from \"src/app/core/models\";\r\nimport { _filter } from 'src/app/shared-app/helpers/array/filter.helper';\r\nimport { StateMissionNotes } from 'src/app/state/interfaces';\r\nimport { Store } from 'src/app/state/store';\r\n\r\n@Injectable({\r\n  providedIn: 'any',\r\n})\r\nexport class MissionNoteListFacade  {\r\n\r\n  constructor(private store: Store<StateMissionNotes>) { }\r\n\r\n  getByMissionId$ = (id: string): Observable<MissionNote[]> => \r\n    this.store.selectProperty$<MissionNote[]>(\"missionNotes\").pipe(map(arr => \r\n      _filter<MissionNote>(arr, (x: MissionNote) => x.missionId === id)\r\n  )) \r\n\r\n}\r\n","<mat-card *ngIf=\"note\"fxLayout=\"column\" fxLayoutAlign=\"space-between start\" fxLayoutGap=\"5px\" class=\"m-1\">\n\n    <mat-card-header *ngIf=\"note.title\">\n        <mat-card-title>{{ note.title  }}</mat-card-title>\n    </mat-card-header>\n\n    <mat-card-content>\n        <p>{{ note.content }}</p>\n    </mat-card-content>\n\n    <div class=\"w-100\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n\n        <span class=\"mat-caption\">\n            {{ note.updatedAt | date: 'dd.MMM yyyy' }} {{ note.createdBy ? (\"av \" + note.createdBy) : \"\" }}\n        </span>\n\n\n        <button *ifRole=\"RolePresets.Authority\" (click)=\"editNote()\" mat-icon-button color=\"accent\"\n            aria-label=\"Rediger notat\">\n            <mat-icon>edit</mat-icon>\n        </button>\n\n    </div>\n\n</mat-card>","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { MissionNote } from 'src/app/core/models';\r\nimport { RolePresets } from 'src/app/shared-app/enums';\r\n\r\n@Component({\r\n  selector: 'app-note-card',\r\n  templateUrl: './note-card.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NoteCardComponent {\r\n  RolePresets = RolePresets;\r\n  \r\n  @Input() note: MissionNote;\r\n\r\n  @Output() deleteClicked = new EventEmitter();\r\n  @Output() editClicked = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  deleteNote = () => this.deleteClicked.emit(this.note.id);\r\n\r\n  editNote = () => this.editClicked.emit(this.note.id);\r\n}\r\n","<app-main-skeleton [fabs]=\"fabs\" overlayMode=\"true\">\n\n    <app-main-top-nav-bar navbar [config]=\"navConfig\" >\n    </app-main-top-nav-bar>\n\n    <div class=\"max-width\">\n        <app-note-card *ngFor=\"let note of notes$ | async; trackBy: trackByNote\" [note]=\"note\" \n            (editClicked)=\"openEditNoteForm($event)\">\n        </app-note-card>\n    </div>   \n\n</app-main-skeleton>\n\n<router-outlet></router-outlet>","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { MissionNote } from 'src/app/core/models';\r\nimport { RolePresets } from 'src/app/shared-app/enums';\r\nimport { _sortByDate } from 'src/app/shared-app/helpers/array/sort-by-date.helper';\r\nimport { _trackByModel } from 'src/app/shared-app/helpers/trackby/track-by-model.helper';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { CreateMissionNoteForm, EditMissionNoteForm } from 'src/app/shared/constants/model-forms/save-mission-note-forms.const';\r\nimport { ModelFormService } from 'src/app/shared/model-form';\r\nimport { MissionNoteListFacade } from '../mission-note-list.facade';\r\n\r\n@Component({\r\n  selector: 'app-mission-note-list',\r\n  templateUrl: './mission-note-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MissionNoteListComponent {\r\n  \r\n  notes$: Observable<MissionNote[]> = this.facade.getByMissionId$(this.missionId).pipe(\r\n    map(x => _sortByDate<MissionNote>(x, \"updatedAt\"))\r\n  );\r\n\r\n  navConfig: MainTopNavConfig; \r\n  fabs: AppButton[];\r\n  \r\n  get missionId() { return this.route.parent.parent.snapshot.params.id }\r\n\r\n  constructor( \r\n    private facade: MissionNoteListFacade,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private modelFormService: ModelFormService\r\n    ) {  \r\n    this.navConfig = {title:  \"Notater\", backFn: this.onBack};\r\n    this.fabs = [\r\n      {icon: \"add\", aria: 'Legg til', color: \"accent\", \r\n      callback: this.openCreateNoteForm, allowedRoles: RolePresets.Internal}\r\n    ]\r\n  }\r\n \r\n  openEditNoteForm = (entityId: number) => \r\n    this.modelFormService.open({formConfig: {\r\n      dynamicForm: EditMissionNoteForm,\r\n      stateProp: \"missionNotes\", entityId\r\n    }});\r\n\r\n  trackByNote = _trackByModel(\"missionNotes\")\r\n  \r\n  private openCreateNoteForm = () => \r\n    this.modelFormService.open({\r\n      formConfig: {\r\n        dynamicForm: {...CreateMissionNoteForm, initialValue: {missionId: this.missionId}},\r\n        stateProp: \"missionNotes\",\r\n      },\r\n    });\r\n\r\n  private onBack = () => this.router.navigate(['../'], {relativeTo: this.route.parent});\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { MissionNoteListComponent } from './mission-note-list/mission-note-list.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: MissionNoteListComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class MissionNoteListRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { MissionNoteListRoutingModule } from './mission-note-list-routing.module';\r\nimport { MissionNoteListComponent } from './mission-note-list/mission-note-list.component';\r\nimport { NoteCardComponent } from './mission-note-list/note-card/note-card.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    MissionNoteListComponent,\r\n    NoteCardComponent,\r\n  ],\r\n  imports: [\r\n    SharedModule,\r\n    MissionNoteListRoutingModule\r\n  ],\r\n})\r\nexport class MissionNoteListModule { }\r\n"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["./src/app/shared/translations.ts","./src/app/shared-app/helpers/id/id-generator.helper.ts","./src/app/model/abstracts/base-form-to-save-model-state-command.adapter.ts","./src/app/shared-app/helpers/id/model-id-generator.helper.ts","./src/app/shared/components/confirm-dialog/confirm-dialog.component.html","./src/app/shared/components/confirm-dialog/confirm-dialog.component.ts","./src/app/shared/components/bottom-sheet-menu.component.ts","./src/app/shared/components/abstracts/ag-grid-table.component.ts","./src/app/model/state/delete-model/delete-model.http.effect.ts","./src/app/model/state/delete-model/delete-model.reducer.ts","./src/app/model/helpers/delete-model-with-children.helper.ts","./src/app/model/state/mail-models/mail-api-url.map.ts","./src/app/model/state/mail-models/mail-models.http.effect.ts","./src/app/model/state/save-model-file/save-model-file.http.effect.ts","./src/app/model/state/save-model-file/save-model-file.reducer.ts","./src/app/model/state/providers.const.ts","./src/app/model/helpers/get-with-relations.helper.ts","./src/app/shared/components/selectable-card/selectable-card.component.ts","./src/app/shared/components/selectable-card/selectable-card.component.html","./src/app/shared/pipes/array-slice.pipe.ts","./src/app/shared/components/selectable-list/selectable-list.component.html","./src/app/shared/components/selectable-list/selectable-list.component.ts","./src/app/shared-app/helpers/array/find.helper.ts","./src/app/shared/components/selectable-list/selectable-list.presenter.ts","./src/app/core/services/ui/confirm-dialog.service.ts","./src/app/model/helpers/get-with-relations.config.ts","./src/app/model/state/save-model/save-model-action.const.ts","./src/app/model/state/save-model/save-model.http.effect.ts","./src/app/model/state/save-model-file/save-model-file-action.const.ts","./src/app/shared/model-form/index.ts","./src/app/shared/model-form/model-form.module.ts","./src/app/model/state/delete-model/delete-model-action.const.ts","./src/app/shared/model-form/components/model-form.component.ts","./src/app/shared/model-form/model-form.service.ts","./src/app/shared/model-form/model-form.facade.ts","./src/app/shared/pipes/array-from-number.pipe.ts","./src/app/model/state/mail-models/mail-models-state-command.interface.ts","./src/app/shared/model-form/adapters/form-to-save-model-state-command.adapter.ts","./src/app/shared-app/helpers/array/add.helper.ts","./src/app/model/state/save-model/save-model.reducer.ts","./src/app/model/helpers/modify-model-with-foreigns.helper.ts","./src/app/shared-app/helpers/array/update.helper.ts"],"names":["translations","id","name","phonenumber","address","user","title","content","createdat","createdby","filename","description","finished","username","firstname","lastname","email","role","none","year","month","weeknr","week","date","day","fullname","confirmedhours","openhours","password","status","starttime","endtime","totalhours","comment","timesheet","timesheetid","timesheets","mission","missionid","missions","employer","employerid","employers","documenttype","documenttypeid","documenttypes","missiondocument","missiondocumentid","missiondocuments","missionnote","missionnoteId","missionnotes","missiontype","missiontypeid","missiontypes","inboundemailpassword","inboundemailpasswordid","inboundemailpasswords","showall","currentweek","currentmonth","currentyear","custommonth","custom","open","confirmed","chars","charLength","length","_idGenerator","i","charAt","Math","floor","random","input","this","adapt","stateProp","saveAction","modelConfig","get","convertFormStateToEntity","checkNestedForeigns","foreigns","entity","modelCfg","console","trace","identifier","fkPropConfig","foreignEntity","foreignProp","_modelIdGenerator","error","foreignStateProps","foreignStateProp","foreignKey","displayProp","fkEntity","fkDisplayValue","existingFkEntity","options","dialogRef","config","onNoClick","close","ConfirmDialogComponent","_bottomSheetRef","buttons","handleFn","fn","parameters","dismiss","BottomSheetMenuComponent","columnDefs","rowData","_config","value","initNgGrid","autoSizeGrid","cols","dataGrid","columnApi","getAllColumns","filter","x","getColId","autoSizeColumns","cfg","data","currentObject","record","hasSameObjectProps","addColDefs","obj1","obj2","objProps1","Object","keys","hasOwnProperty","AgGridTableComponent","handle$","actions$","pipe","map","actionId","propagate","request","createHttpRequest","action","stateSnapshot","command","apiUrl","createApiUrl","body","createHttpBody","method","createHttpMethod","cancelMessage","createCancelMessage","multi","ids","entityWord","toLowerCase","DeleteModelHttpEffect","DeleteModelReducer","reducerFn","state","filterFactory","key","undefined","newState","children","childProp","_deleteModelWithChildren","stateProperties","stateProps","concat","MailApiUrlMap","missionImages","missionDocuments","apiService","mergeMap","post","toEmail","MailModelsHttpEffect","FormData","file","fileWrapper","modifiedFile","append","JSON","stringify","SaveModelFileHttpEffect","SaveModelFileReducer","fileName","temp_localFileUrl","URL","createObjectURL","SaveModelProviders","provide","useClass","useValue","SaveModelFileProviders","DeleteModelProviders","MailModelsProviders","_getWithRelations","modelProp","modelState","includedForeignProps","fkStateProp","includedChildProps","childStateProp","isSelected","selected","toggleSelection","emit","SelectableCardComponent","transform","items","rowNr","totalRows","iterations","ceil","rowItems","sliced","slice","push","ArraySlicePipe","selectableListPresenter","selectionChanged","itemClicked","selectableEntities$","clickDisabled","onItemClick","item","isEntitySelected","_identifier","trackByFn","index","selectable","clearSelections","addSelections","addEntities","setIdentifier","ngOnInit","selectedIds$","skip","takeUntil","unsubscribe","subscribe","toggleSelect","toggleEntity","setTimeout","SelectableListComponent","_find","array","obj","selectedIdsSubject","asObservable","entitiesSubject","entities$","getSelectableEntities","includes","entities","next","findIndex","splice","selectedIds","result","SelectableListPresenter","matDialog","cancelCallback","confirmCallback","afterClosed","ConfirmDialogService","propConfig","fkProps","getProps","childProps","includedProps","props","included","propMap","include","SaveModelActionId","apiUrlOverride","SaveModelHttpEffect","SaveModelFileActionId","ModelFormModule","DeleteModelActionId","facade","formSubmitted","formStateSubject","BehaviorSubject","isCreateForm","onCancel","entityId","formState$","combineLatest","getFormState$","inputFormState","modelFormState","shareReplay","formConfig$","take","getFormConfig","onSubmit","adapter","stateCommand","formState","save","dynamicForm","initialValue","getModelWithForeigns","ModelFormComponent","matBottomSheet","router","confirmService","store","res","ref","url","navigate","translateStateProp","prop","confirmDelete","formConfig","deleteUrl","translatedProp","message","confirmText","deleteEntity","dispatch","submitCallback","formComponent","Observable","of","navConfig","customTitle","backFn","backIcon","deleteDisabled","icon","color","callback","onDeleteUri","onSaveUri","afterDismissed","ModelFormService","select$","fkState","selectProperty","relationCfg","ModelFormFacade","includeZero","arr","ArrayFromNumberPipe","MailModelsActionId","_add","unshift","SaveModelReducer","updatedAt","Date","getTime","entityFn","propCfg","fkProp","foreignEntityId","_modifyModelWithForeigns","updatedObj","assign","_update","fkCfg"],"mappings":"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","file":"4.5f0cac12b7cbfd15753b.js","sourcesContent":["export const translations: { [key: string]: string } = {\r\n  id: \"Id\",\r\n  name: \"Navn\",\r\n  phonenumber: \"Telefonnummer\",\r\n  address: \"Adresse\",\r\n  user: \"Bruker\",\r\n  title: \"Tittel\",\r\n  content: \"Innhold\",\r\n  createdat: \"Opprettet\",\r\n  createdby: \"Opprettet av\",\r\n  filename: \"Lenke\",\r\n  description: \"Beskrivelse\",\r\n  finished: \"Ferdig\",\r\n  username: \"Brukernavn\",\r\n  firstname: \"Fornavn\",\r\n  lastname: \"Etternavn\",\r\n  email: \"Epost\",\r\n  role: \"Rolle\",\r\n  none: \"Ingen\",\r\n  year: \"År\",\r\n  month: \"Måned\",\r\n  weeknr: \"Uke\",\r\n  week: \"Uke\",\r\n  date: \"Dato\",\r\n  day: \"Dag\",\r\n  fullname: \"Navn\",\r\n  confirmedhours: \"Låste timer\",\r\n  openhours: \"Åpne timer\",\r\n  password: \"Passord\",\r\n  status: \"Status\",\r\n  starttime: \"Starttid\",\r\n  endtime: \"Sluttid\",\r\n  totalhours: \"Timer\",\r\n  comment: \"Kommentar\",\r\n\r\n  timesheet: \"Time\",\r\n  timesheetid: \"Time\",\r\n  timesheets: \"Timer\",\r\n  \r\n  mission: \"Oppdrag\",   \r\n  missionid: \"Oppdrag\",\r\n  missions: \"Oppdrag\",\r\n\r\n  employer: \"Oppdragsgiver\",\r\n  employerid: \"Oppdragsgiver\",\r\n  employers: \"Oppdragsgivere\",\r\n\r\n  documenttype: \"Dokumenttype\",\r\n  documenttypeid: \"Dokumenttype\",\r\n  documenttypes: \"Dokumenttyper\",\r\n\r\n  missiondocument: \"Dokument\",\r\n  missiondocumentid: \"Dokument\",\r\n  missiondocuments: \"Dokumenter\",\r\n\r\n  missionnote: \"Notat\",\r\n  missionnoteId: \"Notat\",\r\n  missionnotes: \"Notater\",\r\n\r\n  missiontype: \"Oppdragstype\",\r\n  missiontypeid: \"Oppdragstype\",\r\n  missiontypes: \"Oppdragstyper\",\r\n\r\n  inboundemailpassword: \"Epostpassord\",\r\n  inboundemailpasswordid: \"Epostpassord\",\r\n  inboundemailpasswords: \"Epostpassord\",\r\n\r\n  showall: \"Vis alt\",\r\n  currentweek: \"Denne uken\",\r\n  currentmonth: \"Denne måned\",\r\n  currentyear: \"I år\",\r\n  custommonth: \"Velg måned\",\r\n  custom: \"Velg tid\",\r\n\r\n  open: \"Åpen\",\r\n  confirmed: \"Låst\",\r\n};\r\n","const chars = 'abcdefghijklmnopqrstuvwxyz0123456789';\r\nconst charLength = chars.length;\r\n\r\nexport function _idGenerator(length: number = 7): string{\r\n    var id = '';\r\n    for ( var i = 0; i < length; i++ ) {\r\n        id += chars.charAt(Math.floor(Math.random() * charLength));\r\n    }\r\n    return id;\r\n}","\r\nimport { Model } from 'src/app/core/models';\r\nimport { _find } from 'src/app/shared-app/helpers/array/find.helper';\r\nimport { _modelIdGenerator } from 'src/app/shared-app/helpers/id/model-id-generator.helper';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { ModelFormToSaveModelInput } from 'src/app/shared/model-form/interfaces/model-form-to-state-command-adapter.interface';\r\nimport { SaveAction } from 'src/app/shared/save-action.interface';\r\nimport { ModelState } from '../interfaces';\r\nimport { ModelConfig, ModelStateConfig } from '../model-state.config';\r\nimport { SaveModelStateCommand } from '../state/save-model/save-model-action.const';\r\n\r\nexport abstract class BaseFormToSaveModelStateCommandAdapter<TModel extends Model, TFormState> \r\n    implements SaveModelStateCommand<TModel> {\r\n\r\n    actionId: string;\r\n    entity: TModel;\r\n    saveAction: SaveAction;\r\n    stateProp: Prop<ModelState>;\r\n\r\n    protected modelConfig: ModelConfig<TModel>;\r\n\r\n    constructor(protected input: ModelFormToSaveModelInput<TFormState>){\r\n        this.adapt()\r\n    }\r\n    \r\n    protected adapt(): void{\r\n        this.stateProp = this.input.stateProp;\r\n        this.saveAction = this.input.saveAction;\r\n        this.modelConfig = ModelStateConfig.get(this.stateProp);\r\n        this.convertFormStateToEntity();\r\n        this.checkNestedForeigns(this.modelConfig.foreigns);\r\n        this.entity = _modelIdGenerator(this.entity, this.modelConfig);      \r\n    }\r\n\r\n    protected convertFormStateToEntity(): void{\r\n        console.error(\"Method not implemented\");\r\n        return null;\r\n    }\r\n\r\n    private checkNestedForeigns(foreignStateProps: Prop<ModelState>[]): void{\r\n        if(!foreignStateProps) return;\r\n        for(const foreignStateProp of foreignStateProps){\r\n            const {foreignKey, displayProp, foreignProp, identifier} = ModelStateConfig.get(foreignStateProp);\r\n            const fkEntity = this.entity[foreignProp];\r\n            if(!fkEntity) continue; //If no fk entity set on entity, ignore\r\n\r\n            const fkDisplayValue = fkEntity[displayProp]; //Fetch display value used in auto completes   \r\n\r\n            if(!fkDisplayValue) //If no fk value provided, set foreign key to null on entity \r\n                this.entity[foreignKey] = null;\r\n\r\n            const existingFkEntity = //Check if fkEntity with same display value exists\r\n                _find<Model>(this.input.options[foreignStateProp], fkDisplayValue, displayProp)\r\n\r\n            if(existingFkEntity) //If existing fkEntity, set foreign key on entity\r\n                this.entity[foreignKey] = existingFkEntity[identifier]; \r\n            \r\n            if(existingFkEntity || !fkDisplayValue) //If no fkEntity or fk value provided, set nested fk entity to null\r\n                this.entity[foreignProp] = null;\r\n        }\r\n\r\n    }\r\n}","import { Model } from 'src/app/core/models';\r\nimport { ModelConfig, ModelStateConfig } from 'src/app/model/model-state.config';\r\nimport { _idGenerator } from './id-generator.helper';\r\n\r\nexport function _modelIdGenerator<TModel extends Model>(entity: TModel, modelCfg: ModelConfig<TModel>): TModel{\r\n    if(!modelCfg) console.trace(\"No model state config provided\");\r\n    \r\n    const id = entity[modelCfg.identifier]\r\n    if(!id) entity[modelCfg.identifier] = _idGenerator() as any;\r\n\r\n    for(var fkProp of modelCfg.foreigns || []){ //Run through fks, check if exist in object, create id if no id.\r\n        const fkPropConfig = ModelStateConfig.get(fkProp); \r\n        const foreignEntity = entity[fkPropConfig.foreignProp];\r\n        if(!foreignEntity || foreignEntity[fkPropConfig.identifier]) continue; //If no fk entity, or entity has ID already, continue\r\n        foreignEntity[fkPropConfig.identifier] = _idGenerator();    \r\n        entity[fkPropConfig.foreignProp] = foreignEntity;       \r\n    }\r\n\r\n    return entity;\r\n }","<mat-card>\r\n\r\n  <mat-card-header *ngIf=\"config.title\">\r\n    <mat-card-title>\r\n      {{ config.title }}\r\n    </mat-card-title>\r\n  </mat-card-header>\r\n\r\n  <mat-card-content *ngIf=\"config.message\">\r\n    <p>{{ config.message || 'Vennligst bekreft operasjonen.' }}</p>\r\n  </mat-card-content>\r\n\r\n  <mat-card-actions fxLayout=\"row\" fxLayoutAlign=\"end center\">\r\n    <button mat-button (click)=\"onNoClick()\">{{ config.discardText || 'Avbryt'}}</button>\r\n    <button mat-button  [mat-dialog-close]=\"true\" cdkFocusInitial>{{ config.confirmText }}</button>\r\n  </mat-card-actions>\r\n  \r\n</mat-card>\r\n","import { Component, Inject, ChangeDetectionStrategy } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-confirm-dialog',\r\n  templateUrl: './confirm-dialog.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ConfirmDialogComponent {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<ConfirmDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public config: ConfirmDialogConfig) {}\r\n\r\n  onNoClick(): void {\r\n    this.dialogRef.close(false);\r\n  }\r\n}\r\n\r\nexport interface ConfirmDialogConfig {\r\n  title?: string,\r\n  message?: string,\r\n  discardText?: string,\r\n  confirmText: string,\r\n  confirmCallback?: Function,\r\n  cancelCallback?: Function,\r\n}\r\n","import { Component, Inject, ChangeDetectionStrategy } from '@angular/core';\r\nimport { MAT_BOTTOM_SHEET_DATA, MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\n\r\n@Component({\r\n  selector: 'app-bottom-sheet-menu',\r\n  template:`\r\n  <span class=\"nav-list mat-subheading-2\">\r\n    <ng-container #navs *ngFor=\"let button of buttons\">\r\n        <a *ifRole=\"button.allowedRoles\" (click)=\"handleFn(button.callback, button.params)\">\r\n            <mat-icon>{{ button.icon }}</mat-icon>\r\n            <span class=\"ml-2 mr-2\">{{ button.text }}</span>\r\n        </a>\r\n    </ng-container>\r\n  </span>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class BottomSheetMenuComponent {\r\n  constructor(\r\n    private _bottomSheetRef: MatBottomSheetRef<BottomSheetMenuComponent>,\r\n    @Inject(MAT_BOTTOM_SHEET_DATA) public buttons: AppButton[]) { }\r\n\r\n  handleFn = (fn: Function, parameters: any[] = []) => {\r\n    fn(...parameters);\r\n    this.close();\r\n  };\r\n\r\n  close = () => this._bottomSheetRef.dismiss(); \r\n}\r\n","import { Input, ViewChild, Directive } from '@angular/core';\r\nimport { AgGridAngular } from 'ag-grid-angular';\r\nimport { ColDef } from 'ag-grid-community';\r\nimport { AgGridConfig } from './ag-grid-config.interface';\r\n\r\n@Directive()\r\nexport abstract class AgGridTableComponent<TRecord, TConfig extends AgGridConfig<TRecord>> {\r\n  @ViewChild('dataGrid') dataGrid: AgGridAngular;\r\n\r\n  private _config: TConfig;\r\n  get config(): TConfig { return this._config; }\r\n\r\n  @Input() set config(value: TConfig) {\r\n      this._config = value;\r\n      this.initNgGrid(value);\r\n  }\r\n\r\n  columnDefs: ColDef[] = [];\r\n\r\n  rowData: any[] = [];\r\n\r\n  private currentObject: TRecord;\r\n\r\n  constructor() { }\r\n\r\n  autoSizeGrid(){\r\n    let cols = this.dataGrid.columnApi.getAllColumns().filter(x => x.getColId() != 'checkbox')\r\n    this.dataGrid.columnApi.autoSizeColumns(cols);\r\n  }\r\n\r\n  protected abstract addColDefs(object: Object): ColDef[];\r\n\r\n  protected initNgGrid(cfg: TConfig): void{\r\n    \r\n    if(!cfg?.data || cfg.data.length === 0){ //Reset grid if no data\r\n      this.columnDefs = [];\r\n      this.rowData = [];\r\n      this.currentObject = null;\r\n      return;\r\n    };\r\n\r\n    const record = cfg.data[0];\r\n    if(!this.hasSameObjectProps(record, this.currentObject)){\r\n      this.currentObject = record;\r\n      this.columnDefs = this.addColDefs(record);\r\n    }\r\n\r\n    this.rowData = cfg.data;\r\n  }\r\n\r\n  protected hasSameObjectProps(obj1: Object, obj2: Object): boolean{\r\n    let objProps1 = Object.keys(obj1 || {});\r\n\r\n    if(objProps1.length !== Object.keys(obj2 || {}).length) return false;\r\n\r\n    for(const prop of objProps1){\r\n      if(!obj2.hasOwnProperty(prop)) return false   \r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Model } from 'src/app/core/models';\r\nimport { HttpRequest } from 'src/app/core/services/http/interfaces';\r\nimport { HttpActionId, HttpCommand } from 'src/app/core/services/http/state/http.effect';\r\nimport { translations } from 'src/app/shared/translations';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\nimport { Effect } from 'src/app/state/interfaces/effect.interface';\r\nimport { listenTo } from 'src/app/state/operators/listen-to.operator';\r\nimport { DispatchedAction } from '../../../state/action-dispatcher';\r\nimport { ModelConfig, ModelStateConfig } from '../../model-state.config';\r\nimport { DeleteModelActionId, DeleteModelStateCommand } from './delete-model-action.const';\r\n\r\n@Injectable()\r\nexport class DeleteModelHttpEffect implements Effect<DeleteModelStateCommand>{\r\n\r\n    constructor(){ }\r\n\r\n    handle$(actions$: Observable<DispatchedAction<DeleteModelStateCommand>>): Observable<StateAction> {\r\n        return actions$.pipe(\r\n            listenTo([DeleteModelActionId]),\r\n            map(x => { return <HttpCommand>{\r\n                actionId: HttpActionId, propagate: true,\r\n                request: this.createHttpRequest(x.action),\r\n                stateSnapshot: x.stateSnapshot\r\n            }}),  \r\n        )\r\n    }\r\n\r\n    private createHttpRequest(command: DeleteModelStateCommand): HttpRequest {\r\n        const modelConfig = ModelStateConfig.get(command.stateProp);\r\n        if(!modelConfig) console.error(`No model config for property ${command.stateProp}`);\r\n\r\n        return {\r\n            apiUrl: this.createApiUrl(command, modelConfig),\r\n            body: this.createHttpBody(command),\r\n            method: this.createHttpMethod(command),\r\n            cancelMessage: this.createCancelMessage(command, modelConfig)\r\n        }\r\n    }\r\n\r\n    protected createCancelMessage(command: DeleteModelStateCommand, modelConfig: ModelConfig<Model>): string{\r\n        const multi = command.ids?.length > 1;\r\n\r\n        const entityWord = \r\n            translations[(multi ? command.stateProp : modelConfig.foreignProp).toLowerCase()];\r\n        \r\n        return `Sletting av ${command.ids?.length || ''} ${entityWord} med id ${command.ids || command.id} er reversert!`;\r\n    }\r\n  \r\n    protected createHttpBody(command: DeleteModelStateCommand): {ids: any[]} {\r\n        return command.id ? null : {ids: command.ids};\r\n    }\r\n\r\n    protected createApiUrl(command: DeleteModelStateCommand, modelConfig: ModelConfig<Model>): string {\r\n        const endUri = command.id ? `/${command.id}` : \"/DeleteRange\";\r\n        return modelConfig.apiUrl + endUri;\r\n    }\r\n\r\n    protected createHttpMethod(command: DeleteModelStateCommand): \"DELETE\" | \"POST\" {\r\n        return command.id ? \"DELETE\" : \"POST\";\r\n    }\r\n\r\n}","import { Reducer } from '../../../state/interfaces/reducer.interface';\r\nimport { _deleteModelWithChildren } from '../../helpers/delete-model-with-children.helper';\r\nimport { ModelStateConfig } from '../../model-state.config';\r\nimport { DeleteModelActionId, DeleteModelStateCommand } from './delete-model-action.const';\r\n\r\nexport const DeleteModelReducer: Reducer<any> = {\r\n    actionId: DeleteModelActionId,\r\n    reducerFn: (state: any, action: DeleteModelStateCommand) => _deleteModelWithChildren(state, action.stateProp, action),\r\n    stateProperties: _statePropertiesGetter\r\n}\r\n\r\nfunction _statePropertiesGetter(command: DeleteModelStateCommand): string[]{\r\n    const modelConfig = ModelStateConfig.get(command.stateProp);\r\n\r\n    let stateProps: any[] = [command.stateProp];\r\n\r\n    if(modelConfig.children) \r\n        stateProps = stateProps.concat(modelConfig.children);\r\n\r\n    return stateProps;\r\n}","import { _convertArrayToObject } from 'src/app/shared-app/helpers/array/convert-array-to-object.helper';\r\nimport { _filter } from 'src/app/shared-app/helpers/array/filter.helper';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { ModelState } from '../interfaces/model-state.interface';\r\nimport { ModelStateConfig } from '../model-state.config';\r\n\r\nexport function _deleteModelWithChildren<TState>(\r\n  state: TState, \r\n  stateProp: Prop<ModelState>, \r\n  cfg: {id?: string, ids?: string[]}\r\n): Partial<TState>{\r\n\r\n  if(!cfg.id && !cfg.ids) console.error(\"deleteEntityChildren config requires either id or ids property set.\")       \r\n  \r\n  let filterFactory: (key: string) => (x: Object) => boolean;\r\n  if(cfg.id) \r\n    filterFactory = (key: string) => (x: Object) => x[key] !== cfg.id;  \r\n  else if(cfg.ids) {\r\n    const idMap = _convertArrayToObject<string>(cfg.ids);\r\n    filterFactory = (key: string) => (x: Object) => idMap[x[key]] === undefined;\r\n  }\r\n\r\n  const modelCfg = ModelStateConfig.get(stateProp);\r\n  const newState = {};\r\n\r\n  newState[stateProp] = \r\n    _filter(state[stateProp], filterFactory(modelCfg.identifier));\r\n\r\n  if(modelCfg.children?.length)\r\n    for(var childProp of modelCfg.children)\r\n      newState[childProp] = \r\n        _filter(state[childProp], filterFactory(modelCfg.foreignKey));\r\n\r\n  return newState;\r\n\r\n}","import { ApiUrl } from 'src/app/core/api-url.enum'\r\nimport { ModelState } from '../../interfaces'\r\n\r\nexport const MailApiUrlMap: { [key in keyof Partial<ModelState>]: string } = {\r\n    missionImages: `${ApiUrl.MissionImage}/SendImages`,\r\n    missionDocuments: `${ApiUrl.MissionDocument}/SendDocuments`,\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { mergeMap } from 'rxjs/operators';\r\nimport { ApiService } from 'src/app/core/services/api.service';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\nimport { Effect } from 'src/app/state/interfaces/effect.interface';\r\nimport { listenTo } from 'src/app/state/operators/listen-to.operator';\r\nimport { DispatchedAction } from '../../../state/action-dispatcher';\r\nimport { MailApiUrlMap } from './mail-api-url.map';\r\nimport { MailModelsActionId, MailModelsStateCommand } from './mail-models-state-command.interface';\r\n\r\n@Injectable()\r\nexport class MailModelsHttpEffect implements Effect<MailModelsStateCommand>{\r\n\r\n    constructor(private apiService: ApiService){}\r\n    \r\n    handle$(actions$: Observable<DispatchedAction<MailModelsStateCommand>>): Observable<StateAction> {\r\n        return actions$.pipe(\r\n            listenTo([MailModelsActionId]),\r\n            mergeMap(({action}) => \r\n                this.apiService.post(MailApiUrlMap[action.stateProp], {ids: action.ids, toEmail: action.toEmail})),\r\n        )\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ModelFile } from 'src/app/core/models';\r\nimport { HttpCommand, HttpActionId } from 'src/app/core/services/http/state/http.effect';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\nimport { Effect } from 'src/app/state/interfaces/effect.interface';\r\nimport { listenTo } from 'src/app/state/operators/listen-to.operator';\r\nimport { DispatchedAction } from '../../../state/action-dispatcher';\r\nimport { SaveModelHttpEffect } from '../save-model/save-model.http.effect';\r\nimport { SaveModelFileActionId, SaveModelFileStateCommand } from './save-model-file-action.const';\r\n\r\n@Injectable()\r\nexport class SaveModelFileHttpEffect extends SaveModelHttpEffect \r\n    implements Effect<SaveModelFileStateCommand<ModelFile>>{\r\n\r\n    constructor(){ super() }\r\n\r\n    handle$(actions$: Observable<DispatchedAction<SaveModelFileStateCommand<ModelFile>>>): Observable<StateAction> {\r\n        return actions$.pipe(\r\n            listenTo([SaveModelFileActionId]),\r\n            map(x => { return <HttpCommand>{\r\n                actionId: HttpActionId, propagate: true,\r\n                request: this.createHttpRequest(x.action),\r\n                stateSnapshot: x.stateSnapshot\r\n            }}), \r\n        )\r\n    }\r\n\r\n    protected createHttpBody(command: SaveModelFileStateCommand<ModelFile>): FormData {\r\n        const body: FormData = new FormData();   \r\n        const file = command.fileWrapper.modifiedFile;\r\n        if(file) body.append(\"files\", file, file.name);\r\n        body.append(\"command\", JSON.stringify(command.entity));\r\n        return body;\r\n    }\r\n\r\n}","import { ModelFile } from 'src/app/core/models';\r\nimport { Reducer } from '../../../state/interfaces/reducer.interface';\r\nimport { SaveModelReducer } from '../save-model/save-model.reducer';\r\nimport { SaveModelFileActionId, SaveModelFileStateCommand } from './save-model-file-action.const';\r\n\r\nexport const SaveModelFileReducer: Reducer<any> = {\r\n    actionId: SaveModelFileActionId,\r\n    reducerFn: _reducerFn,\r\n    stateProperties: SaveModelReducer.stateProperties\r\n}\r\n\r\nfunction _reducerFn(state: any, command: SaveModelFileStateCommand<ModelFile>): Partial<any>{  \r\n\r\n    command.entity = {\r\n        ...command.entity, \r\n        fileName: command.fileWrapper?.modifiedFile?.name,\r\n        temp_localFileUrl: URL.createObjectURL(command.fileWrapper?.modifiedFile)\r\n    }; \r\n\r\n    return SaveModelReducer.reducerFn(state, command);       \r\n}","import { Provider } from '@angular/core';\r\nimport { STORE_EFFECTS, STORE_REDUCERS } from 'src/app/state/injection-tokens';\r\nimport { DeleteModelHttpEffect } from './delete-model/delete-model.http.effect';\r\nimport { DeleteModelReducer } from './delete-model/delete-model.reducer';\r\nimport { MailModelsHttpEffect } from './mail-models/mail-models.http.effect';\r\nimport { SaveModelFileHttpEffect } from './save-model-file/save-model-file.http.effect';\r\nimport { SaveModelFileReducer } from './save-model-file/save-model-file.reducer';\r\nimport { SaveModelHttpEffect } from './save-model/save-model.http.effect';\r\nimport { SaveModelReducer } from './save-model/save-model.reducer';\r\n\r\nexport const SaveModelProviders: Provider[] = [\r\n    {provide: STORE_EFFECTS, useClass: SaveModelHttpEffect, multi: true},\r\n    {provide: STORE_REDUCERS, useValue: SaveModelReducer, multi: true},\r\n]\r\n\r\nexport const SaveModelFileProviders: Provider[] = [\r\n    {provide: STORE_EFFECTS, useClass: SaveModelFileHttpEffect, multi: true},\r\n    {provide: STORE_REDUCERS, useValue: SaveModelFileReducer, multi: true},\r\n]\r\n\r\nexport const DeleteModelProviders: Provider[] = [\r\n    {provide: STORE_EFFECTS, useClass: DeleteModelHttpEffect, multi: true},\r\n    {provide: STORE_REDUCERS, useValue: DeleteModelReducer, multi: true},\r\n]\r\n\r\nexport const MailModelsProviders: Provider[] = [\r\n    {provide: STORE_EFFECTS, useClass: MailModelsHttpEffect, multi: true},\r\n]\r\n","import { Model } from 'src/app/core/models/base-entity.interface';\r\nimport { _filter } from 'src/app/shared-app/helpers/array/filter.helper';\r\nimport { _find } from 'src/app/shared-app/helpers/array/find.helper';\r\nimport { ModelState } from '../interfaces/model-state.interface';\r\nimport { ModelStateConfig } from '../model-state.config';\r\nimport { GetWithRelationsConfig } from './get-with-relations.config';\r\n\r\nexport function _getWithRelations<TModel extends Model>( \r\n    state: Partial<ModelState>,\r\n    cfg: GetWithRelationsConfig,\r\n    id: any, \r\n): TModel{\r\n    const modelCfg = ModelStateConfig.get<TModel>(cfg.modelProp); \r\n\r\n    const modelState = state[cfg.modelProp] as TModel[];\r\n    if(!modelState || modelState.length == 0) return null;\r\n\r\n    let entity = _find(modelState, id, modelCfg.identifier);\r\n    \r\n    if(!entity) return entity;\r\n\r\n    for(const fkStateProp of cfg.includedForeignProps){\r\n        const fkPropConfig = ModelStateConfig.get(fkStateProp);\r\n        entity[fkPropConfig.foreignProp] = //Set object prop in detail prop equals to object with ID = fk id\r\n            _find<any>(state[fkStateProp], entity[fkPropConfig.foreignKey], fkPropConfig.identifier);\r\n    }\r\n\r\n    for(const childStateProp of cfg.includedChildProps){\r\n        entity[childStateProp] = //Set object prop in detail prop equals to object with ID = fk id\r\n            _filter<any>(state[childStateProp], (x) => x[modelCfg.foreignKey] === id);\r\n    }\r\n\r\n    return entity;\r\n}","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-selectable-card',\r\n  templateUrl: './selectable-card.component.html',\r\n  styleUrls: ['./selectable-card.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class SelectableCardComponent {\r\n\r\n  @Input() selectedText: string;\r\n  @Input() selectedIcon: string;\r\n  @Input() isSelected: boolean = false;\r\n  \r\n  @Output() selected = new EventEmitter<boolean>()\r\n\r\n  constructor() { }\r\n\r\n  toggleSelection = () => {\r\n    this.isSelected = !this.isSelected;\r\n    this.selected.emit(this.isSelected);\r\n  };\r\n  \r\n}\r\n","<div class=\"container\" matRipple\r\n    (press)=\"toggleSelection()\">\r\n\r\n    <ng-content>\r\n\r\n    </ng-content>\r\n\r\n    <div class=\"overlay\" fxLayout=\"column\" fxLayoutAlign=\"center center\"\r\n        [style.opacity]=\"isSelected ? .65:0\">\r\n        <mat-icon>{{ selectedIcon }}</mat-icon>\r\n        <span class=\"mat-body-strong\">{{ selectedText }}</span>\r\n    </div>\r\n\r\n</div>","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({name: 'arrayslice'})\r\n\r\n//Slices items up and grabs n'th index based on rowNr from each slice. \r\n//Used to keep items in order when displaying mulitple columns.\r\nexport class ArraySlicePipe implements PipeTransform { \r\n    transform(items: any[], rowNr: number, totalRows: number): any {\r\n        let iterations = Math.ceil(items.length / totalRows);\r\n        let rowItems = [];\r\n        for(let i = 0; i < iterations;i++) //Grabs every n'th item,\r\n        {\r\n            let sliced = items.slice(i*totalRows, (i+1)*totalRows);\r\n            if(sliced.length >= rowNr) rowItems.push(sliced[rowNr - 1]);\r\n        }\r\n        return rowItems;\r\n    }\r\n}\r\n","<div class=\"entity-row\">\r\n    <div class=\"entity-column\" *ngFor=\"let i of totalRows | arrayFromNumber\">\r\n        <app-selectable-card \r\n            *ngFor=\"let selectable of (selectableEntities$ | async) | arrayslice: i:totalRows;let i = index;trackBy: trackByFn\"\r\n            [selectedText]=\"selectedText\" selectedIcon=\"check_circle\"\r\n            [isSelected]=\"selectable.selected\" \r\n            (selected)=\"toggleSelect(selectable)\"\r\n            (click)=\"onItemClick(selectable.entity)\">\r\n\r\n            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: selectable.entity}\"></ng-container>\r\n\r\n        </app-selectable-card>\r\n    </div>\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, TemplateRef } from \"@angular/core\";\r\nimport { skip, takeUntil } from \"rxjs/operators\";\r\nimport { WithUnsubscribe } from 'src/app/shared-app/mixins/with-unsubscribe.mixin';\r\nimport { SelectableEntity } from 'src/app/shared/interfaces';\r\nimport { SelectableListPresenter } from './selectable-list.presenter';\r\n\r\n@Component({\r\n  selector: 'app-selectable-list',\r\n  templateUrl: './selectable-list.component.html',\r\n  styleUrls: ['./selectable-list.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers:[SelectableListPresenter]\r\n})\r\nexport class SelectableListComponent extends WithUnsubscribe() {\r\n    @Input('entities')\r\n    set entities(value: any[]) {this.selectableListPresenter.addEntities(value)}\r\n\r\n    private _identifier: string;\r\n    @Input('identifier') \r\n    set identifier(value: string) {\r\n      this._identifier = value;\r\n      this.selectableListPresenter.setIdentifier(value)\r\n    }\r\n\r\n    @Input() selectedText: string;\r\n    @Input() selectedIcon: string;\r\n    @Input() itemTemplate: TemplateRef<any>;\r\n    @Input() totalRows: number = 2;  \r\n    @Output() selectionChanged = new EventEmitter<string[]>();\r\n    @Output() itemClicked = new EventEmitter<any>();\r\n  \r\n    selectableEntities$ = this.selectableListPresenter.selectableEntities$;\r\n\r\n    clickDisabled: boolean = false;\r\n\r\n    constructor(private selectableListPresenter: SelectableListPresenter<any>) {\r\n      super();\r\n    }\r\n    \r\n    ngOnInit(): void {\r\n        this.selectableListPresenter.selectedIds$.pipe(\r\n            skip(1),\r\n            takeUntil(this.unsubscribe)\r\n        ).subscribe(x => this.selectionChanged.emit(x))\r\n    }\r\n\r\n    onItemClick = (item: any): void => {\r\n      if(this.clickDisabled || this.selectableListPresenter.isEntitySelected(item[this._identifier] || item))\r\n        return;\r\n  \r\n      this.itemClicked.emit(item)\r\n    }\r\n\r\n    toggleSelect(selectable: SelectableEntity<any>) {\r\n      this.clickDisabled = true;\r\n      this.selectableListPresenter.toggleEntity(selectable.entity[this._identifier] || selectable.entity)\r\n      setTimeout(() => (this.clickDisabled = false), 500);\r\n    }\r\n\r\n    trackByFn = (index: number, selectable: SelectableEntity<any>): string => \r\n      selectable.entity[this._identifier];\r\n    \r\n    clearSelections = () => this.selectableListPresenter.addSelections([]);\r\n  \r\n  }\r\n  ","import { Prop } from '../../prop.type';\r\n\r\nexport function _find<T>(array: T[], value: any, identifier: Prop<T>){\r\n    if(!array || array.length == 0 || !value) return;\r\n\r\n    for(let i = 0; i < array.length; i++){\r\n      const obj = array[i];\r\n      if(obj[identifier] === value) return {...obj};   \r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { SelectableEntity } from 'src/app/shared/interfaces';\r\n\r\n@Injectable()\r\nexport class SelectableListPresenter<T> {\r\n\r\n    private selectedIdsSubject = new BehaviorSubject<any[]>([]);\r\n    selectedIds$ = this.selectedIdsSubject.asObservable();\r\n\r\n    private entitiesSubject =  new BehaviorSubject<T[]>([]);\r\n    private entities$ = this.entitiesSubject.asObservable();\r\n\r\n    selectableEntities$: Observable<SelectableEntity<T>[]> = combineLatest([this.entities$, this.selectedIds$]).pipe(\r\n        map(([entities, selectedIds]) => this.getSelectableEntities(entities, selectedIds))\r\n    )\r\n\r\n    private identifier:string; \r\n\r\n    constructor(){}\r\n    \r\n    get entities(){\r\n        return [...this.entitiesSubject.value]\r\n    }\r\n\r\n    setIdentifier(identifier: string){ this.identifier = identifier; }\r\n\r\n    addEntities(entities: T[]){\r\n        this.entitiesSubject.next(entities);\r\n    }\r\n\r\n    addSelections(ids: any[]){\r\n        this.selectedIdsSubject.next(ids);\r\n    }\r\n\r\n    toggleEntity(id: any){\r\n        let ids = [...this.selectedIdsSubject.value];\r\n        let index = ids.findIndex(x => x == id);\r\n        if(index == -1) ids.push(id); //if not selected\r\n        else ids.splice(index, 1);\r\n        this.selectedIdsSubject.next(ids);\r\n    }\r\n\r\n    isEntitySelected = (id:any) => this.selectedIdsSubject.value.includes(id);\r\n    \r\n    private getSelectableEntities(entities:T[], selectedIds:any[]): SelectableEntity<T>[]{\r\n        let result = [];\r\n        for(let i = 0; i < entities.length; i++){\r\n            let isSelected = selectedIds.includes(entities[i][this.identifier]);\r\n            result.push({entity: entities[i], selected:isSelected})\r\n        }\r\n        return result;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { MatDialog, MatDialogRef } from '@angular/material/dialog';\r\nimport { ConfirmDialogComponent, ConfirmDialogConfig } from 'src/app/shared/components';\r\n\r\n@Injectable({ providedIn: \"any\" })\r\nexport class ConfirmDialogService {\r\n\r\n  constructor(private matDialog: MatDialog) {}\r\n\r\n  open(config: ConfirmDialogConfig): MatDialogRef<ConfirmDialogComponent, boolean> {\r\n    const dialogRef = this.matDialog.open(ConfirmDialogComponent, { data: config });\r\n    \r\n    if(config.cancelCallback || config.confirmCallback)\r\n        dialogRef.afterClosed().subscribe(confirmed => {\r\n            if(confirmed && config.confirmCallback) config.confirmCallback();\r\n            else if(!confirmed && config.cancelCallback) config.cancelCallback();\r\n        })\r\n\r\n    return dialogRef;\r\n  }  \r\n}","import { Model } from 'src/app/core/models';\r\nimport { _convertArrayToObject } from 'src/app/shared-app/helpers/array/convert-array-to-object.helper';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { ModelState } from '../interfaces/model-state.interface';\r\nimport { ModelConfig, ModelStateConfig } from '../model-state.config';\r\n\r\ntype RelationInclude = Prop<ModelState>[] | \"all\";\r\n\r\nexport class GetWithRelationsConfig {\r\n\r\n  private propConfig: ModelConfig<Model>;\r\n\r\n  includedForeignProps: Prop<ModelState>[];\r\n  includedChildProps: Prop<ModelState>[];\r\n  includedProps: Prop<ModelState>[];\r\n\r\n  constructor(\r\n    readonly modelProp: Prop<ModelState>,\r\n    children?: RelationInclude,\r\n    foreigns?: RelationInclude\r\n  ) {\r\n\r\n    this.propConfig = ModelStateConfig.get(this.modelProp);\r\n\r\n    const fkProps = this.propConfig?.foreigns;\r\n    this.includedForeignProps = \r\n      foreigns === \"all\" ? (fkProps || []) : this.getProps(foreigns, fkProps)\r\n\r\n    const childProps = this.propConfig?.children\r\n    this.includedChildProps = \r\n      children === \"all\" ? (childProps || []) : this.getProps(children, childProps) \r\n\r\n    this.includedProps = [modelProp, ...this.includedChildProps, ...this.includedForeignProps]\r\n  }\r\n\r\n  private getProps(includes: Prop<ModelState>[], props: Prop<ModelState>[]): Prop<ModelState>[]{  \r\n    if(!props || !includes?.length) return []; \r\n    let included: Prop<ModelState>[] = []; \r\n    const propMap = _convertArrayToObject(props);\r\n    for(const include of includes){\r\n      if(propMap[include]) included.push(include);\r\n      else \r\n        console.error(`'${include}' not registered as a relation in model config for '${this.modelProp}'`)\r\n    }\r\n    return included;    \r\n  }\r\n}\r\n\r\n","\r\nimport { Model } from 'src/app/core/models/base-entity.interface';\r\nimport { SaveAction } from 'src/app/shared/save-action.interface';\r\nimport { ModelStateCommand } from '../interfaces/model-state-command.interface';\r\n\r\nexport const SaveModelActionId = \"SAVE_MODEL\";\r\n\r\nexport interface SaveModelStateCommand<TModel extends Model> extends ModelStateCommand{\r\n    saveAction?: SaveAction;\r\n    entity: TModel;\r\n    apiUrlOverride?: string;\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Model } from 'src/app/core/models';\r\nimport { HttpRequest } from 'src/app/core/services/http/interfaces';\r\nimport { HttpActionId, HttpCommand } from 'src/app/core/services/http/state/http.effect';\r\nimport { ActionType } from 'src/app/shared-app/enums';\r\nimport { translations } from 'src/app/shared/translations';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\nimport { Effect } from 'src/app/state/interfaces/effect.interface';\r\nimport { listenTo } from 'src/app/state/operators/listen-to.operator';\r\nimport { DispatchedAction } from '../../../state/action-dispatcher';\r\nimport { ModelConfig, ModelStateConfig } from '../../model-state.config';\r\nimport { SaveModelActionId, SaveModelStateCommand } from './save-model-action.const';\r\n\r\n@Injectable()\r\nexport class SaveModelHttpEffect implements Effect<SaveModelStateCommand<Model>> {\r\n\r\n    constructor(){ }\r\n\r\n    handle$(actions$: Observable<DispatchedAction<SaveModelStateCommand<Model>>>): Observable<StateAction> {\r\n        return actions$.pipe(\r\n            listenTo([SaveModelActionId]),\r\n            map(x => { return <HttpCommand>{\r\n                actionId: HttpActionId, propagate: true,\r\n                request: this.createHttpRequest(x.action),\r\n                stateSnapshot: x.stateSnapshot\r\n            }}), \r\n        )\r\n    }\r\n\r\n    protected createHttpRequest(command: SaveModelStateCommand<Model>): HttpRequest{\r\n        const modelConfig = ModelStateConfig.get(command.stateProp);\r\n        if(!modelConfig) console.error(`No model config for property ${command.stateProp}`);\r\n\r\n        return {\r\n            apiUrl: command.apiUrlOverride || this.createApiUrl(command, modelConfig),\r\n            body: this.createHttpBody(command),\r\n            method: this.createHttpMethod(command),\r\n            cancelMessage: this.createCancelMessage(command, modelConfig)\r\n        }\r\n    }\r\n\r\n    protected createCancelMessage(command: SaveModelStateCommand<Model>, modelConfig: ModelConfig<Model>): string{\r\n        const saveWord = command.saveAction === ActionType.Update ? \"Oppdatering\" : \"Oppretting\";\r\n        const entityWord = translations[modelConfig.foreignProp?.toLowerCase()].toLowerCase();\r\n        const displayPropWord = translations[modelConfig.displayProp?.toLowerCase()].toLowerCase();\r\n        const displayPropValue = command.entity[modelConfig.displayProp];\r\n        return `${saveWord} av ${entityWord} med ${displayPropWord} ${displayPropValue} er reversert!`;\r\n    }\r\n  \r\n    protected createHttpBody(command: SaveModelStateCommand<Model>): any {\r\n        return command.entity;\r\n    }\r\n\r\n    protected createApiUrl(command: SaveModelStateCommand<Model>, modelConfig: ModelConfig<Model>): string {\r\n        const identfifier = modelConfig.identifier;\r\n        const endUri = (command.saveAction === ActionType.Update) ? `/${command.entity[identfifier]}` : \"\";\r\n        return modelConfig.apiUrl + endUri;\r\n    }\r\n\r\n    protected createHttpMethod(command: SaveModelStateCommand<Model>): \"PUT\" | \"POST\" {\r\n        return  command.saveAction === ActionType.Update ? \"PUT\" : \"POST\";\r\n    }\r\n\r\n}","import { ModelFile } from 'src/app/core/models/base-entity-file.interface';\r\nimport { ModelFileWrapper } from '../../model-file.wrapper';\r\nimport { SaveModelStateCommand } from '../save-model/save-model-action.const';\r\n\r\nexport const SaveModelFileActionId = \"SAVE_MODEL_FILE\";\r\n\r\nexport interface SaveModelFileStateCommand<TModel extends ModelFile> extends SaveModelStateCommand<TModel>{\r\n    fileWrapper: ModelFileWrapper;\r\n}\r\n","export * from './model-form.service';\r\nexport * from './interfaces/model-form-to-state-command-adapter.interface';\r\nexport * from './interfaces/model-form-config.interface'\r\nexport * from './interfaces/model-form-view-config.interface'","import { NgModule } from '@angular/core';\r\nimport { ModelFormService } from '.';\r\nimport { ModelFormFacade } from './model-form.facade';\r\n\r\n@NgModule({\r\n    providers: [\r\n        ModelFormService,\r\n        ModelFormFacade,\r\n    ]\r\n  })\r\n  export class ModelFormModule {  }\r\n  ","import { ModelStateCommand } from '../interfaces/model-state-command.interface';\r\n\r\nexport const DeleteModelActionId = \"DELETE_MODEL\";\r\n\r\nexport interface DeleteModelStateCommand extends ModelStateCommand{\r\n    id?: any;\r\n    ids?: any[];\r\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { BehaviorSubject, combineLatest, Observable } from 'rxjs';\r\nimport { filter, map, shareReplay, take } from 'rxjs/operators';\r\nimport { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { ModelState } from 'src/app/model/interfaces';\r\nimport { ActionType } from 'src/app/shared-app/enums';\r\nimport { FormComponent } from '../../form';\r\nimport { SaveAction } from '../../save-action.interface';\r\nimport { FormToSaveModelStateCommandAdapter } from '../adapters/form-to-save-model-state-command.adapter';\r\nimport { ModelFormConfig } from '../interfaces/model-form-config.interface';\r\nimport { SaveModelFormState } from '../interfaces/model-form-to-state-command-adapter.interface';\r\nimport { ModelFormFacade } from '../model-form.facade';\r\n\r\n@Component({\r\n    selector: 'app-model-form',\r\n    template: `\r\n      <app-dynamic-form \r\n        [config]=\"formConfig$ | async\" \r\n        [formState]=\"formState$ | async\" \r\n        (formSubmitted)=\"$event ? onSubmit($event) : onCancel()\">\r\n      </app-dynamic-form>\r\n    `,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class ModelFormComponent implements FormComponent<ModelFormConfig<any, any>, SaveModelFormState<Partial<ModelState>>, SaveAction>{\r\n    @Output() formSubmitted = new EventEmitter<SaveAction>()\r\n\r\n    @Input() config: ModelFormConfig<any, any>;\r\n   \r\n    @Input('formState') \r\n    set formState(value: Object) {\r\n      this.formStateSubject.next(value)\r\n    }\r\n  \r\n    private formStateSubject = new BehaviorSubject<SaveModelFormState<Partial<ModelState>>>(null)\r\n\r\n    formState$: Observable<SaveModelFormState<Partial<ModelState>>>;\r\n    formConfig$: Observable<DynamicForm<any, SaveModelFormState<Partial<ModelState>>>>;\r\n\r\n    private isCreateForm: boolean = false;\r\n  \r\n    constructor(private facade: ModelFormFacade) {}\r\n  \r\n    ngOnInit(): void {   \r\n      if(!this.config.entityId) this.isCreateForm = true;\r\n\r\n      this.formState$ = combineLatest([\r\n        this.formStateSubject.asObservable(),\r\n        this.facade.getFormState$(this.config.stateProp)\r\n      ]).pipe(map(([inputFormState, modelFormState]) => {\r\n        return {...modelFormState, ...inputFormState}\r\n      }), shareReplay(1));\r\n\r\n      this.formConfig$ = this.formState$.pipe(filter(x => x != null),take(1), \r\n        map(state => this.getFormConfig(state.options))\r\n      )\r\n\r\n    }\r\n\r\n    onSubmit(result: any): void{   \r\n      const saveAction = this.isCreateForm ? ActionType.Create : ActionType.Update;\r\n      this.formSubmitted.emit(saveAction);\r\n      const adapter = this.config.adapter || FormToSaveModelStateCommandAdapter\r\n\r\n      this.formState$.pipe(take(1)).subscribe(state => {\r\n        const stateCommand = new adapter({\r\n          formState: result, \r\n          options: state.options,\r\n          stateProp: this.config.stateProp, \r\n          saveAction, \r\n        })\r\n\r\n        this.facade.save(stateCommand); \r\n      })    \r\n    }\r\n\r\n    onCancel = (): void => this.formSubmitted.emit(null); \r\n\r\n    private getFormConfig(state: Partial<ModelState>): DynamicForm<any, SaveModelFormState<Partial<ModelState>>>{\r\n      const dynamicForm = this.config.dynamicForm;\r\n      if(dynamicForm.initialValue) return this.config.dynamicForm;\r\n      return {\r\n        ...dynamicForm, \r\n        initialValue:  this.facade.getModelWithForeigns(this.config.entityId, this.config.stateProp, state)\r\n      }\r\n    }\r\n}\r\n  ","import { Injectable } from \"@angular/core\";\r\nimport { MatBottomSheet, MatBottomSheetRef } from \"@angular/material/bottom-sheet\";\r\nimport { Router } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\nimport { ConfirmDialogService } from 'src/app/core/services/ui/confirm-dialog.service';\r\nimport { ModelState } from 'src/app/model/interfaces';\r\nimport { ModelStateConfig } from 'src/app/model/model-state.config';\r\nimport { DeleteModelStateCommand, DeleteModelActionId } from 'src/app/model/state/delete-model/delete-model-action.const';\r\nimport { ActionType } from 'src/app/shared-app/enums';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { ModelFormComponent } from 'src/app/shared/model-form/components/model-form.component';\r\nimport { translations } from 'src/app/shared/translations';\r\nimport { Store } from 'src/app/state/store';\r\nimport { FormSheetWrapperComponent } from '../form/form-sheet-wrapper.component';\r\nimport { FormSheetWrapperConfig } from '../form/interfaces';\r\nimport { ModelFormConfig } from './interfaces/model-form-config.interface';\r\nimport { SaveModelFormState } from './interfaces/model-form-to-state-command-adapter.interface';\r\n\r\nexport interface ModelFormServiceConfig<TForm, TFormState extends  SaveModelFormState<Partial<ModelState>>> {\r\n  formConfig: ModelFormConfig<TForm, TFormState>,  \r\n  formState?: TFormState | Observable<TFormState>,\r\n  onSaveUri?: string, \r\n  onDeleteUri?: string, \r\n  deleteDisabled?: boolean, \r\n  customTitle?: string, \r\n  submitCallback?: (val: any) => void\r\n}\r\n\r\ntype State = SaveModelFormState<Partial<ModelState>>;\r\n\r\n@Injectable()\r\nexport class ModelFormService {\r\n\r\n  constructor(\r\n    private matBottomSheet: MatBottomSheet,\r\n    private router: Router,\r\n    private confirmService: ConfirmDialogService,  \r\n    private store: Store<ModelState>,\r\n  ) {}\r\n\r\n  open<TForm>(\r\n    config: ModelFormServiceConfig<TForm, State>\r\n  ): MatBottomSheetRef<FormSheetWrapperComponent, ActionType> {\r\n    const ref =  this.matBottomSheet.open(FormSheetWrapperComponent, { \r\n      data: <FormSheetWrapperConfig<ModelFormConfig<TForm, State>, State, any>>{\r\n        \r\n        formConfig: config.formConfig, submitCallback: config.submitCallback,\r\n        formComponent: ModelFormComponent,   \r\n        formState$: config.formState instanceof Observable ? config.formState : of(config.formState),\r\n\r\n        navConfig: {\r\n          title: config.customTitle || \r\n            `${config.formConfig.entityId ? \"Oppdater\" : \"Registrer\"} \r\n             ${this.translateStateProp(config.formConfig.stateProp)}`,      \r\n          backFn: () => this.close(null, ref),\r\n          backIcon: \"close\",\r\n          buttons: [\r\n              (config.deleteDisabled || !(config.formConfig.entityId)) ? null : \r\n                {icon: 'delete_forever', color: \"warn\", callback: () => this.confirmDelete(config.formConfig, config.onDeleteUri, ref)}\r\n          ]\r\n        },\r\n      } \r\n    });\r\n\r\n    if(config.onSaveUri)\r\n      ref.afterDismissed().subscribe(x => this.router.navigate([config.onSaveUri]))\r\n\r\n    return ref;\r\n  }\r\n\r\n  close = (res: ActionType, ref: MatBottomSheetRef<any, any>, url?: string) => {\r\n    if(url) this.router.navigate([url]);\r\n    ref.dismiss(res);\r\n  } \r\n\r\n  private translateStateProp = (prop: Prop<ModelState>): string => \r\n    translations[ModelStateConfig.get(prop).foreignProp?.toLowerCase()]?.toLowerCase();\r\n\r\n  private confirmDelete = (formConfig: ModelFormConfig<any, any>, deleteUrl: string, ref: MatBottomSheetRef<any, any>) => { \r\n    const translatedProp = this.translateStateProp(formConfig.stateProp)\r\n    this.confirmService.open({\r\n        title: `Slett ${translatedProp}?`, \r\n        message: `Bekreft at du ønsker å slette ${translatedProp} med id \"${formConfig.entityId}\"`, \r\n        confirmText: 'Slett',\r\n        confirmCallback: () => this.deleteEntity(formConfig, deleteUrl, ref)\r\n    });\r\n  }\r\n\r\n  private deleteEntity = (formConfig: ModelFormConfig<any, any>, deleteUrl: string, ref: MatBottomSheetRef<any, any>) => {\r\n      this.close(ActionType.Delete, ref, deleteUrl);\r\n\r\n      this.store.dispatch<DeleteModelStateCommand>({\r\n          stateProp: formConfig.stateProp, \r\n          actionId: DeleteModelActionId, \r\n          id: formConfig.entityId\r\n      });\r\n  };\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { GetWithRelationsConfig } from 'src/app/model/helpers/get-with-relations.config';\r\nimport { _getWithRelations } from 'src/app/model/helpers/get-with-relations.helper';\r\nimport { ModelState } from 'src/app/model/interfaces';\r\nimport { ModelStateConfig } from 'src/app/model/model-state.config';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\nimport { Store } from 'src/app/state/store';\r\nimport { Model } from '../../core/models';\r\nimport { SaveModelFormState } from './interfaces/model-form-to-state-command-adapter.interface';\r\n\r\n@Injectable()\r\nexport class ModelFormFacade {\r\n\r\n  constructor(private store: Store<ModelState>) {}\r\n\r\n  getFormState$(modelProp: Prop<ModelState>): Observable<SaveModelFormState<Partial<ModelState>>>{\r\n    const modelCfg = ModelStateConfig.get(modelProp);\r\n    return this.store.select$([...(modelCfg.foreigns || []), modelProp], false).pipe(\r\n      map(state => { return {options: state} })\r\n    )\r\n  }\r\n\r\n  getModelWithForeigns(id: string, modelProp: Prop<ModelState>, fkState: Partial<ModelState>): Model {\r\n    const state = {...fkState};\r\n    state[modelProp] = this.store.selectProperty(modelProp, false)\r\n    const relationCfg = new GetWithRelationsConfig(modelProp, null, 'all');\r\n    return _getWithRelations<Model>(state, relationCfg, id);\r\n  }\r\n\r\n  save(action: StateAction): void {\r\n    this.store.dispatch(action);\r\n  }\r\n    \r\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'arrayFromNumber'\n})\nexport class ArrayFromNumberPipe implements PipeTransform {\n\n  transform(value: number, includeZero: boolean = false): any {\n    let arr = [];\n    let i = includeZero ? 0 : 1;\n    for(i; i <= value; i++){\n      arr.push(i);\n    }\n    return arr;\n  }\n\n}\n","import { ModelStateCommand } from '../interfaces/model-state-command.interface';\r\n\r\nexport const MailModelsActionId = \"MAIL_MODELS\"\r\n\r\nexport interface MailModelsStateCommand extends ModelStateCommand {\r\n    ids: any[];\r\n    toEmail: string;\r\n}","import { Model } from 'src/app/core/models';\r\nimport { BaseFormToSaveModelStateCommandAdapter } from 'src/app/model/abstracts/base-form-to-save-model-state-command.adapter';\r\nimport { SaveModelStateCommand, SaveModelActionId } from 'src/app/model/state/save-model/save-model-action.const';\r\nimport { ModelFormToSaveModelInput } from '../interfaces/model-form-to-state-command-adapter.interface';\r\n\r\nexport class FormToSaveModelStateCommandAdapter<TModel extends Model> \r\n    extends BaseFormToSaveModelStateCommandAdapter<TModel, TModel>\r\n    implements SaveModelStateCommand<TModel> {\r\n\r\n    actionId: string = SaveModelActionId;\r\n\r\n    constructor(input: ModelFormToSaveModelInput<TModel>){\r\n        super(input);\r\n    } \r\n    \r\n    protected convertFormStateToEntity(): void{\r\n        this.entity = this.input.formState;\r\n    }\r\n}","export function _add<T>(array: T[], value: T): T[]{\r\n    if(!array || array.length == 0) return array;\r\n    let arr = array.slice();\r\n    arr.unshift(value);\r\n    return arr;\r\n}","import { Model } from 'src/app/core/models';\r\nimport { ActionType } from 'src/app/shared-app/enums';\r\nimport { _add } from 'src/app/shared-app/helpers/array/add.helper';\r\nimport { _update } from 'src/app/shared-app/helpers/array/update.helper';\r\nimport { Reducer } from '../../../state/interfaces/reducer.interface';\r\nimport { _modifyModelWithForeigns } from '../../helpers/modify-model-with-foreigns.helper';\r\nimport { ModelStateConfig } from '../../model-state.config';\r\nimport { SaveModelActionId, SaveModelStateCommand } from './save-model-action.const';\r\n\r\nexport const SaveModelReducer: Reducer<any> = {\r\n    actionId: SaveModelActionId,\r\n    reducerFn: _reducerFn,\r\n    stateProperties: _statePropertiesGetter\r\n}\r\n\r\nfunction _statePropertiesGetter(command: SaveModelStateCommand<Model>): string[]{\r\n    const stateProps: string[] = [command.stateProp];\r\n    const modelConfig = ModelStateConfig.get(command.stateProp); \r\n    if(modelConfig.foreigns)\r\n       for(const fkProp of modelConfig.foreigns){\r\n          const fkCfg = ModelStateConfig.get(fkProp as any);\r\n          if(command.entity[fkCfg.foreignProp]) stateProps.push(fkProp);\r\n       }\r\n\r\n    return stateProps;\r\n}\r\n\r\nfunction _reducerFn(state: any, command: SaveModelStateCommand<Model>): Partial<any>{  \r\n    const modelConfig = ModelStateConfig.get(command.stateProp); \r\n\r\n    command.entity.updatedAt = new Date().getTime();  \r\n\r\n    let modifyFn: (entity: Model, entities: Model[]) => void;\r\n\r\n    if(command.saveAction === ActionType.Update) \r\n        modifyFn = (entity: Model, entities: Model[]) =>  _update(entities, entity, modelConfig.identifier)\r\n    else \r\n        modifyFn = (entity: Model, entities: Model[]) =>  _add(entities, entity)\r\n\r\n    return _modifyModelWithForeigns(state, command.stateProp, command.entity, modifyFn)          \r\n}\r\n","import { _add } from 'src/app/shared-app/helpers/array/add.helper';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { ModelState } from '../interfaces/model-state.interface';\r\nimport { ModelStateConfig } from '../model-state.config';\r\n\r\nexport function _modifyModelWithForeigns<TState>(\r\n    state: TState, \r\n    stateProp: Prop<ModelState>, \r\n    entity: any, \r\n    entityFn: (entity: any, stateSlice: any) => any\r\n): Partial<TState>{\r\n\r\n    const propCfg = ModelStateConfig.get(stateProp);\r\n\r\n    for(var fkProp of propCfg.foreigns || []){\r\n        const fkPropConfig = ModelStateConfig.get(fkProp); //Key information about foreign prop\r\n        const foreignEntity = entity[fkPropConfig.foreignProp];\r\n        if(!foreignEntity) continue; //If no new entity, continue\r\n        const foreignEntityId = foreignEntity[fkPropConfig.identifier];\r\n        if(!foreignEntityId){ //No id on new entity? ignore and set null\r\n            console.error(`Entity from ${stateProp} has foreign property from ${fkProp} set with no ID`)\r\n            entity[fkPropConfig.foreignProp] = null;\r\n            continue\r\n        };\r\n        state[fkProp] = _add(state[fkProp], foreignEntity); //Add new fk entity\r\n        entity[fkPropConfig.foreignKey] = foreignEntityId; //Set foreign key on entity\r\n        entity[fkPropConfig.foreignProp] = null; //Remove foreign entity to prevent duplicate data    \r\n    }\r\n\r\n    state[stateProp] = entityFn(entity, state[stateProp]);\r\n\r\n    return state;\r\n}","export function _update<T>(array: T[], updatedObj: Partial<T>, identifier: string){\r\n    if(!array || array.length == 0) return array;\r\n    let arr = array.slice();\r\n    for(let i = 0; i < arr.length; i++){\r\n      let obj = arr[i];\r\n      if(obj[identifier] === updatedObj[identifier]){\r\n        arr[i] = {...Object.assign(obj, updatedObj)};\r\n        break;\r\n      }\r\n    }\r\n    return arr;\r\n}"],"sourceRoot":"webpack:///"}
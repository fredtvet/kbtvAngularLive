{"version":3,"sources":["./src/app/shared/translations.ts","./src/app/shared/components/abstracts/ag-grid-table.component.ts","./src/app/model/helpers/get-with-relations.config.ts","./src/app/model/state/save-model/save-model-action.const.ts","./src/app/model/state/save-model/save-model.http.effect.ts","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic/component-state-reducers.ts","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic.facade.ts","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic/default-state.const.ts","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic/timesheet-statistic-providers.const.ts","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic/timesheet-statistic-table/col-defs-factory.service.ts","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic/timesheet-statistic-table/timesheet-statistic-table.component.ts","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic/timesheet-statistic-table/timesheet-statistic-table.component.html","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic/timesheet-statistic.component.html","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic/timesheet-statistic.component.ts","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic-routing.module.ts","./src/app/timesheet-modules/timesheet-statistic/timesheet-statistic.module.ts","./src/app/shared-app/helpers/array/add.helper.ts","./src/app/model/state/save-model/save-model.reducer.ts","./src/app/model/helpers/modify-model-with-foreigns.helper.ts","./src/app/shared-app/helpers/array/update.helper.ts"],"names":["translations","id","name","phonenumber","address","user","title","content","createdat","createdby","filename","description","finished","username","firstname","lastname","email","role","none","year","month","weeknr","week","date","day","fullname","confirmedhours","openhours","password","status","starttime","endtime","totalhours","comment","timesheet","timesheetid","timesheets","mission","missionid","missions","employer","employerid","employers","documenttype","documenttypeid","documenttypes","missiondocument","missiondocumentid","missiondocuments","missionnote","missionnoteId","missionnotes","missiontype","missiontypeid","missiontypes","inboundemailpassword","inboundemailpasswordid","inboundemailpasswords","showall","currentweek","currentmonth","currentyear","custommonth","custom","open","confirmed","columnDefs","rowData","this","_config","value","initNgGrid","autoSizeGrid","cols","dataGrid","columnApi","getAllColumns","filter","x","getColId","autoSizeColumns","cfg","data","length","currentObject","record","hasSameObjectProps","addColDefs","obj1","obj2","objProps1","Object","keys","hasOwnProperty","AgGridTableComponent","modelProp","children","foreigns","propConfig","get","fkProps","includedForeignProps","getProps","childProps","includedChildProps","includedProps","includes","props","included","propMap","include","push","console","error","SaveModelActionId","handle$","actions$","pipe","actionId","propagate","request","createHttpRequest","action","stateSnapshot","command","modelConfig","stateProp","apiUrl","apiUrlOverride","createApiUrl","body","createHttpBody","method","createHttpMethod","cancelMessage","createCancelMessage","saveAction","foreignProp","toLowerCase","displayProp","entity","identifier","SaveModelHttpEffect","SetGroupByActionId","SetGroupByReducer","reducerFn","state","timesheetGroupBy","groupBy","summaryAggregator","store","componentStore","criteria$","selectProperty$","criteriaFormState$","select$","map","options","groupBy$","filteredTimesheets$","combineLatest","records","groupedTimesheets$","groupByType","tableConfig$","updateCriteria","timesheetCriteria","dispatch","updateGroupBy","takeUntil","unsubscribe","subscribe","selectProperty","TimesheetStatisticFacade","DefaultComponentState","Month","TimesheetStatisticProviders","provide","useValue","multi","datePipe","convertMonthIndex","params","transform","Date","setMonth","undefined","convertDate","convertTime","convertStatus","summaryColDefs","field","valueFormatter","timesheetColDefs","headerName","maxWidth","createColDefs","_createColDefs","object","colDefs","result","colDef","mergeDefaultColDef","genericColDef","sortable","ColDefsFactoryService","colDefsFactory","sample","isSummaryData","api","setPinnedBottomRowData","addSummaryBottomRow","addTimesheetBottomRow","openHrs","confirmedHrs","i","summary","openHours","confirmedHours","Math","round","fullName","totalHours","TimesheetStatisticTableComponent","routes","path","component","facade","formService","chipsFactory","partialVm$","criteria","activeCriteriaCount","dateRangePreset","criteriaChips","getCriteriaChips","navConfig","getNavConfig","navVm$","getGroupByChips","navVm","groupByChips","openTimesheetFilter","formConfig","initialValue","formState","submitCallback","val","exportAsCsv","statTable","exportDataAsCsv","processCellCallback","column","getColDef","Function","valueFormatterParams","node","addGroupBy","resetCriteriaProp","prop","buttons","icon","color","callback","createEnumSelectionChips","text","onClick","createCriteriaChips","TimesheetStatisticComponent","TimesheetStatisticRoutingModule","forChild","TimesheetStatisticModule","_add","array","arr","slice","unshift","SaveModelReducer","updatedAt","getTime","entityFn","propCfg","fkProp","fkPropConfig","foreignEntity","foreignEntityId","foreignKey","_modifyModelWithForeigns","entities","updatedObj","obj","assign","_update","stateProperties","stateProps","fkCfg"],"mappings":"8FAAA,kCAAO,IAAMA,EAA0C,CACrDC,GAAI,KACJC,KAAM,OACNC,YAAa,gBACbC,QAAS,UACTC,KAAM,SACNC,MAAO,SACPC,QAAS,UACTC,UAAW,YACXC,UAAW,eACXC,SAAU,QACVC,YAAa,cACbC,SAAU,SACVC,SAAU,aACVC,UAAW,UACXC,SAAU,YACVC,MAAO,QACPC,KAAM,QACNC,KAAM,QACNC,KAAM,QACNC,MAAO,WACPC,OAAQ,MACRC,KAAM,MACNC,KAAM,OACNC,IAAK,MACLC,SAAU,OACVC,eAAgB,iBAChBC,UAAW,gBACXC,SAAU,UACVC,OAAQ,SACRC,UAAW,WACXC,QAAS,UACTC,WAAY,QACZC,QAAS,YAETC,UAAW,OACXC,YAAa,OACbC,WAAY,QAEZC,QAAS,UACTC,UAAW,UACXC,SAAU,UAEVC,SAAU,gBACVC,WAAY,gBACZC,UAAW,iBAEXC,aAAc,eACdC,eAAgB,eAChBC,cAAe,gBAEfC,gBAAiB,WACjBC,kBAAmB,WACnBC,iBAAkB,aAElBC,YAAa,QACbC,cAAe,QACfC,aAAc,UAEdC,YAAa,eACbC,cAAe,eACfC,aAAc,gBAEdC,qBAAsB,eACtBC,uBAAwB,eACxBC,sBAAuB,eAEvBC,QAAS,UACTC,YAAa,aACbC,aAAc,iBACdC,YAAa,UACbC,YAAa,gBACbC,OAAQ,WAERC,KAAM,UACNC,UAAW,Y,iHCtEb,aAkBE,aANA,KAAAC,WAAuB,GAEvB,KAAAC,QAAiB,G,OATjB,sBAAI,qBAAM,C,IAAV,WAAwB,OAAOC,KAAKC,S,IAEpC,SAAoBC,GAChBF,KAAKC,QAAUC,EACfF,KAAKG,WAAWD,I,gCAWpB,YAAAE,aAAA,WACE,IAAIC,EAAOL,KAAKM,SAASC,UAAUC,gBAAgBC,QAAO,SAAAC,GAAK,MAAgB,YAAhBA,EAAEC,cACjEX,KAAKM,SAASC,UAAUK,gBAAgBP,IAKhC,YAAAF,WAAV,SAAqBU,GAEnB,KAAIA,aAAG,EAAHA,EAAKC,OAA4B,IAApBD,EAAIC,KAAKC,OAIxB,OAHAf,KAAKF,WAAa,GAClBE,KAAKD,QAAU,QACfC,KAAKgB,cAAgB,MAIvB,IAAMC,EAASJ,EAAIC,KAAK,GACpBd,KAAKkB,mBAAmBD,EAAQjB,KAAKgB,iBACvChB,KAAKgB,cAAgBC,EACrBjB,KAAKF,WAAaE,KAAKmB,WAAWF,IAGpCjB,KAAKD,QAAUc,EAAIC,MAGX,YAAAI,mBAAV,SAA6BE,EAAcC,G,QACrCC,EAAYC,OAAOC,KAAKJ,GAAQ,IAEpC,GAAGE,EAAUP,SAAWQ,OAAOC,KAAKH,GAAQ,IAAIN,OAAQ,OAAO,E,IAE/D,IAAkB,kBAAAO,GAAS,8BACzB,IAAID,EAAKI,eADG,SACmB,OAAO,E,iGAGxC,OAAO,G,sCArDWC,I,mDAAAA,EAAoB,wB,MAAA,K,wJAD1C,I,4GCGA,aAQE,WACWC,EACTC,EACAC,G,QAFS,KAAAF,YAKT3B,KAAK8B,WAAa,IAAiBC,IAAI/B,KAAK2B,WAE5C,IAAMK,EAAyB,QAAlB,EAAGhC,KAAK8B,kBAAU,eAAED,SACjC7B,KAAKiC,qBACU,QAAbJ,EAAsBG,GAAW,GAAMhC,KAAKkC,SAASL,EAAUG,GAEjE,IAAMG,EAA4B,QAAlB,EAAGnC,KAAK8B,kBAAU,eAAEF,SACpC5B,KAAKoC,mBACU,QAAbR,EAAsBO,GAAc,GAAMnC,KAAKkC,SAASN,EAAUO,GAEpEnC,KAAKqC,cAAgB,YAAH,CAAIV,GAAc3B,KAAKoC,mBAAuBpC,KAAKiC,sBAczE,OAXU,YAAAC,SAAR,SAAiBI,EAA8BC,G,QAC7C,IAAIA,KAAUD,aAAQ,EAARA,EAAUvB,QAAQ,MAAO,GACvC,IAAIyB,EAA+B,GAC7BC,EAAU,YAAsBF,G,IACtC,IAAqB,kBAAAD,GAAQ,8BAAC,CAA1B,IAAMI,EAAO,QACZD,EAAQC,GAAUF,EAASG,KAAKD,GAEjCE,QAAQC,MAAM,IAAIH,EAAO,uDAAuD1C,KAAK2B,UAAS,M,iGAElG,OAAOa,GAEX,EAtCA,I,kCCHA,kCAAO,IAAMM,EAAoB,c,kCCHjC,0HAaA,aAGI,c,OAEA,YAAAC,QAAA,SAAQC,GAAR,WACI,OAAOA,EAASC,KACZ,YAAS,CAAC,MACV,aAAI,SAAAvC,GAAO,MAAoB,CAC3BwC,SAAU,IAAcC,WAAW,EACnCC,QAAS,EAAKC,kBAAkB3C,EAAE4C,QAClCC,cAAe7C,EAAE6C,oBAKnB,YAAAF,kBAAV,SAA4BG,GACxB,IAAMC,EAAc,IAAiB1B,IAAIyB,EAAQE,WAGjD,OAFID,GAAab,QAAQC,MAAM,gCAAgCW,EAAQE,WAEhE,CACHC,OAAQH,EAAQI,gBAAkB5D,KAAK6D,aAAaL,EAASC,GAC7DK,KAAM9D,KAAK+D,eAAeP,GAC1BQ,OAAQhE,KAAKiE,iBAAiBT,GAC9BU,cAAelE,KAAKmE,oBAAoBX,EAASC,KAI/C,YAAAU,oBAAV,SAA8BX,EAAuCC,G,QAKjE,OAJwC,IAAvBD,EAAQY,WAAmC,cAAgB,cAI1D,OAHC,IAAoC,QAAxB,EAACX,EAAYY,mBAAW,eAAEC,eAAeA,cAGrC,QAFX,IAAoC,QAAxB,EAACb,EAAYc,mBAAW,eAAED,eAAeA,cAEnB,IADjCd,EAAQgB,OAAOf,EAAYc,aAC0B,kBAGxE,YAAAR,eAAV,SAAyBP,GACrB,OAAOA,EAAQgB,QAGT,YAAAX,aAAV,SAAuBL,EAAuCC,GAG1D,OAAOA,EAAYE,QADoB,IAAvBH,EAAQY,WAAoC,IAAIZ,EAAQgB,OADpDf,EAAYgB,YACgE,KAI1F,YAAAR,iBAAV,SAA2BT,GACvB,OAA+B,IAAvBA,EAAQY,WAAmC,MAAQ,Q,sDA9CtDM,EAAmB,Q,sCAAnBA,M,EADb,I,kTCXaC,EAAqB,eAIrBC,EAAkC,CAC3C1B,SAAUyB,EACVE,UAAW,SAACC,EAAmBxB,GAC3B,MAAO,CAAEyB,iBAAkBzB,EAAO0B,W,gDCa1C,cAgCI,WACYC,EACAC,EACAC,GAHZ,MAKI,cAAO,K,OAJC,EAAAF,oBACA,EAAAC,QACA,EAAAC,iBAhCZ,EAAAC,UAAY,EAAKD,eAAeE,gBAAmC,qBAGnE,EAAAC,mBACI,EAAKJ,MAAMK,QAAQ,CAAC,WAAY,UAAUtC,KACtC,OAAAuC,EAAA,IAAI,SAAAV,GAAW,MAAO,CAAEW,QAAsCX,OAGtE,EAAAY,SAAW,EAAKP,eAAeE,gBAA+B,oBAEtD,EAAAM,oBAA+C,OAAAC,EAAA,GAAc,CACjE,EAAKV,MAAMG,gBAA6B,cACxC,EAAKF,eAAeE,gBAAmC,uBACxDpC,KAAM,YAAc,KAAkB,OAAAuC,EAAA,IAAI,SAAA9E,GAAK,OAAAA,EAAEmF,YAE5C,EAAAC,mBAA2C,OAAAF,EAAA,GAAc,CAC7D,EAAKD,oBACL,EAAKD,WACNzC,KAAK,OAAAuC,EAAA,IAAI,SAAC,G,IAAA,mBAACxH,EAAU,KACpB,OAAQ,EAAKiH,kBAAkBc,YADF,KACuB/H,IAAeA,MAGvE,EAAAgI,aAAiD,OAAAJ,EAAA,GAAc,CAC3D,EAAKE,mBACL,EAAKZ,MAAMG,gBAAwB,WACpCpC,KACC,OAAAuC,EAAA,IAAI,SAAA9E,GAAQ,MAAO,CAAEI,KAAM,YAAmCJ,EAAE,GAAIA,EAAE,SAa1E,EAAAuF,eAAiB,SAACC,GACd,SAAKf,eAAegB,SAAS,CAACjD,SAAU,IAA8BgD,kBAAiB,KAE3F,EAAAE,cAAgB,SAACpB,GACb,SAAKG,eAAegB,SAAS,CAACjD,SAAUyB,EAAoBK,QAAO,KARnE,EAAKG,eAAeE,gBAAgB,qBAAqBpC,KAAK,OAAAoD,EAAA,GAAU,EAAKC,cAAcC,WAAU,SAAAL,GACjG,SAAKhB,MAAMiB,SAAsC,CAACjD,SAAU,IAAyBgD,kBAAiB,O,SAtCpE,iBAG1C,sBAAI,uBAAQ,C,IAAZ,WAAoC,OAAOlG,KAAKmF,eAAeqB,eAAe,sB,sEAHrEC,GAAwB,yF,sDAAxBA,EAAwB,QAAxBA,EAAwB,Y,EADrC,CAC8C,eCtBjCC,EAAsD,CAC/D3B,iBAAkB,IAAc4B,OCIvBC,EAA2B,aACpC,GACG,IAAuB,CAC1B,CAACC,QAAS,IAAqBC,SAAUJ,GACzC,CAACG,QAAS,IAAgBC,SAAU,IAA6BC,OAAO,GACxE,CAACF,QAAS,IAAgBC,SAAUlC,EAAmBmC,OAAO,K,wECLlE,aAME,WAAoBC,GAApB,WAAoB,KAAAA,WA8CZ,KAAAC,kBAAoB,SAACC,GAC3B,OAAiB,OAAjBA,aAAM,EAANA,EAAQhH,OACJ,EAAK8G,SAASG,WAAU,IAAIC,MAAOC,SAASH,EAAOhH,OAAQ,YAC3DoH,GAEE,KAAAC,YAAc,SAACL,GACrB,OAAAA,aAAM,EAANA,EAAQhH,OAAQ,EAAK8G,SAASG,UAAUD,EAAOhH,YAASoH,GAElD,KAAAE,YAAc,SAACN,GACrB,OAAAA,aAAM,EAANA,EAAQhH,OACJ,EAAK8G,SAASG,UAAUD,EAAOhH,MAAO,kBACtCoH,GAEE,KAAAG,cAAgB,SAACP,GAAM,MAC7B,OAAAtL,EAAA,EAA0C,QAA9B,EAAC,IAAgBsL,EAAOhH,cAAM,eAAEoE,gBA3D5CtE,KAAK0H,eAAiB,CACpB,CAAEC,MAAO,OAAQC,eAAgB5H,KAAKuH,aACtC,CAAEI,MAAO,QACT,CAAEA,MAAO,QAASC,eAAgB5H,KAAKiH,mBACvC,CAAEU,MAAO,UACT,CAAEA,MAAO,YACT,CAAEA,MAAO,aACT,CAAEA,MAAO,mBAGX3H,KAAK6H,iBAAmB,CACtB,CAAEF,MAAO,YAAaG,WAAYlM,EAAA,EAAmB,KAAGgM,eAAgB5H,KAAKuH,aAC7E,CAAEI,MAAO,YACT,CAAEA,MAAO,aAAcI,SAAU,IACjC,CAAEJ,MAAO,YAAaC,eAAgB5H,KAAKwH,aAC3C,CAAEG,MAAO,UAAWC,eAAgB5H,KAAKwH,aACzC,CAAEG,MAAO,SAAUC,eAAgB5H,KAAKyH,eACxC,CAAEE,MAAO,aACT,CAAEA,MAAO,UAAWI,SAAU,M,OAIlC,YAAAC,cAAA,SAAcxD,GAGZ,OAAOxE,KAAKiI,eAAezD,EAFRA,EAAuB,gBAAKA,EAAkB,UAElBxE,KAAK0H,eAAiB1H,KAAK6H,mBAGpE,YAAAI,eAAR,SAAuBC,EAAgBC,G,QAC/BC,EAAmB,G,IACzB,IAAqB,kBAAAD,GAAO,8BAAE,CAAzB,IAAME,EAAM,QACa,MAAxBH,EAAOG,EAAOV,QAChBS,EAAOzF,KAAK3C,KAAKsI,mBAAmBD,K,iGAExC,OAAOD,GAGD,YAAAE,mBAAR,SAA2BD,GACzB,IAAME,EAAgB,CACpBT,WAAYlM,EAAA,EAAayM,EAAOV,MAAMrD,eACtCkE,UAAU,GAEZ,OAAO,YAAP,eAAYD,GAAkBF,I,sCAhDrBI,GAAqB,+B,sDAArBA,EAAqB,QAArBA,EAAqB,Y,EADlC,G,YCAA,cAUE,WAAoBC,GAApB,MAA6D,cAAO,K,OAAhD,EAAAA,iB,SAJgC,iBAM1C,YAAAvI,WAAV,SAAqBU,G,MACnB,KAAIA,aAAG,EAAHA,EAAKC,OAA4B,IAApBD,EAAIC,KAAKC,OAAc,OAAO,YAAMZ,WAAU,UAACU,GAEhE,IAAM8H,EAAS9H,EAAIC,KAAK,GACxBd,KAAK4I,iBAAiBD,EAAuB,iBAAKA,EAAkB,WAEpE,YAAMxI,WAAU,UAACU,GAEJ,QAAb,EAAAb,KAAKM,gBAAQ,SAAEuI,IAAIC,uBACjB9I,KAAK4I,cAAgB5I,KAAK+I,oBAAoBlI,GAAcb,KAAKgJ,sBAAsBnI,KAGjF,YAAAM,WAAV,SAAqB+G,GACnB,OAAOlI,KAAK0I,eAAeV,cAAcE,IAGnC,YAAAa,oBAAR,SAA4BlI,GAG1B,IAFA,IAAIoI,EAAU,EAAGC,EAAe,EAEvBC,EAAItI,EAAIC,KAAKC,OAAQoI,KAAK,CACjC,IAAMC,EAAUvI,EAAIC,KAAKqI,GACzBF,GAAWG,EAAQC,UACnBH,GAAgBE,EAAQE,eAG1B,MAAO,CAAC,CACND,UAAWE,KAAKC,MAAgB,GAAVP,GAAgB,GACtCK,eAAgBC,KAAKC,MAAqB,GAAfN,GAAqB,GAChDO,SAAU,eAAgBzL,WAAY,MAIlC,YAAAgL,sBAAR,SAA8BnI,GAG5B,IAFA,IAAI6I,EAAa,EAERP,EAAItI,EAAIC,KAAKC,OAAQoI,KAE5BO,GADkB7I,EAAIC,KAAKqI,GACHO,WAG1B,MAAO,CAAC,CACNA,WAAYH,KAAKC,MAAmB,GAAbE,GAAmB,GAC1CD,SAAU,kB,sCAhDHE,GAAgC,sC,mDAAhCA,EAAgC,0FAFhC,CAAC,IAAsB,yVCZpC,uDAMI,4DAAgB,EAAAvJ,kBAIpB,+B,KAHI,+CAAmB,4B,uDDCvB,CAMsD,K,6EEZlD,4CACI,qDAEA,8CAEA,8CAEJ,wC,uBAN0B,4EAEP,8EAEA,gFCevB,ICjBMwJ,EAAiB,CACrB,CACEC,KAAM,GACNC,UDcJ,WA6BE,WACUC,EACAC,EACAC,GAHV,WACU,KAAAF,SACA,KAAAC,cACA,KAAAC,eAvBF,KAAAC,WAAgDlK,KAAK+J,OAAO3E,UAAUnC,KAAK,OAAAuC,EAAA,IAAI,SAAA2E,GACrF,IAAMC,EAAsB,YAAiBD,EAAU,CAACE,gBAAiB,OACzE,MAAO,CACLC,cAAe,EAAKC,iBAAiBJ,EAAUC,GAC/CI,UAAW,EAAKC,aAAaL,QAIjC,KAAAM,OAAmC,OAAA9E,EAAA,GAAc,CAC/C5F,KAAK+J,OAAOrE,SAASzC,KAAK,OAAAuC,EAAA,IAAI,SAAA9E,GAAK,SAAKiK,gBAAgBjK,OACxDV,KAAKkK,aACJjH,KACD,OAAAuC,EAAA,IAAI,SAAC,G,IAAA,mBAAeoF,EAAK,KAEvB,OADAA,EAAMC,aADU,KAEMD,MAI1B,KAAA5E,aAAuEhG,KAAK+J,OAAO/D,aAQ3E,KAAA8E,oBAAsB,WAC5B,EAAKd,YAAYpK,KAAoD,CACnEmL,WAAY,YAAF,eAAO,KAAqB,CAAEC,aAAc,EAAKjB,OAAOI,WAClEc,UAAW,EAAKlB,OAAOzE,mBACvBkF,UAAW,CAACtO,MAAO,eACnBgP,eAAgB,SAACC,GAA2B,SAAKpB,OAAO9D,eAAekF,OASnE,KAAAC,YAAc,WACpB,EAAKC,UAAU/K,SAASuI,IAAIyC,gBAAgB,CAC1CC,oBAAqB,SAACrE,GACpB,IAAMmB,EAASnB,EAAOsE,OAAOC,YAE7B,GAAIpD,EAAOT,0BAA0B8D,SAAU,CAC7C,IAAMC,EAAoB,2BACrBzE,GAAM,CACTpG,KAAMoG,EAAO0E,KAAK9K,KAClB8K,KAAM1E,EAAO0E,KACbvD,OAAQnB,EAAOsE,OAAOC,cAExB,OAAOpD,EAAOT,eAAe+D,GAE/B,OAAOzE,EAAOhH,UAKZ,KAAA2L,WAAa,SAAC7G,GAA2B,SAAK+E,OAAO3D,cAAcpB,I,OAxBnE,YAAA8G,kBAAR,SAA0BC,EAAc5B,GACtCA,EAAS4B,GAAQ,KACjB/L,KAAK+J,OAAO9D,eAAekE,IAwBrB,YAAAM,aAAR,SAAqBL,GACnB,MAAO,CAAElO,MAAQ,iBACf8P,QAAS,CACP,CAACC,KAAM,cAAeC,MAAO9B,GAAuBA,EAAsB,EAAI,SAAW,KACvF+B,SAAUnM,KAAK8K,qBACjB,CAACmB,KAAM,iBAAkBE,SAAUnM,KAAKoL,gBAKtC,YAAAT,gBAAR,SAAwB3F,GACtB,OAAOhF,KAAKiK,aAAamC,yBAAyB,IAAepH,EAAShF,KAAK6L,aAGzE,YAAAtB,iBAAR,SAAyBJ,EAA6BC,GAAtD,WACE,OAA2B,IAAxBA,EACM,CAAC,CAACiC,KAAM,iBAAeH,MAAO,SAAUI,QAAStM,KAAK8K,sBAExD9K,KAAKiK,aAAasC,oBAAoBpC,GACzC,SAAC4B,GAAS,SAAKD,kBAAkBC,EAAM5B,KACvC,M,sCApFKqC,GAA2B,4H,mDAA3BA,EAA2B,gE,MAAA,K,wKAF3B5F,IAA2B,yLD1BxC,uDAEI,oD,iCASA,gE,iCAIJ,+B,MAbyB,uGAUjB,iH,qFCUR,KCVA,2B,yDAKa6F,I,+EAAAA,IAA+B,SAJjC,CAAC,IAAaC,SAAS9C,IACtB,O,EAFZ,G,4DCEA,2B,yDAiBa+C,I,+EAAAA,IAAwB,uBAXjC,KACG,KAAuB,SAEnB,CACP,IACA,EACA,IACA,IACA,Q,EAdJ,I,sFCdO,SAASC,EAAQC,EAAY3M,GAChC,IAAI2M,GAAyB,GAAhBA,EAAM9L,OAAa,OAAO8L,EACvC,IAAIC,EAAMD,EAAME,QAEhB,OADAD,EAAIE,QAAQ9M,GACL4M,E,gBCKEG,EAAiC,CAC1C/J,S,UAAU,EACV2B,UAgBJ,SAAoBC,EAAYtB,GAC5B,IAAMC,EAAc,IAAiB1B,IAAIyB,EAAQE,WAWjD,OATAF,EAAQgB,OAAO0I,WAAY,IAAI9F,MAAO+F,UCzBnC,SACHrI,EACApB,EACAc,EACA4I,G,QAGMC,EAAU,IAAiBtL,IAAI2B,G,IAErC,IAAkB,kBAAA2J,EAAQxL,UAAY,IAAE,8BAAC,CAArC,IAAIyL,EAAM,QACJC,EAAe,IAAiBxL,IAAIuL,GACpCE,EAAgBhJ,EAAO+I,EAAalJ,aAC1C,GAAImJ,EAAJ,CACA,IAAMC,EAAkBD,EAAcD,EAAa9I,YAC/CgJ,GAKJ3I,EAAMwI,GAAUV,EAAK9H,EAAMwI,GAASE,GACpChJ,EAAO+I,EAAaG,YAAcD,EAClCjJ,EAAO+I,EAAalJ,aAAe,OAN/BzB,QAAQC,MAAM,eAAea,EAAS,8BAA8B4J,EAAM,mBAC1E9I,EAAO+I,EAAalJ,aAAe,Q,iGAU3C,OAFAS,EAAMpB,GAAa0J,EAAS5I,EAAQM,EAAMpB,IAEnCoB,EDQA6I,CAAyB7I,EAAOtB,EAAQE,UAAWF,EAAQgB,OALxC,IAAvBhB,EAAQY,WACI,SAACI,EAAeoJ,GAAuB,OEnCnD,SAAoBf,EAAYgB,EAAwBpJ,GAC3D,IAAIoI,GAAyB,GAAhBA,EAAM9L,OAAa,OAAO8L,EAEvC,IADA,IAAIC,EAAMD,EAAME,QACR5D,EAAI,EAAGA,EAAI2D,EAAI/L,OAAQoI,IAAI,CACjC,IAAI2E,EAAMhB,EAAI3D,GACd,GAAG2E,EAAIrJ,KAAgBoJ,EAAWpJ,GAAY,CAC5CqI,EAAI3D,GAAK,YAAH,GAAO5H,OAAOwM,OAAOD,EAAKD,IAChC,OAGJ,OAAOf,EFyB+CkB,CAAQJ,EAAUpJ,EAAQf,EAAYgB,aAE7E,SAACD,EAAeoJ,GAAuB,OAAAhB,EAAKgB,EAAUpJ,MAzBrEyJ,gBAGJ,SAAgCzK,G,QACtB0K,EAAuB,CAAC1K,EAAQE,WAChCD,EAAc,IAAiB1B,IAAIyB,EAAQE,WACjD,GAAGD,EAAY5B,S,IACZ,IAAoB,kBAAA4B,EAAY5B,UAAQ,8BAAC,CAArC,IAAMyL,EAAM,QACPa,EAAQ,IAAiBpM,IAAIuL,GAChC9J,EAAQgB,OAAO2J,EAAM9J,cAAc6J,EAAWvL,KAAK2K,I,iGAG5D,OAAOY","file":"17.48369db424c7fb930888.js","sourcesContent":["export const translations: { [key: string]: string } = {\r\n  id: \"Id\",\r\n  name: \"Navn\",\r\n  phonenumber: \"Telefonnummer\",\r\n  address: \"Adresse\",\r\n  user: \"Bruker\",\r\n  title: \"Tittel\",\r\n  content: \"Innhold\",\r\n  createdat: \"Opprettet\",\r\n  createdby: \"Opprettet av\",\r\n  filename: \"Lenke\",\r\n  description: \"Beskrivelse\",\r\n  finished: \"Ferdig\",\r\n  username: \"Brukernavn\",\r\n  firstname: \"Fornavn\",\r\n  lastname: \"Etternavn\",\r\n  email: \"Epost\",\r\n  role: \"Rolle\",\r\n  none: \"Ingen\",\r\n  year: \"År\",\r\n  month: \"Måned\",\r\n  weeknr: \"Uke\",\r\n  week: \"Uke\",\r\n  date: \"Dato\",\r\n  day: \"Dag\",\r\n  fullname: \"Navn\",\r\n  confirmedhours: \"Låste timer\",\r\n  openhours: \"Åpne timer\",\r\n  password: \"Passord\",\r\n  status: \"Status\",\r\n  starttime: \"Starttid\",\r\n  endtime: \"Sluttid\",\r\n  totalhours: \"Timer\",\r\n  comment: \"Kommentar\",\r\n\r\n  timesheet: \"Time\",\r\n  timesheetid: \"Time\",\r\n  timesheets: \"Timer\",\r\n  \r\n  mission: \"Oppdrag\",   \r\n  missionid: \"Oppdrag\",\r\n  missions: \"Oppdrag\",\r\n\r\n  employer: \"Oppdragsgiver\",\r\n  employerid: \"Oppdragsgiver\",\r\n  employers: \"Oppdragsgivere\",\r\n\r\n  documenttype: \"Dokumenttype\",\r\n  documenttypeid: \"Dokumenttype\",\r\n  documenttypes: \"Dokumenttyper\",\r\n\r\n  missiondocument: \"Dokument\",\r\n  missiondocumentid: \"Dokument\",\r\n  missiondocuments: \"Dokumenter\",\r\n\r\n  missionnote: \"Notat\",\r\n  missionnoteId: \"Notat\",\r\n  missionnotes: \"Notater\",\r\n\r\n  missiontype: \"Oppdragstype\",\r\n  missiontypeid: \"Oppdragstype\",\r\n  missiontypes: \"Oppdragstyper\",\r\n\r\n  inboundemailpassword: \"Epostpassord\",\r\n  inboundemailpasswordid: \"Epostpassord\",\r\n  inboundemailpasswords: \"Epostpassord\",\r\n\r\n  showall: \"Vis alt\",\r\n  currentweek: \"Denne uken\",\r\n  currentmonth: \"Denne måned\",\r\n  currentyear: \"I år\",\r\n  custommonth: \"Velg måned\",\r\n  custom: \"Velg tid\",\r\n\r\n  open: \"Åpen\",\r\n  confirmed: \"Låst\",\r\n};\r\n","import { Input, ViewChild, Directive } from '@angular/core';\r\nimport { AgGridAngular } from 'ag-grid-angular';\r\nimport { ColDef } from 'ag-grid-community';\r\nimport { AgGridConfig } from './ag-grid-config.interface';\r\n\r\n@Directive()\r\nexport abstract class AgGridTableComponent<TRecord, TConfig extends AgGridConfig<TRecord>> {\r\n  @ViewChild('dataGrid') dataGrid: AgGridAngular;\r\n\r\n  private _config: TConfig;\r\n  get config(): TConfig { return this._config; }\r\n\r\n  @Input() set config(value: TConfig) {\r\n      this._config = value;\r\n      this.initNgGrid(value);\r\n  }\r\n\r\n  columnDefs: ColDef[] = [];\r\n\r\n  rowData: any[] = [];\r\n\r\n  private currentObject: TRecord;\r\n\r\n  constructor() { }\r\n\r\n  autoSizeGrid(){\r\n    let cols = this.dataGrid.columnApi.getAllColumns().filter(x => x.getColId() != 'checkbox')\r\n    this.dataGrid.columnApi.autoSizeColumns(cols);\r\n  }\r\n\r\n  protected abstract addColDefs(object: Object): ColDef[];\r\n\r\n  protected initNgGrid(cfg: TConfig): void{\r\n    \r\n    if(!cfg?.data || cfg.data.length === 0){ //Reset grid if no data\r\n      this.columnDefs = [];\r\n      this.rowData = [];\r\n      this.currentObject = null;\r\n      return;\r\n    };\r\n\r\n    const record = cfg.data[0];\r\n    if(!this.hasSameObjectProps(record, this.currentObject)){\r\n      this.currentObject = record;\r\n      this.columnDefs = this.addColDefs(record);\r\n    }\r\n\r\n    this.rowData = cfg.data;\r\n  }\r\n\r\n  protected hasSameObjectProps(obj1: Object, obj2: Object): boolean{\r\n    let objProps1 = Object.keys(obj1 || {});\r\n\r\n    if(objProps1.length !== Object.keys(obj2 || {}).length) return false;\r\n\r\n    for(const prop of objProps1){\r\n      if(!obj2.hasOwnProperty(prop)) return false   \r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n\r\n}","import { Model } from 'src/app/core/models';\r\nimport { _convertArrayToObject } from 'src/app/shared-app/helpers/array/convert-array-to-object.helper';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { ModelState } from '../interfaces/model-state.interface';\r\nimport { ModelConfig, ModelStateConfig } from '../model-state.config';\r\n\r\ntype RelationInclude = Prop<ModelState>[] | \"all\";\r\n\r\nexport class GetWithRelationsConfig {\r\n\r\n  private propConfig: ModelConfig<Model>;\r\n\r\n  includedForeignProps: Prop<ModelState>[];\r\n  includedChildProps: Prop<ModelState>[];\r\n  includedProps: Prop<ModelState>[];\r\n\r\n  constructor(\r\n    readonly modelProp: Prop<ModelState>,\r\n    children?: RelationInclude,\r\n    foreigns?: RelationInclude\r\n  ) {\r\n\r\n    this.propConfig = ModelStateConfig.get(this.modelProp);\r\n\r\n    const fkProps = this.propConfig?.foreigns;\r\n    this.includedForeignProps = \r\n      foreigns === \"all\" ? (fkProps || []) : this.getProps(foreigns, fkProps)\r\n\r\n    const childProps = this.propConfig?.children\r\n    this.includedChildProps = \r\n      children === \"all\" ? (childProps || []) : this.getProps(children, childProps) \r\n\r\n    this.includedProps = [modelProp, ...this.includedChildProps, ...this.includedForeignProps]\r\n  }\r\n\r\n  private getProps(includes: Prop<ModelState>[], props: Prop<ModelState>[]): Prop<ModelState>[]{  \r\n    if(!props || !includes?.length) return []; \r\n    let included: Prop<ModelState>[] = []; \r\n    const propMap = _convertArrayToObject(props);\r\n    for(const include of includes){\r\n      if(propMap[include]) included.push(include);\r\n      else \r\n        console.error(`'${include}' not registered as a relation in model config for '${this.modelProp}'`)\r\n    }\r\n    return included;    \r\n  }\r\n}\r\n\r\n","\r\nimport { Model } from 'src/app/core/models/base-entity.interface';\r\nimport { SaveAction } from 'src/app/shared/save-action.interface';\r\nimport { ModelStateCommand } from '../interfaces/model-state-command.interface';\r\n\r\nexport const SaveModelActionId = \"SAVE_MODEL\";\r\n\r\nexport interface SaveModelStateCommand<TModel extends Model> extends ModelStateCommand{\r\n    saveAction?: SaveAction;\r\n    entity: TModel;\r\n    apiUrlOverride?: string;\r\n}\r\n\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Model } from 'src/app/core/models';\r\nimport { HttpRequest } from 'src/app/core/services/http/interfaces';\r\nimport { HttpActionId, HttpCommand } from 'src/app/core/services/http/state/http.effect';\r\nimport { ActionType } from 'src/app/shared-app/enums';\r\nimport { translations } from 'src/app/shared/translations';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\nimport { Effect } from 'src/app/state/interfaces/effect.interface';\r\nimport { listenTo } from 'src/app/state/operators/listen-to.operator';\r\nimport { DispatchedAction } from '../../../state/action-dispatcher';\r\nimport { ModelConfig, ModelStateConfig } from '../../model-state.config';\r\nimport { SaveModelActionId, SaveModelStateCommand } from './save-model-action.const';\r\n\r\n@Injectable()\r\nexport class SaveModelHttpEffect implements Effect<SaveModelStateCommand<Model>> {\r\n\r\n    constructor(){ }\r\n\r\n    handle$(actions$: Observable<DispatchedAction<SaveModelStateCommand<Model>>>): Observable<StateAction> {\r\n        return actions$.pipe(\r\n            listenTo([SaveModelActionId]),\r\n            map(x => { return <HttpCommand>{\r\n                actionId: HttpActionId, propagate: true,\r\n                request: this.createHttpRequest(x.action),\r\n                stateSnapshot: x.stateSnapshot\r\n            }}), \r\n        )\r\n    }\r\n\r\n    protected createHttpRequest(command: SaveModelStateCommand<Model>): HttpRequest{\r\n        const modelConfig = ModelStateConfig.get(command.stateProp);\r\n        if(!modelConfig) console.error(`No model config for property ${command.stateProp}`);\r\n\r\n        return {\r\n            apiUrl: command.apiUrlOverride || this.createApiUrl(command, modelConfig),\r\n            body: this.createHttpBody(command),\r\n            method: this.createHttpMethod(command),\r\n            cancelMessage: this.createCancelMessage(command, modelConfig)\r\n        }\r\n    }\r\n\r\n    protected createCancelMessage(command: SaveModelStateCommand<Model>, modelConfig: ModelConfig<Model>): string{\r\n        const saveWord = command.saveAction === ActionType.Update ? \"Oppdatering\" : \"Oppretting\";\r\n        const entityWord = translations[modelConfig.foreignProp?.toLowerCase()].toLowerCase();\r\n        const displayPropWord = translations[modelConfig.displayProp?.toLowerCase()].toLowerCase();\r\n        const displayPropValue = command.entity[modelConfig.displayProp];\r\n        return `${saveWord} av ${entityWord} med ${displayPropWord} ${displayPropValue} er reversert!`;\r\n    }\r\n  \r\n    protected createHttpBody(command: SaveModelStateCommand<Model>): any {\r\n        return command.entity;\r\n    }\r\n\r\n    protected createApiUrl(command: SaveModelStateCommand<Model>, modelConfig: ModelConfig<Model>): string {\r\n        const identfifier = modelConfig.identifier;\r\n        const endUri = (command.saveAction === ActionType.Update) ? `/${command.entity[identfifier]}` : \"\";\r\n        return modelConfig.apiUrl + endUri;\r\n    }\r\n\r\n    protected createHttpMethod(command: SaveModelStateCommand<Model>): \"PUT\" | \"POST\" {\r\n        return  command.saveAction === ActionType.Update ? \"PUT\" : \"POST\";\r\n    }\r\n\r\n}","import { GroupByPeriod } from 'src/app/shared/enums';\r\nimport { Reducer, StateAction } from 'src/app/state/interfaces';\r\nimport { StoreState } from '../store-state';\r\n\r\nexport const SetGroupByActionId = \"SET_GROUP_BY\";\r\n\r\nexport interface SetGroupByCommand extends StateAction { groupBy: GroupByPeriod }\r\n\r\nexport const SetGroupByReducer: Reducer<any> = {\r\n    actionId: SetGroupByActionId,\r\n    reducerFn: (state: StoreState, action: SetGroupByCommand) => {\r\n        return { timesheetGroupBy: action.groupBy }\r\n    }       \r\n}  ","import { Injectable } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map, takeUntil } from 'rxjs/operators';\r\nimport { Timesheet, User } from 'src/app/core/models';\r\nimport { _setFullNameOnUserForeigns } from 'src/app/shared-app/helpers/add-full-name-to-user-foreign.helper';\r\nimport { WithUnsubscribe } from 'src/app/shared-app/mixins/with-unsubscribe.mixin';\r\nimport { AgGridConfig } from 'src/app/shared/components/abstracts/ag-grid-config.interface';\r\nimport { TimesheetCriteriaFormState } from 'src/app/shared/constants/forms/timesheet-criteria-form.const';\r\nimport { GroupByPeriod } from 'src/app/shared/enums';\r\nimport { filterRecords } from 'src/app/shared/operators/filter-records.operator';\r\nimport { ComponentStore } from 'src/app/state/component.store';\r\nimport { StateMissions, StateUsers } from 'src/app/state/interfaces';\r\nimport { Store } from 'src/app/state/store';\r\nimport { TimesheetSummary } from '../shared-timesheet/interfaces';\r\nimport { TimesheetSummaryAggregator } from '../shared-timesheet/services/timesheet-summary.aggregator';\r\nimport { FetchTimesheetsActionId, FetchTimesheetsStateCommand } from '../shared-timesheet/state/fetch-timesheets.http.effect';\r\nimport { SetTimesheetCriteriaActionId } from '../shared-timesheet/state/set-timesheet-criteria.reducer';\r\nimport { TimesheetCriteria } from '../shared-timesheet/timesheet-filter/timesheet-criteria.interface';\r\nimport { TimesheetFilter } from '../shared-timesheet/timesheet-filter/timesheet-filter.model';\r\nimport { ComponentStoreState, StoreState } from './store-state';\r\nimport { SetGroupByActionId } from './timesheet-statistic/component-state-reducers';\r\n\r\ntype Record = Timesheet | TimesheetSummary;\r\n\r\n@Injectable()\r\nexport class TimesheetStatisticFacade extends WithUnsubscribe() {\r\n     \r\n    criteria$ = this.componentStore.selectProperty$<TimesheetCriteria>(\"timesheetCriteria\");\r\n    get criteria(): TimesheetCriteria { return this.componentStore.selectProperty(\"timesheetCriteria\") }\r\n\r\n    criteriaFormState$: Observable<TimesheetCriteriaFormState> = \r\n        this.store.select$([\"missions\", \"users\"]).pipe(\r\n            map(state => { return { options: <StateMissions & StateUsers> state  } })\r\n        )\r\n\r\n    groupBy$ = this.componentStore.selectProperty$<GroupByPeriod>(\"timesheetGroupBy\");\r\n\r\n    private filteredTimesheets$: Observable<Timesheet[]> = combineLatest([\r\n        this.store.selectProperty$<Timesheet[]>(\"timesheets\"),\r\n        this.componentStore.selectProperty$<TimesheetCriteria>(\"timesheetCriteria\")\r\n    ]).pipe( filterRecords(TimesheetFilter), map(x => x.records) );\r\n\r\n    private groupedTimesheets$: Observable<Record[]> = combineLatest([\r\n        this.filteredTimesheets$,\r\n        this.groupBy$\r\n    ]).pipe(map(([timesheets, groupBy]) => {\r\n        return  this.summaryAggregator.groupByType(groupBy, timesheets) || timesheets;    \r\n    }));\r\n\r\n    tableConfig$: Observable<AgGridConfig<Record>> = combineLatest([\r\n        this.groupedTimesheets$, \r\n        this.store.selectProperty$<User[]>(\"users\")\r\n    ]).pipe(\r\n        map(x =>  { return { data: _setFullNameOnUserForeigns<Record>(x[0], x[1]) }}\r\n    ));\r\n\r\n    constructor(\r\n        private summaryAggregator: TimesheetSummaryAggregator,\r\n        private store: Store<StoreState>,\r\n        private componentStore: ComponentStore<ComponentStoreState>\r\n    ){\r\n        super();\r\n        this.componentStore.selectProperty$(\"timesheetCriteria\").pipe(takeUntil(this.unsubscribe)).subscribe(timesheetCriteria => \r\n            this.store.dispatch(<FetchTimesheetsStateCommand>{actionId: FetchTimesheetsActionId, timesheetCriteria}))\r\n    }\r\n\r\n    updateCriteria = (timesheetCriteria: TimesheetCriteria): void =>       \r\n        this.componentStore.dispatch({actionId: SetTimesheetCriteriaActionId, timesheetCriteria})\r\n\r\n    updateGroupBy = (groupBy: GroupByPeriod): void =>       \r\n        this.componentStore.dispatch({actionId: SetGroupByActionId, groupBy})\r\n\r\n}","import { GroupByPeriod } from 'src/app/shared/enums';\r\nimport { ComponentStoreState } from '../store-state';\r\n\r\nexport const DefaultComponentState: Partial<ComponentStoreState> = {\r\n    timesheetGroupBy: GroupByPeriod.Month,\r\n}","import { Provider } from '@angular/core';\r\nimport { ComponentStoreProviders } from 'src/app/state/providers.const';\r\nimport { STORE_DEFAULT_STATE, STORE_REDUCERS } from 'src/app/state/injection-tokens';\r\nimport { SetTimesheetCriteriaReducer } from '../../shared-timesheet/state/set-timesheet-criteria.reducer';\r\nimport { TimesheetStatisticFacade } from '../timesheet-statistic.facade';\r\nimport { SetGroupByReducer } from './component-state-reducers';\r\nimport { DefaultComponentState } from './default-state.const';\r\n\r\nexport const TimesheetStatisticProviders: Provider[] = [\r\n    TimesheetStatisticFacade,\r\n    ...ComponentStoreProviders,\r\n    {provide: STORE_DEFAULT_STATE, useValue: DefaultComponentState},\r\n    {provide: STORE_REDUCERS, useValue: SetTimesheetCriteriaReducer, multi: true},\r\n    {provide: STORE_REDUCERS, useValue: SetGroupByReducer, multi: true}\r\n  ]","import { DatePipe } from \"@angular/common\";\r\nimport { Injectable } from \"@angular/core\";\r\nimport { ColDef } from \"ag-grid-community\";\r\nimport { Timesheet } from \"src/app/core/models\";\r\nimport { TimesheetStatus } from \"src/app/shared/enums\";\r\nimport { translations } from \"src/app/shared/translations\";\r\nimport { TimesheetSummary } from 'src/app/timesheet-modules/shared-timesheet/interfaces';\r\n\r\n@Injectable()\r\nexport class ColDefsFactoryService {\r\n\r\n  private summaryColDefs: ColDef[];\r\n  private timesheetColDefs: ColDef[];\r\n\r\n  constructor(private datePipe: DatePipe) {\r\n    this.summaryColDefs = [\r\n      { field: \"date\", valueFormatter: this.convertDate },\r\n      { field: \"year\" },\r\n      { field: \"month\", valueFormatter: this.convertMonthIndex },\r\n      { field: \"weekNr\" },\r\n      { field: \"fullName\" },\r\n      { field: \"openHours\" },\r\n      { field: \"confirmedHours\" },\r\n    ];\r\n\r\n    this.timesheetColDefs = [\r\n      { field: \"startTime\", headerName: translations[\"date\"], valueFormatter: this.convertDate},\r\n      { field: \"fullName\" },\r\n      { field: \"totalHours\", maxWidth: 75 },\r\n      { field: \"startTime\", valueFormatter: this.convertTime },\r\n      { field: \"endTime\", valueFormatter: this.convertTime },\r\n      { field: \"status\", valueFormatter: this.convertStatus },\r\n      { field: \"missionId\" },\r\n      { field: \"comment\", maxWidth: 200 },\r\n    ];\r\n  }\r\n\r\n  createColDefs(entity: TimesheetSummary | Timesheet): ColDef[]  {\r\n    const isSummary = (entity['confirmedHours'] || entity['openHours']) ? true : false;\r\n\r\n    return this._createColDefs(entity, isSummary ? this.summaryColDefs : this.timesheetColDefs);\r\n  }\r\n\r\n  private _createColDefs(object: Object, colDefs: ColDef[]): ColDef[] {\r\n    const result: ColDef[] = [];\r\n    for (const colDef of colDefs) {\r\n      if (object[colDef.field] != null)\r\n        result.push(this.mergeDefaultColDef(colDef));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private mergeDefaultColDef(colDef: ColDef): ColDef {\r\n    const genericColDef = {\r\n      headerName: translations[colDef.field.toLowerCase()],\r\n      sortable: true,\r\n    };\r\n    return { ...genericColDef, ...colDef };\r\n  }\r\n\r\n  private convertMonthIndex = (params) =>\r\n    params?.value != null\r\n      ? this.datePipe.transform(new Date().setMonth(params.value), \"MMM\")\r\n      : undefined;\r\n\r\n  private convertDate = (params) =>\r\n    params?.value ? this.datePipe.transform(params.value) : undefined;\r\n\r\n  private convertTime = (params) =>\r\n    params?.value\r\n      ? this.datePipe.transform(params.value, \"shortTime\")\r\n      : undefined;\r\n\r\n  private convertStatus = (params) => \r\n    translations[TimesheetStatus[params.value]?.toLowerCase()]\r\n}\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { ColDef } from 'ag-grid-community';\nimport { Timesheet } from 'src/app/core/models';\nimport { AgGridConfig } from 'src/app/shared/components/abstracts/ag-grid-config.interface';\nimport { AgGridTableComponent } from 'src/app/shared/components/abstracts/ag-grid-table.component';\nimport { TimesheetSummary } from 'src/app/timesheet-modules/shared-timesheet/interfaces';\nimport { ColDefsFactoryService } from './col-defs-factory.service';\n\n@Component({\n  selector: 'app-timesheet-statistic-table',\n  templateUrl: './timesheet-statistic-table.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  providers: [ColDefsFactoryService]\n})\nexport class TimesheetStatisticTableComponent extends AgGridTableComponent<TimesheetSummary | Timesheet, AgGridConfig<TimesheetSummary | Timesheet>> {\n\n  private isSummaryData: boolean;\n\n  constructor(private colDefsFactory: ColDefsFactoryService) { super(); }\n\n  protected initNgGrid(cfg: AgGridConfig<TimesheetSummary | Timesheet>): void{  \n    if(!cfg?.data || cfg.data.length === 0) return super.initNgGrid(cfg);\n\n    const sample = cfg.data[0];\n    this.isSummaryData = (sample['confirmedHours'] || sample['openHours']) ? true : false\n\n    super.initNgGrid(cfg);\n    \n    this.dataGrid?.api.setPinnedBottomRowData(\n      this.isSummaryData ? this.addSummaryBottomRow(cfg as any) : this.addTimesheetBottomRow(cfg as any));  \n  }\n\n  protected addColDefs(object: TimesheetSummary | Timesheet): ColDef[]{\n    return this.colDefsFactory.createColDefs(object);\n  } \n\n  private addSummaryBottomRow(cfg: AgGridConfig<TimesheetSummary>): TimesheetSummary[]{\n    let openHrs = 0, confirmedHrs = 0;\n    \n    for(let  i = cfg.data.length; i--;){\n      const summary = cfg.data[i];\n      openHrs += summary.openHours;\n      confirmedHrs += summary.confirmedHours;\n    }\n \n    return [{\n      openHours: Math.round(openHrs * 10) / 10, \n      confirmedHours: Math.round(confirmedHrs * 10) / 10, \n      fullName: \"Sum av timer\", timesheets: []\n    }];   \n  }\n\n  private addTimesheetBottomRow(cfg: AgGridConfig<Timesheet>): any[]{\n    let totalHours = 0;\n    \n    for(let  i = cfg.data.length; i--;){\n      const timesheet = cfg.data[i];\n      totalHours += timesheet.totalHours;\n    }\n \n    return [{\n      totalHours: Math.round(totalHours * 10) / 10, \n      fullName: \"Sum av timer\",\n    }];   \n  }\n\n   \n}","<ag-grid-angular #dataGrid\n    class=\"ag-theme-balham h-100\"\n    rowSelection=\"multiple\"\n    suppressRowClickSelection=\"true\"\n    suppressColumnVirtualisation=\"true\"\n    overlayNoRowsTemplate=\"Tomt\"\n    (modelUpdated)=\"autoSizeGrid()\"\n    [rowData]=\"rowData\"\n    [columnDefs]=\"columnDefs\"\n    [allowContextMenuWithControlKey]>\n</ag-grid-angular>","<app-main-skeleton disableElevation=\"true\">\n\n    <ng-container navbar *ngIf=\"navVm$ | async; let navVm\">\n        <app-main-top-nav-bar [config]=\"navVm.navConfig\" >\n        </app-main-top-nav-bar>\n        <app-chips-bar [chips]=\"navVm.groupByChips\">\n        </app-chips-bar>\n        <app-chips-bar [chips]=\"navVm.criteriaChips\">\n        </app-chips-bar>\n    </ng-container>\n\n    <app-timesheet-statistic-table #statTable fxFlex \n        [config]=\"tableConfig$ | async\">\n    </app-timesheet-statistic-table>\n  \n</app-main-skeleton>\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\r\nimport { ValueFormatterParams } from 'ag-grid-community';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { Timesheet } from 'src/app/core/models';\r\nimport { ChipsFactoryService } from 'src/app/core/services/ui/chips-factory.service';\r\nimport { _getSetPropCount } from 'src/app/shared-app/helpers/object/get-set-prop-count.helper';\r\nimport { AppChip } from 'src/app/shared-app/interfaces/app-chip.interface';\r\nimport { AgGridConfig } from 'src/app/shared/components/abstracts/ag-grid-config.interface';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { TimesheetCriteriaForm, TimesheetCriteriaFormState } from 'src/app/shared/constants/forms/timesheet-criteria-form.const';\r\nimport { GroupByPeriod } from 'src/app/shared/enums';\r\nimport { FormService } from 'src/app/shared/form';\r\nimport { TimesheetSummary } from '../../shared-timesheet/interfaces';\r\nimport { TimesheetCriteriaChipOptions } from '../../shared-timesheet/timesheet-filter/timesheet-criteria-chip-options.const';\r\nimport { TimesheetCriteria } from '../../shared-timesheet/timesheet-filter/timesheet-criteria.interface';\r\nimport { TimesheetStatisticFacade } from '../timesheet-statistic.facade';\r\nimport { TimesheetStatisticProviders } from './timesheet-statistic-providers.const';\r\nimport { TimesheetStatisticTableComponent } from './timesheet-statistic-table/timesheet-statistic-table.component';\r\n\r\ninterface NavViewModel { groupByChips: AppChip[], criteriaChips: AppChip[],  navConfig: MainTopNavConfig }\r\n\r\n@Component({\r\n  selector: 'app-timesheet-statistic',\r\n  templateUrl: './timesheet-statistic.component.html',  \r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: TimesheetStatisticProviders\r\n})\r\nexport class TimesheetStatisticComponent {\r\n  @ViewChild('statTable') statTable: TimesheetStatisticTableComponent;\r\n\r\n  private partialVm$: Observable<Partial<NavViewModel>> = this.facade.criteria$.pipe(map(criteria => { \r\n    const activeCriteriaCount = _getSetPropCount(criteria, {dateRangePreset: null})\r\n    return {\r\n      criteriaChips: this.getCriteriaChips(criteria, activeCriteriaCount), \r\n      navConfig: this.getNavConfig(activeCriteriaCount)\r\n    }\r\n  }))\r\n\r\n  navVm$: Observable<NavViewModel> = combineLatest([\r\n    this.facade.groupBy$.pipe(map(x => this.getGroupByChips(x))),\r\n    this.partialVm$\r\n  ]).pipe(\r\n    map(([groupByChips, navVm]) => {\r\n      navVm.groupByChips = groupByChips; \r\n      return <NavViewModel> navVm\r\n    }), \r\n  )\r\n  \r\n  tableConfig$: Observable<AgGridConfig<TimesheetSummary | Timesheet>> = this.facade.tableConfig$;\r\n\r\n  constructor( \r\n    private facade: TimesheetStatisticFacade,\r\n    private formService: FormService,\r\n    private chipsFactory: ChipsFactoryService\r\n  ) { }\r\n\r\n  private openTimesheetFilter = (): void => {\r\n    this.formService.open<TimesheetCriteria, TimesheetCriteriaFormState>({\r\n      formConfig: { ...TimesheetCriteriaForm, initialValue: this.facade.criteria}, \r\n      formState: this.facade.criteriaFormState$,\r\n      navConfig: {title: \"Velg filtre\"},\r\n      submitCallback: (val: TimesheetCriteria) => this.facade.updateCriteria(val)\r\n    })\r\n  }\r\n\r\n  private resetCriteriaProp(prop: string, criteria: TimesheetCriteria){\r\n    criteria[prop] = null;\r\n    this.facade.updateCriteria(criteria);\r\n  }\r\n\r\n  private exportAsCsv = () => {\r\n    this.statTable.dataGrid.api.exportDataAsCsv({\r\n      processCellCallback: (params) => {\r\n        const colDef = params.column.getColDef()\r\n        // Use coldef value formatter in export\r\n        if (colDef.valueFormatter instanceof Function) {\r\n          const valueFormatterParams: ValueFormatterParams = {\r\n            ...params,\r\n            data: params.node.data,\r\n            node: params.node!,\r\n            colDef: params.column.getColDef()\r\n          };\r\n          return colDef.valueFormatter(valueFormatterParams);\r\n        }\r\n        return params.value;\r\n      }\r\n    });\r\n  }\r\n\r\n  private addGroupBy = (groupBy: GroupByPeriod) => this.facade.updateGroupBy(groupBy);\r\n\r\n  private getNavConfig(activeCriteriaCount: number): MainTopNavConfig {\r\n    return { title:  \"Timestatistikk\",\r\n      buttons: [\r\n        {icon: \"filter_list\", color: activeCriteriaCount && activeCriteriaCount > 0 ? \"accent\" : null, \r\n          callback: this.openTimesheetFilter},\r\n        {icon: \"cloud_download\", callback: this.exportAsCsv}     \r\n      ]\r\n    }\r\n  }\r\n\r\n  private getGroupByChips(groupBy: GroupByPeriod):  AppChip[] {\r\n    return this.chipsFactory.createEnumSelectionChips(GroupByPeriod, groupBy, this.addGroupBy);\r\n  }\r\n\r\n  private getCriteriaChips(criteria: TimesheetCriteria, activeCriteriaCount: number): AppChip[] {\r\n    if(activeCriteriaCount === 0) \r\n      return [{text: \"Åpne filter\", color: \"accent\", onClick: this.openTimesheetFilter}]\r\n  \r\n    return this.chipsFactory.createCriteriaChips(criteria, \r\n        (prop) => this.resetCriteriaProp(prop, criteria), \r\n        TimesheetCriteriaChipOptions\r\n      )\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { TimesheetStatisticComponent } from './timesheet-statistic/timesheet-statistic.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: TimesheetStatisticComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class TimesheetStatisticRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { TimesheetStatisticRoutingModule } from './timesheet-statistic-routing.module';\r\n\r\nimport { TimesheetStatisticComponent } from './timesheet-statistic/timesheet-statistic.component';\r\nimport { TimesheetStatisticTableComponent } from './timesheet-statistic/timesheet-statistic-table/timesheet-statistic-table.component';\r\n\r\nimport { AppAgGridModule } from 'src/app/app-ag-grid/app-ag-grid.module';\r\nimport { DatePipe } from '@angular/common';\r\nimport { SharedTimesheetModule } from '../shared-timesheet/shared-timesheet.module';\r\nimport { DynamicFormsModule } from 'src/app/dynamic-forms/dynamic-forms.module';\r\nimport { FetchTimesheetProviders } from '../shared-timesheet/state/providers.const';\r\nimport { StateModule } from 'src/app/state/state.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TimesheetStatisticComponent,\r\n    TimesheetStatisticTableComponent\r\n  ],\r\n  providers:[\r\n    DatePipe,\r\n    ...FetchTimesheetProviders,\r\n  ],\r\n  imports: [\r\n    SharedTimesheetModule,\r\n    TimesheetStatisticRoutingModule,\r\n    StateModule,\r\n    AppAgGridModule,\r\n    DynamicFormsModule,\r\n  ],\r\n})\r\nexport class TimesheetStatisticModule { }\r\n","export function _add<T>(array: T[], value: T): T[]{\r\n    if(!array || array.length == 0) return array;\r\n    let arr = array.slice();\r\n    arr.unshift(value);\r\n    return arr;\r\n}","import { Model } from 'src/app/core/models';\r\nimport { ActionType } from 'src/app/shared-app/enums';\r\nimport { _add } from 'src/app/shared-app/helpers/array/add.helper';\r\nimport { _update } from 'src/app/shared-app/helpers/array/update.helper';\r\nimport { Reducer } from '../../../state/interfaces/reducer.interface';\r\nimport { _modifyModelWithForeigns } from '../../helpers/modify-model-with-foreigns.helper';\r\nimport { ModelStateConfig } from '../../model-state.config';\r\nimport { SaveModelActionId, SaveModelStateCommand } from './save-model-action.const';\r\n\r\nexport const SaveModelReducer: Reducer<any> = {\r\n    actionId: SaveModelActionId,\r\n    reducerFn: _reducerFn,\r\n    stateProperties: _statePropertiesGetter\r\n}\r\n\r\nfunction _statePropertiesGetter(command: SaveModelStateCommand<Model>): string[]{\r\n    const stateProps: string[] = [command.stateProp];\r\n    const modelConfig = ModelStateConfig.get(command.stateProp); \r\n    if(modelConfig.foreigns)\r\n       for(const fkProp of modelConfig.foreigns){\r\n          const fkCfg = ModelStateConfig.get(fkProp as any);\r\n          if(command.entity[fkCfg.foreignProp]) stateProps.push(fkProp);\r\n       }\r\n\r\n    return stateProps;\r\n}\r\n\r\nfunction _reducerFn(state: any, command: SaveModelStateCommand<Model>): Partial<any>{  \r\n    const modelConfig = ModelStateConfig.get(command.stateProp); \r\n\r\n    command.entity.updatedAt = new Date().getTime();  \r\n\r\n    let modifyFn: (entity: Model, entities: Model[]) => void;\r\n\r\n    if(command.saveAction === ActionType.Update) \r\n        modifyFn = (entity: Model, entities: Model[]) =>  _update(entities, entity, modelConfig.identifier)\r\n    else \r\n        modifyFn = (entity: Model, entities: Model[]) =>  _add(entities, entity)\r\n\r\n    return _modifyModelWithForeigns(state, command.stateProp, command.entity, modifyFn)          \r\n}\r\n","import { _add } from 'src/app/shared-app/helpers/array/add.helper';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { ModelState } from '../interfaces/model-state.interface';\r\nimport { ModelStateConfig } from '../model-state.config';\r\n\r\nexport function _modifyModelWithForeigns<TState>(\r\n    state: TState, \r\n    stateProp: Prop<ModelState>, \r\n    entity: any, \r\n    entityFn: (entity: any, stateSlice: any) => any\r\n): Partial<TState>{\r\n\r\n    const propCfg = ModelStateConfig.get(stateProp);\r\n\r\n    for(var fkProp of propCfg.foreigns || []){\r\n        const fkPropConfig = ModelStateConfig.get(fkProp); //Key information about foreign prop\r\n        const foreignEntity = entity[fkPropConfig.foreignProp];\r\n        if(!foreignEntity) continue; //If no new entity, continue\r\n        const foreignEntityId = foreignEntity[fkPropConfig.identifier];\r\n        if(!foreignEntityId){ //No id on new entity? ignore and set null\r\n            console.error(`Entity from ${stateProp} has foreign property from ${fkProp} set with no ID`)\r\n            entity[fkPropConfig.foreignProp] = null;\r\n            continue\r\n        };\r\n        state[fkProp] = _add(state[fkProp], foreignEntity); //Add new fk entity\r\n        entity[fkPropConfig.foreignKey] = foreignEntityId; //Set foreign key on entity\r\n        entity[fkPropConfig.foreignProp] = null; //Remove foreign entity to prevent duplicate data    \r\n    }\r\n\r\n    state[stateProp] = entityFn(entity, state[stateProp]);\r\n\r\n    return state;\r\n}","export function _update<T>(array: T[], updatedObj: Partial<T>, identifier: string){\r\n    if(!array || array.length == 0) return array;\r\n    let arr = array.slice();\r\n    for(let i = 0; i < arr.length; i++){\r\n      let obj = arr[i];\r\n      if(obj[identifier] === updatedObj[identifier]){\r\n        arr[i] = {...Object.assign(obj, updatedObj)};\r\n        break;\r\n      }\r\n    }\r\n    return arr;\r\n}"],"sourceRoot":"webpack:///"}
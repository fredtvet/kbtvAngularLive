{"version":3,"sources":["./src/app/data-management/data-manager/state/update-selected-property.reducer.ts","./src/app/data-management/data-manager/data-manager.facade.ts","./src/app/shared/constants/model-forms/create-document-type-form.const.ts","./src/app/shared/constants/model-forms/create-employer-form.const.ts","./src/app/shared/constants/model-forms/create-inbound-email-password-form.const.ts","./src/app/data-management/data-manager/property-form.map.ts","./src/app/shared/constants/model-forms/create-mission-type-form.const.ts","./src/app/shared/pipes/translate.pipe.ts","./src/app/data-management/data-manager/data-property-picker/data-property-picker.component.html","./src/app/data-management/data-manager/data-property-picker/data-property-picker.component.ts","./src/app/data-management/data-manager/data-table/data-table.config.ts","./src/app/data-management/data-manager/data-table/data-table.component.ts","./src/app/data-management/data-manager/data-table/data-table.component.html","./src/app/data-management/data-manager/data-manager.component.html","./src/app/data-management/data-manager/data-manager.component.ts","./src/app/data-management/data-management-routing.module.ts","./src/app/data-management/data-management.module.ts","./src/app/state/component.store.ts","./src/app/state/providers.const.ts"],"names":["UpdateSelectedPropertyActionId","UpdateSelectedPropertyReducer","actionId","reducerFn","state","action","selectedProperty","store","componentStore","properties","selectedProperty$","this","selectProperty$","dataConfig$","pipe","distinctUntilChanged","switchMap","x","getDataConfig$","updateSelectedProperty","prop","dispatch","update","form","stateProp","saveAction","formState","delete","command","selectProperty","property","relationCfg","select$","includedProps","map","data","foreigns","selectedProp","DataManagerFacade","CreateDocumentTypeForm","submitText","controls","required","CreateEmployerForm","CreateInboundEmailPasswordForm","name","type","questions","component","question","placeholder","validators","maxLength","PropertyFormMap","transform","value","translations","toLowerCase","TranslatePipe","propertySelected","changeProperty","emit","DataPropertyPickerComponent","DataTableConfig","updatedAt","createdAt","lastVisited","employer","missionType","fileName","id","password","finished","itemEdited","columnDefs","rowData","fkModelIdMap","fkModelDisplayPropMap","editCell","e","newValue","oldValue","initNgGrid","cfg","modelCfg","get","fkStateKey","fkCfg","entities","foreignKey","identifier","displayProp","addColDefs","object","colDefs","colId","checkboxSelection","width","pinned","lockPosition","colDef","addColDef","push","def","field","headerName","sortable","resizable","editable","values","params","val","fkModelCfg","getBy","Object","keys","fkId","fkEntity","hit","DataTableComponent","autoSizeGrid","routes","path","facade","confirmService","formService","vm$","combineLatest","getNavConfig","dataConfig","navConfig","openDeleteDialog","nodes","dataTable","dataGrid","api","getSelectedNodes","length","translatedProp","open","title","message","confirmText","confirmCallback","deleteItems","node","openCreateForm","formConfig","adapter","dynamicForm","updateItem","ids","buttons","icon","callback","DataManagerComponent","provide","useValue","multi","allowedRoles","Authority","DataManagementRoutingModule","forChild","DataManagementModule","hostStore","queryDispatcher","dispatcher","reducers","defaultState","ComponentStore","ComponentStoreProviders"],"mappings":"mYASaA,EAAiC,2BAEjCC,EAAyD,CAClEC,SAAUF,EACVG,UAAW,SAACC,EAAuBC,GAC/B,MAAO,CAACC,iBAAkBD,EAAOC,oB,oCCEzC,aAgBI,WACYC,EACAC,GAFZ,WACY,KAAAD,QACA,KAAAC,iBAfZ,KAAAC,WACI,CAAC,WAAY,YAAa,eAAgB,gBAAiB,yBAE/D,KAAAC,kBAAoBC,KAAKH,eAAeI,gBAAkC,oBAE1E,KAAAC,YAAcF,KAAKD,kBAAkBI,KACjC,OAAAC,EAAA,KACA,OAAAC,EAAA,IAAU,SAAAC,GAAK,SAAKC,eAAeD,OAWvC,KAAAE,uBAAyB,SAACC,GACtB,SAAKZ,eAAea,SAAS,CAACnB,SAAUF,EAAgCM,iBAAkBc,KAE9F,KAAAE,OAAS,SAACC,GACN,SAAKhB,MAAMc,SAAS,IAAI,IAAmC,CACvDG,UAAW,EAAKlB,iBAChBmB,WAAY,EACZC,UAAWH,MAInB,KAAAI,OAAS,SAACC,GACN,SAAKrB,MAAMc,SAAS,2BACbO,GAAO,CACVJ,UAAW,EAAKlB,iBAChBJ,SAAU,Q,OAxBlB,sBAAI,+BAAgB,C,IAApB,WACI,OAAOS,KAAKH,eAAeqB,eAAiC,oBAAoB,I,gCA0B5E,YAAAX,eAAR,SAAuBY,GACnB,IAAIC,EAAc,IAAI,IAAuBD,EAAU,KAAM,OAC7D,OAAOnB,KAAKJ,MAAMyB,QAAQD,EAAYE,eAAenB,KACjD,OAAAoB,EAAA,IAAI,SAAA9B,GACJ,MAAO,CACH+B,KAAM/B,EAAM0B,GACZM,SAAUhC,EACViC,aAAcP,Q,sCA7CjBQ,GAAiB,4D,sDAAjBA,EAAiB,QAAjBA,EAAiB,Y,EAD9B,G,YCZaC,EAA4D,CACrEC,WAAY,WAAYC,SAAU,CAAC,YAAD,eAAK,KAAW,CAAEC,UAAU,MCDrDC,EAAiD,CAC1DH,WAAY,WACZC,SAAU,C,2BACF,KAAW,CAAEC,UAAU,IAC3B,IACA,IACA,MCGKE,EAAyE,CAClFJ,WAAY,WACZC,SAAU,CAVqD,CAAEI,KAAM,WAAYH,UAAU,EAC7FI,KAAM,UAAWC,UAAW,CAAC,CACzBC,U,UAAY,EACZC,SAAyB,CAACC,YAAa,kBAE3CC,WAAY,CAAC,IAAWC,UAAU,SCDzBC,EAA+F,CACxG,UAAaV,EACb,cAAiBJ,EACjB,aCRgE,CAChEC,WAAY,WAAYC,SAAU,CAAC,YAAD,eAAM,KAAW,CAAEC,UAAU,MDQ/D,sBAAyBE,EACzB,S,UAAY,G,4GEXhB,2B,OAMI,YAAAU,UAAA,SAAUC,GACN,OAAOC,EAAA,EAAaD,EAAME,gBAAkBF,G,sCAHvCG,I,gEAAAA,EAAa,U,EAJ1B,G,yBCAI,gDAA+D,yB,qCAAsB,+B,uBAAzC,gDAAmB,iGCDnE,iBAYE,wBAFU,KAAAC,iBAAmB,IAAI,eAIjC,KAAAC,eAAiB,SAAC9B,GAAoB,SAAK6B,iBAAiBE,KAAK/B,I,6CARtDgC,I,mDAAAA,EAA2B,0UDRxC,oDACE,6CAAW,qCAAS,8BACpB,gDAAyC,8DAAiB,EAAAF,eAAA,MACxD,kDACF,8BACF,+B,MAHc,oFACE,gF,4cCDhB,G,oCCFaG,EACU,CAACC,WAAW,EAAMC,WAAW,EAAMC,aAAa,EAAMC,UAAU,EAAMC,aAAa,EAAMC,UAAU,GAD7GN,EAGS,CAACO,IAAI,EAAMC,UAAU,GAH9BR,EAKU,CAACS,UAAU,G,YCIlC,cAgBE,mBACE,cAAO,K,OAVC,EAAAC,WAAa,IAAI,eAE3B,EAAAC,WAAkB,GAClB,EAAAC,QAAe,GAEP,EAAAC,aAA8D,GAE9D,EAAAC,sBAAgF,GAMxF,EAAAC,SAAW,SAACC,GACPA,EAAEC,WAAaD,EAAEE,UAClB,EAAKR,WAAWZ,KAAKkB,I,SAjBa,iBAqB5B,YAAAG,WAAV,SAAqBC,G,QACnB,IAAIA,EAAK,OAAO,YAAMD,WAAU,UAACC,GACjC,IAAMC,EAAW,IAAiBC,IAAIF,EAAI9C,cAC1C,GAAG+C,aAAQ,EAARA,EAAUhD,S,IACX,IAAwB,kBAAAgD,EAAShD,UAAQ,8BAAC,CAAtC,IAAMkD,EAAU,QACZC,EAAQ,IAAiBF,IAAIC,GAC7BE,EAAWL,EAAI/C,SAASkD,GAC3BE,IACD7E,KAAKiE,aAAaW,EAAME,YACtB,YAA6BD,EAAUD,EAAMG,YAC/C/E,KAAKkE,sBAAsBU,EAAME,YAC/B,YAA6BD,EAAUD,EAAMI,e,iGAIrD,YAAMT,WAAU,UAACC,IAGT,YAAAS,WAAV,SAAqBC,GACnB,IAAMC,EAAU,CAAC,CAACC,MAAO,WAAYC,mBAAmB,EAAMC,MAAO,GAAIC,OAAQ,OAAQC,cAAc,IACvG,IAAI,IAAM/E,KAAQyE,EAAO,CACvB,IAAMO,EAASzF,KAAK0F,UAAUjF,GAC3BgF,GAAQN,EAAQQ,KAAKF,GAE1B,OAAON,GAGD,YAAAO,UAAR,SAAkBxD,GAAlB,WACE,GAAGkB,EAAkClB,GAAO,OAAO,KAEnD,IAAI0D,EAAM,CACRC,MAAO3D,EACP4D,WAAYjD,EAAA,EAAaX,aAAI,EAAJA,EAAMY,gBAAkBZ,EACjD6D,UAAU,EACVC,WAAW,EACXC,UAAU,EACVT,cAAc,GAGbpC,EAAkClB,KACnC0D,EAAgB,WAAI,qBACpBA,EAAsB,iBAAI,CAAEM,OAAQ,CAAC,KAAM,QAE3CN,EAAiB,YAAI,SAASO,GAAQ,OAA4B,GAArBA,EAAO3E,KAAKU,GAAgB,KAAO,OAEhF0D,EAAiB,YAAI,SAASO,GAC5B,IAAIC,EAAMD,EAAO9B,SAASvB,cAC1B,GAAU,MAAPsD,EAAaD,EAAO3E,KAAKU,IAAQ,MAC/B,IAAW,OAAPkE,EACJ,OAAO,EADWD,EAAO3E,KAAKU,IAAQ,EAE3C,OAAO,IAIRkB,EAAiClB,KAAO0D,EAAc,UAAI,GAE7D,IAAMS,EAAa,IAAiBC,MAAMpE,EAAM,cAEhD,GAAGmE,EAAW,CACZ,IAAM,EAAWnE,EAEjB0D,EAAgB,WAAI,qBACpBA,EAAsB,iBAAI,CACxBM,OAAQK,OAAOC,KAAKxG,KAAKkE,sBAAsB,IAAa,KAG9D0B,EAAiB,YAAI,SAACO,GACpB,IAAMM,EAAON,EAAO3E,KAAK,GACzB,GAAGiF,EAAK,CACN,IAAMC,EAAW,EAAKzC,aAAa,GAAUwC,GAC7C,OAAOC,EAAWA,EAASL,EAAWrB,aAAeqB,EAAWtB,YAAc,KAE3E,MAAO,IAGda,EAAiB,YAAI,SAACO,GACpB,IAAMQ,EAAM,EAAKzC,sBAAsB,GAAUiC,EAAO9B,UACxD,QAAGsC,IAAKR,EAAO3E,KAAK,GAAYmF,EAAIN,EAAWtB,aAExC,IAIX,OAAOa,G,sCAxGEgB,I,mDAAAA,EAAkB,0ZCb3B,uDAMI,4DAAgB,EAAAC,iBAAhB,CAA+B,uCAGX,EAAA1C,SAAA,MACxB,+B,KAHI,+CAAmB,4B,2DDC3B,CAKwC,K,iFEdxC,uDAEE,4CAEE,qDAGA,8DAGE,6JACF,8BAEF,uCAEA,sDAEE,2IACF,8BAEF,8B,2DAhB0B,4EAIpB,iFAAyB,mCAQ3B,mECIJ,ICdM2C,GAAiB,CACrB,CACEC,KAAM,GACN1E,UDWJ,WAsBA,WACU2E,EACAC,EACAC,GAHV,WACU,KAAAF,SACA,KAAAC,iBACA,KAAAC,cAZV,KAAAC,IAA4B,OAAAC,EAAA,GAAc,CACxCpH,KAAKgH,OAAO9G,YACZF,KAAKgH,OAAOjH,kBAAkBI,KAAK,OAAAoB,EAAA,IAAI,SAAAjB,GAAK,SAAK+G,aAAa/G,SAC7DH,KACD,OAAAoB,EAAA,IAAI,SAAC,G,IAAA,mBAAC+F,EAAU,KAAEC,EAAS,KAAQ,OAAO,YAAP,eAAWD,GAAU,CAAEC,UAAS,QAGrE,KAAAzH,WAAaE,KAAKgH,OAAOlH,WAOvB,KAAAU,uBAAyB,SAACC,GACxB,SAAKuG,OAAOxG,uBAAuBC,IAO7B,KAAA+G,iBAAmB,W,MACrBC,EAAQ,EAAKC,UAAUC,SAASC,IAAIC,mBACxC,GAAoB,IAAjBJ,aAAK,EAALA,EAAOK,QAAV,CACA,IAAMC,EAAyE,QAA3D,EAAGlF,EAAA,EAAa,EAAKmE,OAAOrH,iBAAiBmD,sBAAc,eAAEA,cACjF,EAAKmE,eAAee,KAAK,CACvBC,MAAO,UAASR,EAAMK,OAAS,EAAI,YAAc,WAAS,IAC1DI,QAAS,uCAAiCT,EAAMK,OAAM,IAAIC,EAC1DI,YAAa,QACbC,gBAAiB,WAAM,SAAKC,YAAYZ,EAAMlG,KAAI,SAAA+G,GAAQ,OAAAA,EAAK9G,KAAS,YAIpE,KAAA+G,eAAiB,WACvB,EAAKrB,YAAYc,KAAK,CAACQ,WAAY,CACjC3H,UAAW,EAAKmG,OAAOrH,iBACvB8I,QAAS,IACTC,YAAahG,EAAgB,EAAKsE,OAAOrH,sB,OArB7C,YAAAgJ,WAAA,SAAW1H,GACLA,GAAuB,OAAZA,GACfjB,KAAKgH,OAAOrG,OAAOM,EAAQO,OAuBrB,YAAA6G,YAAR,SAAoBO,GAClB,GAAkB,IAAfA,aAAG,EAAHA,EAAKd,QAAa,OAAO,EAC5B9H,KAAKgH,OAAOhG,OAAO,CAAC4H,IAAG,KAGjB,YAAAvB,aAAR,SAAqB3F,GACnB,MAAO,CACLuG,MAAO,OACPY,QAASnH,EAAe,CACtB,CAACoH,KAAM,MAAOC,SAAU/I,KAAKuI,gBAC7B,CAACO,KAAM,iBAAkBC,SAAU/I,KAAKwH,mBACtC,O,sCAxDGwB,GAAoB,iI,mDAApBA,EAAoB,yD,MAAA,K,qLAL7B,GACG,IAAuB,CAC1B,CAACC,QAAS,IAAgBC,SAAU5J,EAA+B6J,OAAO,O,6PD3B9E,0D,iCAsBA,6C,KAtBmB,yE,mFCoBnB,GCVI3H,KAAM,CAAC4H,aAAc,cAAYC,aAIrC,4B,yDAIaC,I,+EAAAA,IAA2B,SAH7B,CAAC,IAAaC,SAASzC,KACtB,O,EAFZ,GCFA,4B,yDAmBa0C,I,+EAAAA,IAAoB,sBAJ1B,IACA,KAAoB,SAVhB,CACP,IACA,IACA,IACA,IACA,GACA,Q,EAZJ,I,wKCHA,cAGI,WAC4BC,EACxBC,EACQC,EACoCC,EACKC,G,OAEjD,YAAM,IAAI,IAAUA,GAAeJ,EAAWC,EAAiBC,EAAYC,IAAS,K,OAThD,iB,sCAA/BE,GAAc,oHAMS,IAAc,4BACd,IAAmB,M,sDAP1CA,EAAc,QAAdA,EAAc,Y,EAD3B,CAC4C,M,oCCT5C,8DAGaC,EAAsC,CAC/C,IACA","file":"19.8b9fb19552016a717a19.js","sourcesContent":["import { ModelState } from 'src/app/model/interfaces';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { Reducer, StateAction } from 'src/app/state/interfaces';\r\nimport { ComponentState } from '../../interfaces/component-state.interface';\r\n\r\nexport interface UpdateSelectedPropertyCommand extends StateAction {\r\n    selectedProperty: Prop<ModelState>\r\n}\r\n\r\nexport const UpdateSelectedPropertyActionId = \"UPDATE_SELECTED_PROPERTY\";\r\n\r\nexport const UpdateSelectedPropertyReducer: Reducer<ComponentState> = {\r\n    actionId: UpdateSelectedPropertyActionId,\r\n    reducerFn: (state: ComponentState, action: UpdateSelectedPropertyCommand) => { \r\n        return {selectedProperty: action.selectedProperty}\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { distinctUntilChanged, map, switchMap } from \"rxjs/operators\";\r\nimport { Model } from \"src/app/core/models\";\r\nimport { GetWithRelationsConfig } from 'src/app/model/helpers/get-with-relations.config';\r\nimport { ModelState } from 'src/app/model/interfaces';\r\nimport { DeleteModelActionId } from 'src/app/model/state/delete-model/delete-model-action.const';\r\nimport { ActionType } from 'src/app/shared-app/enums';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { FormToSaveModelStateCommandAdapter } from 'src/app/shared/model-form/adapters/form-to-save-model-state-command.adapter';\r\nimport { ComponentStore } from 'src/app/state/component.store';\r\nimport { Store } from 'src/app/state/store';\r\nimport { ComponentState } from '../interfaces/component-state.interface';\r\nimport { DataConfig } from '../interfaces/data-config.interface';\r\nimport { UpdateSelectedPropertyActionId } from './state/update-selected-property.reducer';\r\n\r\n@Injectable()\r\nexport class DataManagerFacade  {\r\n\r\n    properties: Prop<ModelState>[] = \r\n        [\"missions\", \"employers\", \"missionTypes\", \"documentTypes\", \"inboundEmailPasswords\"];\r\n\r\n    selectedProperty$ = this.componentStore.selectProperty$<Prop<ModelState>>(\"selectedProperty\");\r\n\r\n    dataConfig$ = this.selectedProperty$.pipe(\r\n        distinctUntilChanged(), \r\n        switchMap(x => this.getDataConfig$(x)));\r\n\r\n    get selectedProperty() {\r\n        return this.componentStore.selectProperty<Prop<ModelState>>(\"selectedProperty\", false);\r\n    }\r\n\r\n    constructor(\r\n        private store: Store<ModelState>,\r\n        private componentStore: ComponentStore<ComponentState>\r\n    ) { }\r\n\r\n    updateSelectedProperty = (prop: Prop<ModelState>) => \r\n        this.componentStore.dispatch({actionId: UpdateSelectedPropertyActionId, selectedProperty: prop})\r\n\r\n    update = (form: Model): void =>\r\n        this.store.dispatch(new FormToSaveModelStateCommandAdapter({\r\n            stateProp: this.selectedProperty, \r\n            saveAction: ActionType.Update,\r\n            formState: form\r\n        }))\r\n    \r\n  \r\n    delete = (command: {id?: string, ids?: string[]}): void => \r\n        this.store.dispatch({\r\n            ...command, \r\n            stateProp: this.selectedProperty, \r\n            actionId: DeleteModelActionId\r\n        });\r\n \r\n    private getDataConfig$(property: Prop<ModelState>): Observable<DataConfig>{        \r\n        let relationCfg = new GetWithRelationsConfig(property, null, \"all\");\r\n        return this.store.select$(relationCfg.includedProps).pipe(\r\n            map(state => { \r\n            return {\r\n                data: state[property],\r\n                foreigns: state,\r\n                selectedProp: property\r\n            }\r\n        }));\r\n    }\r\n}","import { AppDocumentType } from 'src/app/core/models';\r\nimport { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { NameControl } from '../common-controls.const';\r\n\r\nexport const CreateDocumentTypeForm: DynamicForm<AppDocumentType, any> = {\r\n    submitText: \"Legg til\", controls: [{...NameControl, required: true}],\r\n}","import { Employer } from 'src/app/core/models';\r\nimport { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { EmailControl, GoogleAddressControl, NameControl, PhoneNumberControl } from '../common-controls.const';\r\n\r\nexport const CreateEmployerForm: DynamicForm<Employer, any> = {\r\n    submitText: \"Legg til\",\r\n    controls: [\r\n        {...NameControl, required: true}, \r\n        PhoneNumberControl, \r\n        GoogleAddressControl, \r\n        EmailControl\r\n    ],\r\n}","import { Validators } from '@angular/forms';\r\nimport { InboundEmailPassword } from 'src/app/core/models';\r\nimport { DynamicControl, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { InputQuestionComponent, InputQuestion } from '../../components/dynamic-form-questions/input-question.component';\r\n\r\nconst PasswordControl = <DynamicControl<InboundEmailPassword, any>>{ name: \"password\", required: true,\r\n    type: \"control\", questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{placeholder: \"Epostpassord\"}, \r\n    }], \r\n    validators: [Validators.maxLength(250)] \r\n}\r\n\r\nexport const CreateInboundEmailPasswordForm: DynamicForm<InboundEmailPassword, any> = {\r\n    submitText: \"Legg til\",\r\n    controls: [PasswordControl],\r\n}","import { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { ModelState } from 'src/app/model/interfaces';\r\nimport { CreateDocumentTypeForm } from 'src/app/shared/constants/model-forms/create-document-type-form.const';\r\nimport { CreateEmployerForm } from 'src/app/shared/constants/model-forms/create-employer-form.const';\r\nimport { CreateInboundEmailPasswordForm } from 'src/app/shared/constants/model-forms/create-inbound-email-password-form.const';\r\nimport { CreateMissionTypeForm } from 'src/app/shared/constants/model-forms/create-mission-type-form.const';\r\nimport { CreateMissionForm } from 'src/app/shared/constants/model-forms/save-mission-forms.const';\r\nimport { SaveModelFormState } from 'src/app/shared/model-form';\r\n\r\nexport const PropertyFormMap: {[key: string]: DynamicForm<any, SaveModelFormState<Partial<ModelState>>> } = {\r\n    \"employers\": CreateEmployerForm,\r\n    \"documentTypes\": CreateDocumentTypeForm,\r\n    \"missionTypes\": CreateMissionTypeForm,\r\n    \"inboundEmailPasswords\": CreateInboundEmailPasswordForm,\r\n    \"missions\": CreateMissionForm,\r\n}","import { MissionType } from 'src/app/core/models';\r\nimport { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { NameControl } from '../common-controls.const';\r\n\r\nexport const CreateMissionTypeForm: DynamicForm<MissionType, any> = {\r\n    submitText: \"Legg til\", controls: [ {...NameControl, required: true} ],\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { translations } from 'src/app/shared/translations';\r\n\r\n@Pipe({\r\n  name: 'translate'\r\n})\r\n\r\nexport class TranslatePipe implements PipeTransform {\r\n\r\n    transform(value: string): string {\r\n        return translations[value.toLowerCase()] || value;\r\n    }\r\n\r\n}\r\n","<mat-form-field color=\"accent\" class=\"data-picker\" fxFlex>\n  <mat-label>Velg data</mat-label>\n  <mat-select [ngModel]=\"selectedProperty\" (ngModelChange)=\"changeProperty($event)\">\n    <mat-option *ngFor=\"let prop of properties\" value=\"{{ prop }}\">{{ prop | translate }}</mat-option>\n  </mat-select>\n</mat-form-field>","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-data-property-picker',\r\n  templateUrl: './data-property-picker.component.html',\r\n  styleUrls: ['./data-property-picker.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class DataPropertyPickerComponent {\r\n  \r\n  @Input() properties: string[];\r\n  @Input() selectedProperty: string;\r\n  @Output() propertySelected = new EventEmitter<string>();\r\n\r\n  constructor() { }\r\n\r\n  changeProperty = (property:string) => this.propertySelected.emit(property);\r\n}\r\n","export const DataTableConfig = {\r\n    ignoredProperties: {updatedAt: true, createdAt: true, lastVisited: true, employer: true, missionType: true, fileName: true}, \r\n\r\n    noEditProperties: {id: true, password: true},\r\n    \r\n    booleanProperties: {finished: true},\r\n}","import { ChangeDetectionStrategy, Component, EventEmitter, Output } from '@angular/core';\r\nimport { Model } from 'src/app/core/models/base-entity.interface';\r\nimport { ModelStateConfig } from 'src/app/model/model-state.config';\r\nimport { _convertArrayToObject } from 'src/app/shared-app/helpers/array/convert-array-to-object.helper';\r\nimport { AgGridTableComponent } from 'src/app/shared/components/abstracts/ag-grid-table.component';\r\nimport { translations } from 'src/app/shared/translations';\r\nimport { DataConfig } from '../../interfaces/data-config.interface';\r\nimport { DataTableConfig } from './data-table.config';\r\n\r\n@Component({\r\n  selector: 'app-data-table',\r\n  templateUrl: './data-table.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DataTableComponent extends AgGridTableComponent<Model, DataConfig> {\r\n\r\n  @Output() itemEdited = new EventEmitter();\r\n\r\n  columnDefs: any = [];\r\n  rowData: any = [];\r\n\r\n  private fkModelIdMap: {[foreignKey: string]: {[id: string]: Model}} = {}\r\n\r\n  private fkModelDisplayPropMap: {[foreignKey: string]: {[displayProp: string]: Model}} = {}\r\n\r\n  constructor() { \r\n    super(); \r\n  }\r\n\r\n  editCell = (e:any) => {\r\n    if(e.newValue !== e.oldValue){\r\n      this.itemEdited.emit(e);\r\n    }\r\n  };\r\n\r\n  protected initNgGrid(cfg: DataConfig): void{\r\n    if(!cfg) return super.initNgGrid(cfg);\r\n    const modelCfg = ModelStateConfig.get(cfg.selectedProp);\r\n    if(modelCfg?.foreigns){\r\n      for(const fkStateKey of modelCfg.foreigns){\r\n        const fkCfg = ModelStateConfig.get(fkStateKey);\r\n        const entities = cfg.foreigns[fkStateKey];\r\n        if(entities){\r\n          this.fkModelIdMap[fkCfg.foreignKey] = \r\n            _convertArrayToObject<Model>(entities, fkCfg.identifier);\r\n          this.fkModelDisplayPropMap[fkCfg.foreignKey] = \r\n            _convertArrayToObject<Model>(entities, fkCfg.displayProp);\r\n        }\r\n      };\r\n    }\r\n    super.initNgGrid(cfg);\r\n  }\r\n\r\n  protected addColDefs(object: Object): any[]{\r\n    const colDefs = [{colId: 'checkbox', checkboxSelection: true, width: 42, pinned: 'left', lockPosition: true}];\r\n    for(const prop in object){\r\n      const colDef = this.addColDef(prop);\r\n      if(colDef) colDefs.push(colDef)\r\n    }\r\n    return colDefs;\r\n  }\r\n\r\n  private addColDef(name: string): any{\r\n    if(DataTableConfig.ignoredProperties[name]) return null; //Ignored properties\r\n\r\n    let def = {\r\n      field: name,\r\n      headerName: translations[name?.toLowerCase()] || name,\r\n      sortable: true,\r\n      resizable: true,\r\n      editable: true,\r\n      lockPosition: true\r\n    };\r\n\r\n    if(DataTableConfig.booleanProperties[name]){\r\n      def['cellEditor'] = 'agSelectCellEditor';\r\n      def['cellEditorParams'] = { values: ['Ja', 'Nei'] }\r\n\r\n      def['valueGetter'] = function(params){return params.data[name] == true ? 'Ja' : 'Nei'}\r\n\r\n      def['valueSetter'] = function(params){\r\n        let val = params.newValue.toLowerCase();\r\n        if(val == 'ja') params.data[name] = true;\r\n        else if (val == 'nei') params.data[name] = false;\r\n        else return false;\r\n        return true;\r\n      }\r\n    }\r\n\r\n    if(DataTableConfig.noEditProperties[name]) def['editable'] = false;\r\n\r\n    const fkModelCfg = ModelStateConfig.getBy(name, \"foreignKey\");\r\n\r\n    if(fkModelCfg){\r\n      const fkIdProp = name;\r\n\r\n      def['cellEditor'] = 'agSelectCellEditor';\r\n      def['cellEditorParams'] = { \r\n        values: Object.keys(this.fkModelDisplayPropMap[fkIdProp] || {}), \r\n      }\r\n\r\n      def['valueGetter'] = (params) => { //Get name of fkId and display\r\n        const fkId = params.data[fkIdProp];\r\n        if(fkId){\r\n          const fkEntity = this.fkModelIdMap[fkIdProp][fkId];\r\n          return fkEntity ? fkEntity[fkModelCfg.displayProp || fkModelCfg.identifier] : null;\r\n        }\r\n        else return ''\r\n      };\r\n\r\n      def['valueSetter'] = (params) => {\r\n        const hit = this.fkModelDisplayPropMap[fkIdProp][params.newValue];\r\n        if(hit) params.data[fkIdProp] = hit[fkModelCfg.identifier];\r\n        else return false;\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return def;\r\n  }\r\n  \r\n}\r\n","\n    <ag-grid-angular #dataGrid fxFlex\n        class=\"ag-theme-balham\"\n        rowSelection=\"multiple\"\n        suppressRowClickSelection=\"true\"\n        suppressColumnVirtualisation=\"true\"\n        overlayNoRowsTemplate=\"Tomt\"\n        (modelUpdated)=\"autoSizeGrid()\"\n        [rowData]=\"rowData\"\n        [columnDefs]=\"columnDefs\"   \n        (cellValueChanged)=\"editCell($event)\">\n    </ag-grid-angular>","<app-main-skeleton *ngIf=\"vm$ | async; let vm\" disableElevation=\"true\">\r\n\r\n  <ng-container navbar>\r\n\r\n    <app-main-top-nav-bar [config]=\"vm.navConfig\" >\r\n    </app-main-top-nav-bar>\r\n\r\n    <app-data-property-picker\r\n      [properties]=\"properties\" \r\n      [selectedProperty]=\"vm.selectedProp\" \r\n      (propertySelected)=\"updateSelectedProperty($event)\">\r\n    </app-data-property-picker>\r\n\r\n  </ng-container>\r\n\r\n  <app-data-table class=\"h-100\" #dataTable\r\n    [config]=\"vm\"\r\n    (itemEdited)=\"updateItem($event)\">\r\n  </app-data-table>\r\n\r\n</app-main-skeleton>\r\n\r\n<router-outlet></router-outlet>\r\n","import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\r\nimport { combineLatest, Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ConfirmDialogService } from 'src/app/core/services/ui/confirm-dialog.service';\r\nimport { ModelState } from 'src/app/model/interfaces';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { ModelFormService } from 'src/app/shared/model-form';\r\nimport { FormToSaveModelStateCommandAdapter } from 'src/app/shared/model-form/adapters/form-to-save-model-state-command.adapter';\r\nimport { translations } from 'src/app/shared/translations';\r\nimport { STORE_REDUCERS } from 'src/app/state/injection-tokens';\r\nimport { ComponentStoreProviders } from 'src/app/state/providers.const';\r\nimport { DataConfig } from '../interfaces/data-config.interface';\r\nimport { DataManagerFacade } from './data-manager.facade';\r\nimport { DataTableComponent } from './data-table/data-table.component';\r\nimport { PropertyFormMap } from './property-form.map';\r\nimport { UpdateSelectedPropertyReducer } from './state/update-selected-property.reducer';\r\n\r\ntype ViewModel = {navConfig: MainTopNavConfig} & DataConfig\r\n\r\n@Component({\r\n  selector: 'app-data-manager',\r\n  templateUrl: './data-manager.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    DataManagerFacade,\r\n    ...ComponentStoreProviders,\r\n    {provide: STORE_REDUCERS, useValue: UpdateSelectedPropertyReducer, multi: true}\r\n  ]\r\n})\r\nexport class DataManagerComponent {\r\n@ViewChild('dataTable') dataTable: DataTableComponent;\r\n\r\nvm$:Observable<ViewModel> = combineLatest([\r\n  this.facade.dataConfig$,\r\n  this.facade.selectedProperty$.pipe(map(x => this.getNavConfig(x)))\r\n]).pipe(\r\n  map(([dataConfig, navConfig]) => { return {...dataConfig, navConfig}})\r\n);\r\n\r\nproperties = this.facade.properties;\r\n\r\nconstructor(\r\n  private facade: DataManagerFacade,\r\n  private confirmService: ConfirmDialogService,\r\n  private formService: ModelFormService) { }\r\n\r\n  updateSelectedProperty = (prop: Prop<ModelState>) => \r\n    this.facade.updateSelectedProperty(prop);\r\n  \r\n  updateItem(command: any): void{\r\n    if(!command || command === null) return;\r\n    this.facade.update(command.data); \r\n  }\r\n\r\n  private openDeleteDialog = (): void => {\r\n    let nodes = this.dataTable.dataGrid.api.getSelectedNodes();\r\n    if(nodes?.length == 0) return;\r\n    const translatedProp = translations[this.facade.selectedProperty.toLowerCase()]?.toLowerCase();\r\n    this.confirmService.open({\r\n      title: `Slett ${nodes.length > 1 ? 'ressurser' : 'ressurs'}?`,\r\n      message: `Bekreft at du ønsker å slette ${nodes.length} ${translatedProp}`,  \r\n      confirmText: 'Slett',\r\n      confirmCallback: () => this.deleteItems(nodes.map(node => node.data['id']))\r\n    })\r\n  }\r\n\r\n  private openCreateForm = (): void => {\r\n    this.formService.open({formConfig: {\r\n      stateProp: this.facade.selectedProperty,    \r\n      adapter: FormToSaveModelStateCommandAdapter,\r\n      dynamicForm: PropertyFormMap[this.facade.selectedProperty]\r\n    }})\r\n  }\r\n\r\n  private deleteItems(ids: string[]): boolean{\r\n    if(ids?.length == 0) return false;\r\n    this.facade.delete({ids});   \r\n  }\r\n\r\n  private getNavConfig(selectedProp: string){\r\n    return { \r\n      title: \"Data\", \r\n      buttons: selectedProp ? [\r\n        {icon: \"add\", callback: this.openCreateForm},\r\n        {icon: \"delete_forever\", callback: this.openDeleteDialog} \r\n      ] : null\r\n    };\r\n  }\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { RolePresets } from '../shared-app/enums';\r\nimport { DataManagerComponent } from './data-manager/data-manager.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: DataManagerComponent,\r\n    data: {allowedRoles: RolePresets.Authority},\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class DataManagementRoutingModule {\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { AppAgGridModule } from '../app-ag-grid/app-ag-grid.module';\r\nimport { DeleteModelProviders, SaveModelProviders } from '../model/state/providers.const';\r\nimport { ModelFormModule } from '../shared/model-form/model-form.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { StateModule } from '../state/state.module';\r\nimport { DataManagementRoutingModule } from './data-management-routing.module';\r\nimport { DataManagerComponent } from './data-manager/data-manager.component';\r\nimport { DataPropertyPickerComponent } from './data-manager/data-property-picker/data-property-picker.component';\r\nimport { DataTableComponent } from './data-manager/data-table/data-table.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    DataManagerComponent,\r\n    DataTableComponent,\r\n    DataPropertyPickerComponent,\r\n  ],\r\n  imports: [\r\n    SharedModule,\r\n    FormsModule,\r\n    StateModule,\r\n    ModelFormModule,\r\n    DataManagementRoutingModule,\r\n    AppAgGridModule,\r\n  ],\r\n  providers: [\r\n    ...SaveModelProviders,\r\n    ...DeleteModelProviders,\r\n  ]\r\n})\r\nexport class DataManagementModule { }\r\n","import { Inject, Injectable, Optional, Self, SkipSelf } from '@angular/core';\r\nimport { ActionDispatcher } from './action-dispatcher';\r\nimport { STORE_DEFAULT_STATE, STORE_REDUCERS } from './injection-tokens';\r\nimport { Reducer } from './interfaces';\r\nimport { QueryDispatcher } from './query-dispatcher';\r\nimport { StateBase } from './state-base';\r\nimport { Store } from './store';\r\nimport { StoreBase } from './store-base';\r\n\r\n@Injectable()\r\nexport class ComponentStore<TState> extends StoreBase<TState> {\r\n\r\n    constructor(\r\n        @SkipSelf() @Optional() hostStore: Store<any>,\r\n        queryDispatcher: QueryDispatcher,\r\n        @Self() dispatcher: ActionDispatcher,\r\n        @Self() @Optional() @Inject(STORE_REDUCERS) reducers: Reducer<any>[],\r\n        @Self() @Optional() @Inject(STORE_DEFAULT_STATE) defaultState: Partial<TState>,\r\n    ) { \r\n        super(new StateBase(defaultState), hostStore, queryDispatcher, dispatcher, reducers);    \r\n    }\r\n\r\n}","import { Provider } from '@angular/core'\r\nimport { ActionDispatcher } from './action-dispatcher'\r\nimport { ComponentStore } from './component.store'\r\n\r\nexport const ComponentStoreProviders: Provider[] = [\r\n    ActionDispatcher,\r\n    ComponentStore,\r\n]\r\n"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["./src/app/dynamic-forms/components/base-question.component.ts","./src/app/dynamic-forms/helpers/get-validation-error-message.helper.ts","./src/app/shared-app/components/app-button/app-button.component.html","./src/app/shared-app/components/app-button/app-button.component.ts","./src/app/shared/directives/active-filter.directive.ts","./src/app/shared/components/dynamic-form-questions/auto-complete-question/auto-complete-question.component.html","./src/app/shared/components/dynamic-form-questions/auto-complete-question/auto-complete-question.component.ts","./src/app/dynamic-forms/dynamic-form.store.ts","./src/app/shared/components/dynamic-form-questions/google-places-autocomplete-question.component.ts","./src/app/shared/constants/common-controls.const.ts","./src/app/shared/form/validators/is-object.validator.ts","./src/app/shared-app/helpers/array/filter.helper.ts","./src/app/shared/constants/validation-rules.const.ts","./src/app/shared/form/form-sheet-wrapper.component.ts","./src/app/shared/form/helpers/compare-with-prop.helper.ts","./src/app/dynamic-forms/dynamic-host.directive.ts","./src/app/dynamic-forms/components/control-component-loader.component.ts","./src/app/dynamic-forms/components/dynamic-control-group.component.ts","./src/app/dynamic-forms/components/form-actions.component.ts","./src/app/dynamic-forms/components/dynamic-form.component.ts","./src/app/dynamic-forms/helpers/has-same-state.helper.ts","./src/app/shared-app/directives/input-listener.directive.ts","./src/app/shared/components/main-top-nav-bar/main-top-nav-bar.component.html","./src/app/shared/components/main-top-nav-bar/main-top-nav-bar.component.ts","./src/app/shared-app/track-by-app-button.ts","./src/app/shared/components/dynamic-form-questions/select-question.component.ts","./src/app/shared/components/dynamic-form-questions/input-question.component.ts","./src/app/shared-app/pipes/transform-buttons.pipe.ts","./src/app/shared-app/helpers/trackby/track-by-id.helper.ts","./src/app/shared-app/pipes/reverse-array.ts","./src/app/shared/components/main-skeleton/main-skeleton.component.html","./src/app/shared/components/main-skeleton/main-skeleton.component.ts","./src/app/dynamic-forms/helpers/get-control-observer.helper.ts","./src/app/shared/pipes/func.pipe.ts"],"names":["validationErrorMessages","this","_question","value","onQuestionChanges","getValidationErrorMessage","control","errors","question","width","BaseQuestionComponent","_getValidationErrorMessage","messages","Object","keys","error","errFn","msg","fnHandled","handleFn","fn","parameters","undefined","length","config","params","emit","type","Icon","Stroked","Fab","AppButtonComponent","_viewContainer","_template","checkCount","filterRecord","record","_config","maxChecks","exp","i","stringProps","toLowerCase","includes","searchLower","viewRef","createEmbeddedView","initalizeObserver","context","$implicit","merge","of","initialString","stringChanges$","pipe","filter","x","debounceTime","customDebounceTime","map","criteria","data","slice","ActiveStringFilterDirective","formStore","ngOnInit","vm$","getOptions$","optionsGetter","options","activeFilter","valueChanges","AutoCompleteQuestionComponent","formStateSubject","formState$","asObservable","setFormState","formState","next","getter","Function","DynamicFormStore","googleOptions","types","componentRestrictions","country","addressFormatter","address","formatted_address","onAddressChange","setValue","GooglePlacesAutoCompleteQuestionComponent","HiddenIdControl","name","required","valueGetter","s","id","HiddenMissionIdControl","missionId","PhoneNumberControl","phoneNumber","questions","component","placeholder","validators","minLength","PhoneNumberMinLength","maxLength","PhoneNumberMaxLength","EmailControl","email","GoogleAddressControl","hint","resetable","AddressMaxLength","NameControl","NameMaxLength","FirstNameControl","firstName","LastNameControl","lastName","MissionAutoCompleteControl","mission","state","missions","valueFormatter","val","displayWith","EmployerSelectControl","employer","employers","compareWith","UserSelectControl","user","users","UserNameControl","userName","pattern","_filter","originals","expression","filtered","obj","push","ValidationRules","MissionDescriptionMaxLength","MissionNoteTitleMaxLength","MissionNoteContentMaxLength","TimesheetCommentMaxLength","UserPasswordMinLength","UserPasswordMaxLength","componentFactoryResolver","viewContainerRef","_bottomSheetRef","close","res","dismiss","loadNav","loadForm","factory","resolveComponentFactory","navRef","createComponent","instance","color","backFn","backIcon","navConfig","formComponent","formRef","formConfig","location","nativeElement","style","display","margin","unsubscribe","subscribe","formSubmitted","submitCallback","FormSheetWrapperComponent","_compareProp","prop","option","DynamicHostDirective","cdRef","defaultControlGroupComponent","Subject","ngOnDestroy","complete","loadComponents","controls","form","nestedNames","loadQuestionGroupComponent","loadQuestionComponent","get","onQuestionComponentInit","componentRef","questionWrapper","formControl","noRenderDisabledControls","disabled","loadComponent","marginBottom","hideOnValueChange","initHideObserver","controlGroup","controlGroupComponent","componentFactory","dynamicHost","hook","htmlElement","currentDisplayVal","callback","controlName","takeUntil","markForCheck","ControlComponentLoaderComponent","DynamicControlGroupComponent","styling","itemMargin","reset","canceled","submitted","FormActionsComponent","formBuilder","initalizeForm","checkPasswords","group","notSame","onSubmit","getRawValue","onSubmitFormatter","onCancel","onReset","resetState","markAsDirty","clear","getFormGroup","disabledControls","setValidators","resettable","resetEnabled$","startWith","_hasSameState","state1","state2","compareState","key","formGroup","addControl","getControl","initialValue","asyncValidators","asyncStateValidators","customValidator","take","DynamicFormComponent","inputChanged","inputUpdated","distinctUntilChanged","tap","onKeyUp","event","onInputChange","target","input","InputListenerDirective","mainNavService","loadingService","ButtonTypes","loading$","searchBarHidden","onMenuButtonClick","toggleDrawer","toggleSearchBar","handleSearchFn","searchBar","TrackByButton","MainTopNavBarComponent","_trackByAppButton","index","btn","prototype","constructor","routerLink","defaultCompareWith","o1","o2","options$","SelectQuestionComponent","hideField","defaultHidden","InputQuestionComponent","transform","buttons","newType","result","TransformButtonsPipe","_trackById","entity","arr","reverse","ReverseArrayPipe","trackByFab","trackByChipRow","MainSkeletonComponent","_getControlObserver$","ignoreInitial","apply","args","FuncPipe"],"mappings":"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","file":"2.2465b1953651f6329f91.js","sourcesContent":["import { Directive, HostBinding, Input } from '@angular/core';\r\nimport { AbstractControl, FormGroup } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { _getValidationErrorMessage } from 'src/app/dynamic-forms/helpers/get-validation-error-message.helper';\r\nimport { Question, QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\n\r\n@Directive()\r\nexport abstract class BaseQuestionComponent<TQuestion extends Question>\r\n    implements QuestionComponent {\r\n\r\n  @HostBinding('style.width') width: string;\r\n\r\n  control: AbstractControl;\r\n  form: FormGroup;\r\n  required: boolean;\r\n  hideField$: Observable<boolean>;\r\n\r\n  private _question: TQuestion;\r\n  get question(): TQuestion { return this._question; }\r\n\r\n  @Input() set question(value: TQuestion) {\r\n      this._question = value;\r\n      this.onQuestionChanges(value);  \r\n  }\r\n\r\n  constructor(private validationErrorMessages: ValidationErrorMap) {}\r\n\r\n  getValidationErrorMessage(): string{\r\n    return _getValidationErrorMessage(this.control.errors, this.validationErrorMessages)\r\n  }\r\n\r\n  protected onQuestionChanges(question: TQuestion): void { \r\n    this.width = question.width || \"100%\"   \r\n  }\r\n\r\n}\r\n","import { ValidationErrorMap } from '../validation-error-map.interface';\r\n\r\nexport function _getValidationErrorMessage(errors: {[key: string]: any}, messages: ValidationErrorMap): string{\r\n    if(!errors) return;\r\n    for(const error of Object.keys(errors)){\r\n      const errFn = messages[error];\r\n      let msg = errFn ? errFn(errors[error]) : null;\r\n      if(msg) return msg;\r\n    }\r\n}","<ng-container *ngIf=\"config\">\r\n    <button mat-button *ifRole=\"config.allowedRoles\" \r\n        [color]=\"config.color\"\r\n        [attr.aria-label]=\"config.aria\"\r\n        [ngClass]=\"[\r\n            buttonClass,  \r\n            config.iconSizeClass ? config.iconSizeClass : ''\r\n        ]\"\r\n        (click)=\"handleFn(config.callback)\">\r\n\r\n        <mat-icon *ngIf=\"config.icon\">{{ config.icon }}</mat-icon>\r\n        <mat-icon *ngIf=\"config.svgIcon\" [svgIcon]=\"config.svgIcon\"></mat-icon> \r\n        {{ config.text }}     \r\n    </button>\r\n</ng-container>\r\n\r\n","import { Component, Input, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';\r\nimport { AppButton } from '../../interfaces/app-button.interface';\r\nimport { ButtonTypes } from '../../enums/button-types.enum';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  templateUrl: './app-button.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class AppButtonComponent {\r\n  @Input() config: AppButton;\r\n\r\n  @Output() fnHandled = new EventEmitter();\r\n  \r\n  constructor() { }\r\n\r\n  get buttonClass(): string{\r\n    switch(this.config.type){\r\n      case ButtonTypes.Icon: return \"mat-icon-button\";\r\n      case ButtonTypes.Stroked: return \"mat-stroked-button\";\r\n      case ButtonTypes.Fab: return \"mat-fab\";\r\n      default: return \"\";\r\n    }\r\n  }\r\n\r\n  handleFn = (fn: Function, parameters: any[] = []) => {\r\n    if(parameters == undefined || parameters.length == 0) parameters = this.config.params;\r\n    \r\n    if(parameters) this.fnHandled.emit(fn(...parameters));\r\n    else this.fnHandled.emit(fn());\r\n  };\r\n\r\n}\r\n","import { Directive, EmbeddedViewRef, Input, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { merge, of } from 'rxjs';\r\nimport { debounceTime, filter, map } from 'rxjs/operators';\r\nimport { _filter } from 'src/app/shared-app/helpers/array/filter.helper';\r\nimport { ActiveStringFilterConfig } from '../interfaces/active-string-filter-config.interface';\r\n\r\n@Directive({\r\n  selector: '[appActiveStringFilter]'\r\n})\r\nexport class ActiveStringFilterDirective<TRecord> {\r\n\r\n    private _config: ActiveStringFilterConfig<TRecord>;\r\n    @Input('appActiveStringFilterConfig') set config(value: ActiveStringFilterConfig<TRecord>){\r\n        this._config = value;\r\n        this.initalizeObserver();\r\n    }\r\n\r\n    private viewRef: EmbeddedViewRef<any>;\r\n\r\n    private searchLower: string;\r\n\r\n    private checkCount: number = 0;\r\n\r\n    constructor(    \r\n        _viewContainer: ViewContainerRef,\r\n        _template: TemplateRef<any>) { \r\n        this.viewRef = _viewContainer.createEmbeddedView(_template);\r\n    }\r\n\r\n    private initalizeObserver(): void {\r\n        if(!this._config) return;\r\n        this.viewRef.context.$implicit = merge(\r\n            of(this._config.initialString),\r\n            this._config.stringChanges$\r\n        ).pipe(\r\n            filter(x => !x || typeof x === \"string\"), \r\n            debounceTime(this._config.customDebounceTime || 400), \r\n            map(criteria => {\r\n            this.checkCount = 0; //reset check counter\r\n            if(!criteria) //If no search, just take first n items\r\n                return this._config.maxChecks ? \r\n                this._config.data?.slice(0, this._config.maxChecks) : this._config.data; \r\n            else {\r\n                this.searchLower = criteria.toLowerCase();\r\n                return _filter(this._config.data, this.filterRecord);\r\n            }\r\n        }))\r\n    }\r\n\r\n    private filterRecord = (record: TRecord): boolean => {\r\n        if(!record) return false;\r\n        if(this._config.maxChecks && this.checkCount >= this._config.maxChecks) return false; \r\n        let exp = false;\r\n        for(var i = this._config.stringProps.length; i--;){\r\n            exp = exp || (record[this._config.stringProps[i]] as any).toLowerCase().includes(this.searchLower)\r\n        }\r\n        if(exp && this._config.maxChecks) this.checkCount++;\r\n        return exp;\r\n    }\r\n\r\n\r\n}\r\n","<ng-container *ngIf=\"vm$ | async; let vm\">\r\n\r\n    <ng-container *ngIf=\"!vm.activeFilter else activeFilterView\" \r\n        [ngTemplateOutlet]=\"autocomplete\"\r\n        [ngTemplateOutletContext]=\"{options: vm.options}\">\r\n    </ng-container>\r\n\r\n    <ng-template #activeFilterView>\r\n        <ng-template *appActiveStringFilter=\"let options$; config: vm.activeFilter\"\r\n            [ngTemplateOutlet]=\"autocomplete\" \r\n            [ngTemplateOutletContext]=\"{options:options$ | async}\">\r\n        </ng-template>\r\n    </ng-template>\r\n    \r\n</ng-container>\r\n\r\n<ng-template #autocomplete let-options=\"options\">\r\n    \r\n    <mat-form-field [color]=\"question.color || 'accent'\" class=\"w-100\">\r\n        <mat-label *ngIf=\"question.label\">{{ question.label }}</mat-label>\r\n        \r\n        <input matInput [placeholder]=\"question.placeholder\" [formControl]=\"control\" [required]=\"required\"\r\n            [matAutocomplete]=\"auto1\">\r\n\r\n        <mat-autocomplete #auto1=\"matAutocomplete\" [displayWith]=\"question.displayWith\">\r\n            <mat-option *ngFor=\"let option of options\" [value]=\"question.valueProp ? option[question.valueProp] : option\">\r\n                {{ (question.valueFormatter | func : option) || option }}\r\n            </mat-option>\r\n        </mat-autocomplete>\r\n\r\n        <mat-hint *ngIf=\"question.hint\">{{ question.hint }}</mat-hint>\r\n\r\n        <button mat-icon-button matSuffix *ngIf=\"question.resetable && !control.disabled && control.value\" aria-label=\"Clear\" \r\n            (click)=\"control.setValue(''); control.markAsDirty()\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n\r\n        <mat-error *ngIf=\"control.dirty && control.invalid\">\r\n            {{ getValidationErrorMessage() }}\r\n        </mat-error>\r\n    </mat-form-field>\r\n\r\n</ng-template>","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { DynamicFormStore } from 'src/app/dynamic-forms/dynamic-form.store';\r\nimport { QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { VALIDATION_ERROR_MESSAGES, ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\nimport { ActiveStringFilterConfig } from '../../../interfaces';\r\nimport { BaseQuestionComponent } from '../../../../dynamic-forms/components/base-question.component';\r\nimport { AutoCompleteQuestion } from './auto-complete-question.interface';\r\n\r\nexport interface AutoCompleteViewModel { options: any[], activeFilter: ActiveStringFilterConfig<any> }\r\n\r\n@Component({\r\n  selector: 'app-autocomplete-question',\r\n  templateUrl: 'auto-complete-question.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AutoCompleteQuestionComponent extends BaseQuestionComponent<AutoCompleteQuestion<any>> \r\n    implements QuestionComponent {\r\n\r\n    vm$: Observable<AutoCompleteViewModel>;\r\n\r\n    constructor(\r\n        @Inject(VALIDATION_ERROR_MESSAGES) validationErrorMessages: ValidationErrorMap,\r\n        private formStore: DynamicFormStore<Object>) { \r\n        super(validationErrorMessages) \r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.vm$ = this.formStore.getOptions$(this.question.optionsGetter).pipe(\r\n            map(options => { return {\r\n                options,\r\n                activeFilter: {\r\n                    ...this.question.activeFilter, \r\n                    data: options, \r\n                    stringChanges$: this.control.valueChanges \r\n                }\r\n            }}),\r\n        )\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, of } from 'rxjs';\r\nimport { distinctUntilChanged, map } from 'rxjs/operators';\r\nimport { OptionsGetter } from './interfaces';\r\n\r\n@Injectable()\r\nexport class DynamicFormStore<TFormState extends Object> {\r\n    \r\n    private formStateSubject = new BehaviorSubject<TFormState>(null);\r\n    formState$ = this.formStateSubject.asObservable();\r\n\r\n    get formState(): TFormState {  return this.formStateSubject.value };\r\n    constructor(){ }\r\n\r\n    setFormState(formState: TFormState): void{ this.formStateSubject.next(formState); }\r\n\r\n    getOptions$<T>(getter: OptionsGetter<T>): Observable<T[]> {\r\n        if(getter && getter instanceof Function)\r\n            return this.formState$.pipe(\r\n                map(x => x ? getter(x) : []), \r\n                distinctUntilChanged())\r\n\r\n        return of(getter as T[] || []);\r\n    }\r\n}","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { Address } from 'ngx-google-places-autocomplete/objects/address';\r\nimport { Options } from 'ngx-google-places-autocomplete/objects/options/options';\r\nimport { Question, QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { VALIDATION_ERROR_MESSAGES, ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\nimport { BaseQuestionComponent } from '../../../dynamic-forms/components/base-question.component';\r\n\r\nexport interface GooglePlacesAutoCompleteQuestion extends Question {\r\n    options?: Partial<Options>;\r\n    addressFormatter?: (address: Address) => string; \r\n    resetable?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-google-places-autocomplete-question',\r\n  template: `\r\n    <mat-form-field [color]=\"question.color || 'accent'\" class=\"w-100\">\r\n        <mat-label *ngIf=\"question.label\">{{ question.label }}</mat-label>\r\n        <input ngx-google-places-autocomplete\r\n            [options]=\"googleOptions\"\r\n            [placeholder]=\"question.placeholder\" \r\n            [formControl]=\"control\" \r\n            [required]=\"required\"\r\n            (onAddressChange)=\"onAddressChange($event)\"  matInput />\r\n        \r\n        <mat-hint *ngIf=\"question.hint\">{{ question.hint }}</mat-hint>\r\n\r\n        <button mat-icon-button matSuffix *ngIf=\"question.resetable && !control.disabled  && control.value\" aria-label=\"Clear\" \r\n            (click)=\"control.setValue(''); control.markAsDirty()\">\r\n            <mat-icon>close</mat-icon>\r\n        </button>\r\n\r\n        <mat-error *ngIf=\"control.dirty && control.invalid\">\r\n            {{ getValidationErrorMessage() }}\r\n        </mat-error>\r\n    </mat-form-field>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class GooglePlacesAutoCompleteQuestionComponent extends BaseQuestionComponent<GooglePlacesAutoCompleteQuestion> \r\n    implements QuestionComponent {\r\n    \r\n    googleOptions: Partial<Options> = {\r\n        types: ['geocode'],\r\n        componentRestrictions: { country: \"no\" }\r\n    };\r\n\r\n    addressFormatter = (address: Address) => address.formatted_address\r\n\r\n    constructor(@Inject(VALIDATION_ERROR_MESSAGES) validationErrorMessages: ValidationErrorMap) { \r\n        super(validationErrorMessages) \r\n    }\r\n\r\n    onAddressChange(address: Address){\r\n        this.control.setValue(this.addressFormatter(address))\r\n    }\r\n\r\n    protected onQuestionChanges(value: GooglePlacesAutoCompleteQuestion): void{\r\n        super.onQuestionChanges(value);\r\n\r\n        if(this.question.addressFormatter) \r\n            this.addressFormatter = this.question.addressFormatter\r\n        if(this.question.options)\r\n            this.googleOptions = {...this.googleOptions, ...this.question.options}\r\n    }   \r\n\r\n}\r\n","import { Validators } from '@angular/forms';\r\nimport { Employer, Mission, MissionChild, User } from 'src/app/core/models';\r\nimport { IAddress } from 'src/app/core/models/sub-interfaces/iaddress.interface';\r\nimport { IId } from 'src/app/core/models/sub-interfaces/iid.interface';\r\nimport { IName } from 'src/app/core/models/sub-interfaces/iname.interface';\r\nimport { DynamicControl } from 'src/app/dynamic-forms/interfaces';\r\nimport { StateMissions, StateEmployers, StateUsers } from 'src/app/state/interfaces';\r\nimport { AutoCompleteQuestionComponent } from '../components/dynamic-form-questions/auto-complete-question/auto-complete-question.component';\r\nimport { AutoCompleteQuestion } from '../components/dynamic-form-questions/auto-complete-question/auto-complete-question.interface';\r\nimport { GooglePlacesAutoCompleteQuestionComponent, GooglePlacesAutoCompleteQuestion } from '../components/dynamic-form-questions/google-places-autocomplete-question.component';\r\nimport { InputQuestionComponent, InputQuestion } from '../components/dynamic-form-questions/input-question.component';\r\nimport { SelectQuestionComponent, SelectQuestion } from '../components/dynamic-form-questions/select-question.component';\r\nimport { _compareProp } from '../form/helpers/compare-with-prop.helper';\r\nimport { OptionsFormState } from '../form/interfaces';\r\nimport { isObjectValidator } from '../form/validators/is-object.validator';\r\nimport { ValidationRules } from './validation-rules.const';\r\n\r\nexport const HiddenIdControl = <DynamicControl<IId, any>>{ name: \"id\", required: true,\r\n    type: \"control\", valueGetter: (s: IId) => s.id,         \r\n}\r\nexport const HiddenMissionIdControl = <DynamicControl<MissionChild, any>>{ name: \"missionId\", required: true,\r\n    type: \"control\", valueGetter: (s: MissionChild) => s.missionId,         \r\n}\r\nexport const PhoneNumberControl = <DynamicControl<{phoneNumber: string}, any>>{ name: \"phoneNumber\", \r\n    type: \"control\", valueGetter: (s: {phoneNumber: string}) => s?.phoneNumber, \r\n    questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{placeholder: \"Kontaktnummer\"}, \r\n    }], \r\n    validators: [\r\n        Validators.minLength(ValidationRules.PhoneNumberMinLength), \r\n        Validators.maxLength(ValidationRules.PhoneNumberMaxLength)\r\n    ] \r\n}\r\nexport const EmailControl = <DynamicControl<{email: string}, any>>{ name: \"email\", \r\n    type: \"control\", valueGetter: (s: {email: string}) => s?.email, \r\n    questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{placeholder: \"Epost\"}, \r\n    }], \r\n    validators: [Validators.email] \r\n}\r\nexport const GoogleAddressControl = <DynamicControl<IAddress, any>>{ name: \"address\",\r\n    type: \"control\", valueGetter: (s: IAddress) => s?.address, questions: [{\r\n        component:  GooglePlacesAutoCompleteQuestionComponent,\r\n        question: <GooglePlacesAutoCompleteQuestion>{\r\n            placeholder: \"Adresse\", \r\n            hint: \"F.eks. Furuberget 17, 1940 Bjørkelangen\",\r\n            resetable: true\r\n        }, \r\n    }], \r\n    validators: [Validators.maxLength(ValidationRules.AddressMaxLength)] \r\n}\r\nexport const NameControl = <DynamicControl<IName, any>>{ name: \"name\",\r\n    type: \"control\", valueGetter: (s: IName) => s?.name, questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{placeholder: \"Navn\"}, \r\n    }], \r\n    validators: [Validators.maxLength(ValidationRules.NameMaxLength)] \r\n}\r\nexport const FirstNameControl = <DynamicControl<{firstName: string}, any>>{ name: \"firstName\",\r\n    type: \"control\", valueGetter: (s: {firstName: string}) => s?.firstName, \r\n    questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{placeholder: \"Fornavn\"}, \r\n    }], \r\n}\r\nexport const LastNameControl = <DynamicControl<{lastName: string}, any>>{ name: \"lastName\",\r\n    type: \"control\", valueGetter: (s: {lastName: string}) => s?.lastName, \r\n    questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{placeholder: \"Etternavn\"}, \r\n    }], \r\n}\r\nexport const MissionAutoCompleteControl = <DynamicControl<{mission: Mission}, OptionsFormState<StateMissions>>>{ name: \"mission\", \r\n    valueGetter: (s: {mission: Mission}) => s.mission,\r\n    type: \"control\", questions: [{\r\n        component:  AutoCompleteQuestionComponent,\r\n        question: <AutoCompleteQuestion<Mission>>{\r\n            optionsGetter: (state: OptionsFormState<StateMissions>) => state.options.missions,\r\n            placeholder: \"Oppdrag\",\r\n            valueFormatter: (val: Mission) => val.address,\r\n            displayWith: (mission: Mission) => mission ? mission.address : null,\r\n            resetable: true,\r\n            activeFilter: { stringProps: [\"address\"], maxChecks: 50 }\r\n        }, \r\n    }],\r\n    validators: [isObjectValidator()], \r\n}\r\nexport const EmployerSelectControl = <DynamicControl<{employer: Employer}, OptionsFormState<StateEmployers>>>{ name: \"employer\",\r\n    valueGetter: (s: {employer: Employer}) => s.employer,\r\n    type: \"control\", questions: [{\r\n        component:  SelectQuestionComponent,\r\n        question: <SelectQuestion<Employer>>{\r\n            optionsGetter: (s: OptionsFormState<StateEmployers>) => s.options.employers,\r\n            valueFormatter: (val: Employer) => val.name,\r\n            compareWith: _compareProp(\"id\"),\r\n            placeholder: \"Velg oppdragsgiver\",\r\n        }, \r\n    }], \r\n}\r\nexport const UserSelectControl = <DynamicControl<{user: User}, OptionsFormState<StateUsers>>>{ name: \"user\",\r\n    type: \"control\", valueGetter: (s: {user: User}) => s.user, questions: [{\r\n        component:  SelectQuestionComponent,\r\n        question: <SelectQuestion<User>>{\r\n            optionsGetter: (state: OptionsFormState<StateUsers>) => state.options.users,\r\n            valueFormatter: (val: User) => val.firstName + ' ' + val.lastName,\r\n            compareWith: _compareProp(\"userName\"),\r\n            placeholder: \"Velg ansatt\",\r\n        }, \r\n    }], \r\n} \r\nexport const UserNameControl = <DynamicControl<{userName: string}, any>>{ name: \"userName\", \r\n    type: \"control\", valueGetter: (s: {userName: string}) => s?.userName, questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{placeholder: \"Brukernavn\"}, \r\n    }], \r\n    validators: [\r\n        Validators.pattern('^[a-zA-Z0-9_.-]*$'),\r\n        Validators.minLength(4),\r\n        Validators.maxLength(ValidationRules.NameMaxLength)\r\n    ] \r\n}","import { ValidatorFn, AbstractControl } from '@angular/forms';\r\n\r\nexport function isObjectValidator(): ValidatorFn{ \r\n    return (control: AbstractControl): {[key: string]: any} | null => {\r\n      let invalid = !(!control.value || control.value instanceof Object);\r\n      return invalid ? {'isobject': {value: control.value}} : null;\r\n    };\r\n  }","export function _filter<T>(originals: ReadonlyArray<T>, expression: (value: T, index?: number, Array?: any[]) => boolean): T[]{\r\n    if(!originals || originals.length == 0) return undefined;\r\n    let filtered = [];\r\n    for(let i = 0; i < originals.length; i++){\r\n      let obj = originals[i];\r\n      if(expression(obj)) filtered.push(obj);\r\n    }\r\n    return filtered;\r\n}","export const ValidationRules = {\r\n    PhoneNumberMinLength: 4,\r\n    PhoneNumberMaxLength: 12,\r\n\r\n    NameMaxLength: 45,\r\n\r\n    AddressMaxLength: 100,\r\n\r\n    MissionDescriptionMaxLength: 400,\r\n\r\n    MissionNoteTitleMaxLength: 75,\r\n\r\n    MissionNoteContentMaxLength: 400,\r\n\r\n    TimesheetCommentMaxLength: 400,\r\n\r\n    UserPasswordMinLength: 7,\r\n    UserPasswordMaxLength: 100,\r\n}","import { ChangeDetectionStrategy, Component, ComponentFactoryResolver, Inject, ViewContainerRef } from '@angular/core';\r\nimport { MatBottomSheetRef, MAT_BOTTOM_SHEET_DATA } from '@angular/material/bottom-sheet';\r\nimport { take, takeUntil, tap } from 'rxjs/operators';\r\nimport { WithUnsubscribe } from 'src/app/shared-app/mixins/with-unsubscribe.mixin';\r\nimport { MainTopNavBarComponent } from 'src/app/shared/components/main-top-nav-bar/main-top-nav-bar.component';\r\nimport { FormSheetWrapperConfig } from './interfaces';\r\n\r\ntype WrapperConfig = FormSheetWrapperConfig<any, any, any>;\r\n\r\n@Component({\r\n    selector: 'app-form-sheet-wrapper',\r\n    template: ``,\r\n    changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormSheetWrapperComponent extends WithUnsubscribe() {\r\n    \r\n    constructor(\r\n        private componentFactoryResolver: ComponentFactoryResolver,\r\n        private viewContainerRef: ViewContainerRef,\r\n        private _bottomSheetRef: MatBottomSheetRef<FormSheetWrapperComponent, any>, \r\n        @Inject(MAT_BOTTOM_SHEET_DATA) private config: WrapperConfig) { super() }\r\n    \r\n        ngOnInit() {\r\n            this.loadNav();\r\n            this.loadForm();\r\n        }\r\n    \r\n        close = (res: any): void => this._bottomSheetRef.dismiss(res);\r\n        \r\n        private loadNav(){\r\n            const factory = this.componentFactoryResolver.resolveComponentFactory(MainTopNavBarComponent);\r\n            let navRef = this.viewContainerRef.createComponent(factory);\r\n            navRef.instance.color = \"transparent\";\r\n            navRef.instance.config = {\r\n                backFn: () => this.close(null), \r\n                backIcon: \"close\", \r\n                ...this.config.navConfig\r\n            }; \r\n        }\r\n    \r\n        private loadForm(){\r\n            const factory = this.componentFactoryResolver.resolveComponentFactory(this.config.formComponent);\r\n            let formRef = this.viewContainerRef.createComponent(factory);\r\n            formRef.instance.config = this.config.formConfig;         \r\n            formRef.location.nativeElement.style.display = \"block\";\r\n            formRef.location.nativeElement.style.margin = \"0px 12px 12px 12px\";\r\n\r\n            if(this.config.formState$)\r\n                this.config.formState$.pipe(takeUntil(this.unsubscribe))\r\n                    .subscribe(x => formRef.instance.formState = x)\r\n\r\n            formRef.instance.formSubmitted.pipe(take(1),\r\n                tap(x => (x && this.config.submitCallback) ? this.config.submitCallback(x) : null),\r\n            ).subscribe(x => this.close(x))\r\n        }\r\n        \r\n}\r\n","import { Prop } from 'src/app/shared-app/prop.type';\r\n\r\nexport function _compareProp<T extends Object>(prop: Prop<T>): (option: T, value: T) => boolean {\r\n    return (option: T, value: T) => (option ? option[prop] : null) === (value ? value[prop] : null)\r\n}","import { Directive, ViewContainerRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[dynamicHost]',\r\n})\r\nexport class DynamicHostDirective {\r\n  constructor(public viewContainerRef: ViewContainerRef) { }\r\n}","import { ChangeDetectorRef, ComponentFactoryResolver, ComponentRef, Directive, Type } from '@angular/core';\r\nimport { AbstractControl, FormGroup } from '@angular/forms';\r\nimport { Subject } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { DynamicHostDirective } from '../dynamic-host.directive';\r\nimport { _getControlObserver$ } from '../helpers/get-control-observer.helper';\r\nimport { ControlGroupComponent, ControlHook, DynamicControl, DynamicControlGroup, DynamicForm, QuestionComponent, QuestionWrapper } from '../interfaces';\r\n\r\nexport type ValidControl = DynamicControlGroup<any> | DynamicControl<any, any>;\r\n\r\n@Directive()\r\nexport abstract class ControlComponentLoaderComponent {\r\n    dynamicHost: DynamicHostDirective;\r\n\r\n    unsubscribe : Subject<void> = new Subject();\r\n\r\n    form: FormGroup;\r\n\r\n    constructor(\r\n        private componentFactoryResolver: ComponentFactoryResolver,  \r\n        private cdRef: ChangeDetectorRef,      \r\n        private defaultControlGroupComponent: Type<ControlGroupComponent>,\r\n    ) { }\r\n\r\n    ngOnDestroy(){\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n\r\n    protected loadComponents(controls: ValidControl[], form: DynamicForm<any,any>, nestedNames: string[] = []): void{\r\n        for(const control of controls){\r\n            if(control.type === \"group\")\r\n                this.loadQuestionGroupComponent(control, form, nestedNames)       \r\n            else if(control.questions)\r\n                for(const question of control.questions)\r\n                    this.loadQuestionComponent(question, control, this.form.get([...nestedNames, control.name]), form);\r\n        }\r\n    }\r\n\r\n    protected onQuestionComponentInit(componentRef: ComponentRef<QuestionComponent>, control: DynamicControl<any, any>): void {}\r\n\r\n    private loadQuestionComponent(questionWrapper: QuestionWrapper, control: DynamicControl<any, any>, formControl: AbstractControl, formConfig: DynamicForm<any,any>) {\r\n        if(formConfig.noRenderDisabledControls && formControl.disabled) return;\r\n        \r\n        const componentRef = this.loadComponent(questionWrapper.component);\r\n        componentRef.instance.control = formControl;\r\n        componentRef.instance.form = this.form;\r\n        componentRef.instance.question = questionWrapper.question;  \r\n        componentRef.instance.required = control.required;  \r\n        componentRef.location.nativeElement.style.marginBottom = \"8px\";\r\n\r\n        this.onQuestionComponentInit(componentRef, control);\r\n\r\n        if(questionWrapper.hideOnValueChange)\r\n            this.initHideObserver(questionWrapper.hideOnValueChange, componentRef.location.nativeElement);\r\n    }\r\n\r\n    private loadQuestionGroupComponent(controlGroup: DynamicControlGroup<any>, formConfig: DynamicForm<any,any>, nestedNames: string[] = []) {\r\n        const componentRef = this.loadComponent(controlGroup.controlGroupComponent || this.defaultControlGroupComponent);\r\n        componentRef.instance.controlGroup = controlGroup;\r\n        componentRef.instance.formConfig = formConfig;\r\n        componentRef.instance.form = this.form;\r\n        componentRef.instance.nestedNames = controlGroup.name ? [...nestedNames, controlGroup.name] : nestedNames;\r\n    }\r\n\r\n    private loadComponent<TComponent>(component: Type<TComponent>): ComponentRef<TComponent>{\r\n        const componentFactory = this.componentFactoryResolver.resolveComponentFactory(component);\r\n\r\n        const viewContainerRef = this.dynamicHost.viewContainerRef;\r\n\r\n        return viewContainerRef.createComponent<TComponent>(componentFactory);\r\n    }\r\n\r\n    private initHideObserver(hook: ControlHook<boolean>, htmlElement: HTMLElement): void{   \r\n        const currentDisplayVal = htmlElement.style.display;\r\n\r\n        if(hook.callback(this.form.get(hook.controlName)?.value)) \r\n            htmlElement.style.display = \"none\";\r\n\r\n        _getControlObserver$(hook, this.form, true).pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n            htmlElement.style.display = (x ? \"none\" : currentDisplayVal);\r\n            this.cdRef.markForCheck();\r\n        })\r\n    }\r\n\r\n}","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactoryResolver, ComponentRef, ViewChild } from '@angular/core';\r\nimport { DynamicHostDirective } from '../dynamic-host.directive';\r\nimport { ControlGroupComponent, DynamicControl, DynamicControlGroup, DynamicForm, QuestionComponent } from '../interfaces';\r\nimport { ControlComponentLoaderComponent } from './control-component-loader.component';\r\n\r\n@Component({\r\n  selector: 'app-dynamic-control-group',\r\n  template: `\r\n  <mat-label *ngIf=\"controlGroup.label\">{{ controlGroup.label }}</mat-label>\r\n  <div \r\n    [fxLayout]=\"controlGroup.styling?.fxLayout || 'row'\" \r\n    [fxLayoutAlign]=\"controlGroup.styling?.fxLayoutAlign || 'start center'\" \r\n    >   \r\n    <ng-container *dynamicHost>\r\n\r\n    </ng-container>\r\n  </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class DynamicControlGroupComponent extends ControlComponentLoaderComponent implements ControlGroupComponent{\r\n    @ViewChild(DynamicHostDirective, {static: true}) dynamicHost: DynamicHostDirective;\r\n    \r\n    controlGroup: DynamicControlGroup<any>;\r\n    formConfig: DynamicForm<any, any>;\r\n    nestedNames: string[] = [];\r\n\r\n    constructor(componentFactoryResolver: ComponentFactoryResolver, cdRef: ChangeDetectorRef) {\r\n        super(componentFactoryResolver, cdRef, DynamicControlGroupComponent)\r\n    }\r\n\r\n    ngOnInit(): void  {\r\n        this.loadComponents(this.controlGroup.controls, this.formConfig, this.nestedNames);\r\n    }\r\n\r\n    protected onQuestionComponentInit(componentRef: ComponentRef<QuestionComponent>, control: DynamicControl<any, any>): void {\r\n      componentRef.location.nativeElement.style.margin = this.controlGroup.styling?.itemMargin || \"0 8px 0 0\"\r\n    }\r\n}\r\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-form-actions',\r\n  template:`\r\n  <div fxLayout=\"row\" fxLayoutAlign=\"end start\" class=\"mt-3\"> \r\n    <button mat-button *ngIf=\"showReset else cancelButton\" [disabled]=\"resetDisabled\" color=\"warn\" (click)=\"reset.emit()\">\r\n      Nullstill\r\n    </button>\r\n    <ng-template #cancelButton>\r\n      <button mat-button fxFlex=35 color=\"warn\" \r\n        (click)=\"canceled.emit()\">\r\n        Avbryt    \r\n      </button>   \r\n    </ng-template>\r\n    <button mat-raised-button fxFlex=40 color=\"accent\" \r\n      [disabled]=\"submitDisabled\"\r\n      (click)=\"submitted.emit()\">\r\n      {{ submitText }}    \r\n    </button>\r\n  </div>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class FormActionsComponent {\r\n    \r\n   @Input() submitDisabled: boolean;\r\n   @Input() submitText: boolean;\r\n\r\n   @Input() showReset?: boolean;\r\n   @Input() resetDisabled?: boolean\r\n\r\n   @Output() reset = new EventEmitter();\r\n   @Output() canceled = new EventEmitter();\r\n   @Output() submitted = new EventEmitter();\r\n\r\n  constructor() {}\r\n\r\n}\r\n","import { Inject } from '@angular/core';\r\nimport { ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactoryResolver, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { AbstractControl, AsyncValidatorFn, FormBuilder, FormGroup, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { debounceTime, map, startWith, take } from 'rxjs/operators';\r\nimport { _hasSameState } from 'src/app/dynamic-forms/helpers/has-same-state.helper';\r\nimport { FormComponent } from 'src/app/shared/form';\r\nimport { DynamicFormStore } from '../dynamic-form.store';\r\nimport { DynamicHostDirective } from '../dynamic-host.directive';\r\nimport { _getValidationErrorMessage } from '../helpers/get-validation-error-message.helper';\r\nimport { DisabledObjectMap, DynamicControl, DynamicForm } from '../interfaces';\r\nimport { ValidationErrorMap, VALIDATION_ERROR_MESSAGES } from '../validation-error-map.interface';\r\nimport { ControlComponentLoaderComponent, ValidControl } from './control-component-loader.component';\r\nimport { DynamicControlGroupComponent } from './dynamic-control-group.component';\r\n\r\n@Component({\r\n  selector: 'app-dynamic-form',\r\n  template: `\r\n    <form [formGroup]=\"form\" fxLayout=\"column\">\r\n        <ng-container *dynamicHost>\r\n\r\n        </ng-container>\r\n\r\n        <mat-error *ngIf=\"form.dirty && form.invalid && form.errors\">\r\n            {{ getValidationErrorMessage() }}\r\n        </mat-error>\r\n\r\n        <app-form-actions \r\n            [submitDisabled]=\"form.pristine || form.invalid\" \r\n            [submitText]=\"config.submitText || 'Lagre'\" \r\n            [showReset]=\"config.resettable\"\r\n            [resetDisabled]=\"!(resetEnabled$ | async)\"\r\n            (reset)=\"onReset()\"\r\n            (submitted)=\"onSubmit()\" \r\n            (canceled)=\"onCancel()\">\r\n        </app-form-actions>\r\n    </form>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [DynamicFormStore],\r\n})\r\nexport class DynamicFormComponent extends ControlComponentLoaderComponent \r\n    implements FormComponent<DynamicForm<any, any>, Object, any> {\r\n        \r\n    @ViewChild(DynamicHostDirective, {static: true}) dynamicHost: DynamicHostDirective;\r\n    \r\n    private _config: DynamicForm<any, any>;\r\n    @Input('config') \r\n    set config(value: DynamicForm<any, any>) {\r\n      this._config = value;\r\n      this.initalizeForm();\r\n    }  \r\n\r\n    get config(): DynamicForm<any, any> { return this._config }\r\n\r\n    @Input('formState') \r\n    set formState(value: Object) {\r\n      this.formStore.setFormState(value)\r\n    }\r\n\r\n    @Output() formSubmitted = new EventEmitter<any>();\r\n\r\n    resetEnabled$: Observable<boolean>;\r\n\r\n    constructor(\r\n        componentFactoryResolver: ComponentFactoryResolver,\r\n        cdRef: ChangeDetectorRef,\r\n        @Inject(VALIDATION_ERROR_MESSAGES) private validationErrorMessages: ValidationErrorMap,\r\n        private formStore: DynamicFormStore<Object>,\r\n        private formBuilder: FormBuilder,\r\n    ) { super(componentFactoryResolver, cdRef, DynamicControlGroupComponent); }\r\n\r\n    checkPasswords(group: FormGroup) { // here we have the 'passwords' group\r\n    let pass = group.get('newPassword').value;\r\n    let confirmPass = group.get('confirmPassword').value;\r\n  \r\n    return pass === confirmPass ? null : { notSame: true }     \r\n    }\r\n\r\n    onSubmit(){\r\n        let value = this._config.getRawValue ? this.form.getRawValue() : this.form.value;\r\n        if(this._config.onSubmitFormatter)\r\n            value = this._config.onSubmitFormatter(value, this.formStore.formState);\r\n        this.formSubmitted.emit(value);\r\n    }\r\n\r\n    onCancel(){\r\n        this.formSubmitted.emit(null);\r\n    }\r\n\r\n    onReset(){\r\n        this.form.reset(this._config.resetState || {});\r\n        this.form.markAsDirty()\r\n    }\r\n    \r\n    getValidationErrorMessage(): string{\r\n        return _getValidationErrorMessage(this.form.errors, this.validationErrorMessages)\r\n    }\r\n\r\n    private initalizeForm() {\r\n        this.dynamicHost.viewContainerRef.clear();\r\n\r\n        this.form = this.getFormGroup(this._config.controls, this._config.disabledControls); //Add controls first\r\n        this.form.setValidators(this.config.validators)\r\n\r\n        if(this._config.resettable)\r\n            this.resetEnabled$ = this.form.valueChanges.pipe(\r\n                debounceTime(50),\r\n                startWith(true),\r\n                map(x => !_hasSameState(this.form.value, this._config.resetState)),\r\n            )\r\n\r\n        this.loadComponents(this._config.controls, this._config);\r\n    }\r\n\r\n    private getFormGroup(controls: ValidControl[], disabledControls: DisabledObjectMap<any>): FormGroup{\r\n        const formGroup = this.formBuilder.group({});\r\n        for(const control of controls) {\r\n            if(control.type === \"group\") {\r\n                if(control.name)\r\n                    formGroup.addControl(control.name, this.getFormGroup(control.controls, control.disabledControls));\r\n                else {\r\n                   const controls = this.getFormGroup(control.controls, disabledControls).controls;\r\n                   for(const key in controls)\r\n                       formGroup.addControl(key, controls[key]);           \r\n                }\r\n            }\r\n            else\r\n                formGroup.addControl(\r\n                    control.name, \r\n                    this.getControl(control, disabledControls ? disabledControls[control.name] : false)\r\n                );\r\n        }\r\n        return formGroup;\r\n    }\r\n\r\n    private getControl(control: DynamicControl<any, any>, disabled: boolean): AbstractControl {\r\n        const value = \r\n            control.valueGetter instanceof Function ? control.valueGetter(this._config.initialValue || {}) : control.valueGetter;\r\n  \r\n        const validators: ValidatorFn[] = control.validators || [];\r\n        if(control.required) validators.push(Validators.required)\r\n\r\n        const asyncValidators: AsyncValidatorFn[] = [];\r\n        if(control.asyncStateValidators) //Validators using state as input\r\n            for(const customValidator of control.asyncStateValidators) \r\n                asyncValidators.push(customValidator(this.formStore.formState$.pipe(take(1)))) \r\n\r\n        return this.formBuilder.control({value, disabled}, validators, asyncValidators);\r\n    }\r\n\r\n}\r\n","export function _hasSameState<T extends Object>(state1: T, state2: T): boolean{\r\n    const state = state1 || {};\r\n    const compareState = state2 || {}\r\n    for (var key in state) {  \r\n        const value = state[key];\r\n        const compareValue = compareState[key];\r\n        if(value && typeof value === \"object\") {\r\n            if(!_hasSameState(value, compareValue)) return false;\r\n        }\r\n        else if(value != compareState[key]) return false;\r\n    }\r\n    return true;\r\n}","import { Directive, EventEmitter, HostListener, Input, Output } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { debounceTime, distinctUntilChanged, takeUntil, tap } from 'rxjs/operators';\r\nimport { WithUnsubscribe } from '../mixins/with-unsubscribe.mixin';\r\n\r\n@Directive({\r\n  selector: '[appInputListener]'\r\n})\r\nexport class InputListenerDirective extends WithUnsubscribe(){\r\n\r\n  @Input() debounceTime: number = 400;\r\n  @Output() inputChanged = new EventEmitter();\r\n\r\n  private inputUpdated: Subject<string> = new Subject();\r\n\r\n  constructor() {\r\n    super();\r\n    this.inputUpdated.asObservable()\r\n      .pipe(\r\n        debounceTime(this.debounceTime),\r\n        distinctUntilChanged(),\r\n        tap(data => this.inputChanged.emit(data)), \r\n        takeUntil(this.unsubscribe),\r\n      ).subscribe();\r\n  }\r\n\r\n  @HostListener(\"keyup\", [\"$event\"]) onKeyUp(event: any) {\r\n    this.onInputChange(event.target.value)\r\n  }\r\n  \r\n  onInputChange(input: string){\r\n    this.inputUpdated.next(input)\r\n  }\r\n\r\n}\r\n","<mat-toolbar #navBar *ngIf=\"config\" [ngClass]=\"stylingClass\" [color]=\"color\" \r\n    [ngStyle]=\"{background: color === 'transparent' ? 'transparent' : ''}\">\r\n\r\n    <ng-container *ngIf=\"searchBarHidden || !config.searchBar else searchBarContent\">\r\n        \r\n        <app-button *ngIf=\"config.backFn else menuBtn\" [config]=\"{\r\n            callback: config.backFn, \r\n            params: config.backFnParams,\r\n            type: ButtonTypes.Icon,\r\n            aria: 'Tilbake',\r\n            icon: config.backIcon || 'chevron_left',\r\n            iconSizeClass: config.backIcon ? '' : 'scale-150'}\">\r\n        </app-button>\r\n\r\n        <ng-template #menuBtn>\r\n            <button mat-icon-button aria-label=\"Toggle sidenav\" (click)=\"onMenuButtonClick()\" fxHide.gt-xs>\r\n                <mat-icon aria-label=\"Side nav toggle icon\">menu</mat-icon>\r\n            </button>\r\n        </ng-template>\r\n\r\n        <span class=\"mr-auto\">\r\n            <ng-container *ngIf=\"config.title\">\r\n                <span *ngIf=\"!config.backFn else noLinkTitle\" ngClass.xs=\"ml-1\" ngClass.gt-xs=\"ml-2\"\r\n                    [routerLink]=\"['/hjem']\">{{ config.title || \"Hjem\" }}</span>\r\n                <ng-template #noLinkTitle><span ngClass.xs=\"ml-1\" ngClass.gt-xs=\"ml-2\">{{ config.title }}</span>\r\n                </ng-template>\r\n            </ng-container>\r\n            <mat-icon *ngIf=\"config.subIcon\" class=\"scale-75\">{{ config.subIcon }}</mat-icon>\r\n            <span class=\"mat-caption ml-1\">{{ config.subTitle }}</span>\r\n        </span>\r\n\r\n        <mat-spinner *ngIf=\"loading$ |  async\" diameter=\"24\" color=\"accent\" class=\"mr-2\"></mat-spinner>\r\n\r\n        <app-button *ngIf=\"config.searchBar\" [config]=\"{\r\n            callback: toggleSearchBar, \r\n            type: ButtonTypes.Icon,\r\n            aria: 'Søk',\r\n            icon: 'search'}\">\r\n        </app-button>\r\n\r\n        <app-button *ngFor=\"let button of config.buttons | transformButtons: ButtonTypes.Icon; trackBy: TrackByButton\" [config]=\"button\">\r\n        </app-button>\r\n\r\n    </ng-container>\r\n\r\n</mat-toolbar>\r\n\r\n\r\n<ng-template #searchBarContent>\r\n    <app-button [config]=\"{\r\n      callback: toggleSearchBar, \r\n      type: ButtonTypes.Icon,\r\n      aria: 'Tilbake',\r\n      icon: 'close'}\">\r\n    </app-button>\r\n\r\n    <input #searchInput appInputListener (inputChanged)=\"handleSearchFn($event);\" fxFlex\r\n        [value]=\"config.searchBar.initialValue || ''\" [placeholder]=\"config.searchBar.placeholder\"\r\n        class=\"mt-1 mb-1 p-2 pl-3 mr-1\" style=\"background:white;border:none;border-radius:10px;\">\r\n</ng-template>","import { ChangeDetectionStrategy, Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LoadingService } from 'src/app/core/services/loading.service';\r\nimport { MainNavService } from 'src/app/layout/main-nav.service';\r\nimport { ButtonTypes } from 'src/app/shared-app/enums';\r\nimport { _trackByAppButton } from 'src/app/shared-app/track-by-app-button';\r\nimport { MainTopNavConfig } from './main-top-nav.config';\r\n\r\n@Component({\r\n  selector: 'app-main-top-nav-bar',\r\n  templateUrl: './main-top-nav-bar.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class MainTopNavBarComponent {\r\n  @ViewChild('searchInput') searchInput: ElementRef;\r\n  \r\n  @Input() config: MainTopNavConfig;\r\n  @Input() stylingClass: string;\r\n  @Input() color: \"primary\" | \"accent\" | \"warn\" | \"transparent\" = \"primary\";\r\n  ButtonTypes = ButtonTypes;\r\n  \r\n  loading$: Observable<boolean> = this.loadingService.loading$;\r\n\r\n  searchBarHidden: boolean = true;\r\n\r\n  constructor(\r\n      private mainNavService: MainNavService,\r\n      private loadingService: LoadingService\r\n    ) {}\r\n\r\n  onMenuButtonClick = () => this.mainNavService.toggleDrawer();\r\n\r\n  toggleSearchBar = () => \r\n    this.searchBarHidden = !this.searchBarHidden\r\n\r\n  handleSearchFn = (criteria: string) => this.config.searchBar.callback(criteria);\r\n\r\n  TrackByButton = _trackByAppButton\r\n\r\n}\r\n","import { AppButton } from './interfaces/app-button.interface';\r\n\r\nexport const _trackByAppButton = (index: number, btn: AppButton) => \r\n    btn && (btn.callback?.prototype.constructor || btn.routerLink);","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { DynamicFormStore } from 'src/app/dynamic-forms/dynamic-form.store';\r\nimport { Question, OptionsGetter, QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { VALIDATION_ERROR_MESSAGES, ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\nimport { Prop } from 'src/app/shared-app/prop.type';\r\nimport { BaseQuestionComponent } from '../../../dynamic-forms/components/base-question.component';\r\n\r\nexport interface SelectQuestion<T> extends Question {\r\n  optionsGetter: OptionsGetter<T>;\r\n  valueProp?: Prop<T>;\r\n  valueFormatter?: (val: T) => any;\r\n  compareWith?: (o1: any, o2: any) => boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-select-question',\r\n  template: `\r\n    <mat-form-field [color]=\"question.color || 'accent'\" class=\"w-100\">\r\n        <mat-label *ngIf=\"question.label\">{{ question.label }}</mat-label>\r\n        <mat-select [placeholder]=\"question.placeholder\" [formControl]=\"control\" [required]=\"required\" [compareWith]=\"question.compareWith || defaultCompareWith\">\r\n            <mat-option *ngIf=\"!required\">Ingen</mat-option>\r\n            <mat-option *ngFor=\"let option of options$ | async\" \r\n              [value]=\"question.valueProp ? option[question.valueProp] : option\">\r\n                {{ (question.valueFormatter | func : option) || option }}\r\n            </mat-option>\r\n        </mat-select>\r\n        <mat-hint *ngIf=\"question.hint\">{{ question.hint }}</mat-hint>\r\n        <mat-error *ngIf=\"control.dirty && control.invalid\">\r\n          {{ getValidationErrorMessage() }}\r\n        </mat-error>\r\n\r\n    </mat-form-field>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class SelectQuestionComponent extends BaseQuestionComponent<SelectQuestion<any>> implements QuestionComponent {\r\n\r\n  defaultCompareWith = (o1: any, o2: any) => o1 === o2;\r\n\r\n  state: Object = this.formStore.formState;\r\n\r\n  options$: Observable<any[]>;\r\n\r\n  constructor(\r\n    @Inject(VALIDATION_ERROR_MESSAGES) validationErrorMessages: ValidationErrorMap,\r\n    private formStore: DynamicFormStore<any>) { \r\n    super(validationErrorMessages) \r\n  }\r\n  \r\n  ngOnInit(): void {\r\n    this.options$ = this.formStore.getOptions$(this.question.optionsGetter)\r\n  }\r\n\r\n}\r\n","import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';\r\nimport { Question, QuestionComponent } from 'src/app/dynamic-forms/interfaces';\r\nimport { VALIDATION_ERROR_MESSAGES, ValidationErrorMap } from 'src/app/dynamic-forms/validation-error-map.interface';\r\nimport { BaseQuestionComponent } from '../../../dynamic-forms/components/base-question.component';\r\n\r\nexport interface InputQuestion extends Question {\r\n  type: \"tel\" | \"text\" | \"number\" | \"email\" | \"file\" | \"password\";\r\n  hideable?: boolean;\r\n  defaultHidden?: boolean;\r\n  resetable?: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-input-question',\r\n  template: `\r\n    <mat-form-field [color]=\"question.color || 'accent'\" class=\"w-100\">\r\n      <mat-label *ngIf=\"question.label\">{{ question.label }}</mat-label>\r\n\r\n      <input matInput \r\n        [type]=\"hideField ? 'password' : (question.type === 'password' ? 'text' : question.type)\" \r\n        [placeholder]=\"question.placeholder\" \r\n        [formControl]=\"control\" \r\n        [required]=\"required\" />\r\n\r\n      <mat-icon *ngIf=\"question.hideable\" [color]=\"question.color || 'accent'\" matSuffix \r\n        (click)=\"hideField = !hideField\">\r\n        {{hideField ? 'visibility_off' : 'visibility'}}\r\n      </mat-icon>\r\n\r\n      <mat-hint *ngIf=\"question.hint\">{{ question.hint }}</mat-hint>\r\n\r\n      <button mat-icon-button matSuffix *ngIf=\"question.resetable && !control.disabled && control.value\" aria-label=\"Clear\" \r\n        (click)=\"control.setValue(''); control.markAsDirty()\">\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n\r\n      <mat-error *ngIf=\"control.dirty && control.invalid\">\r\n        {{ getValidationErrorMessage() }}\r\n      </mat-error>\r\n    </mat-form-field>\r\n  `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class InputQuestionComponent extends BaseQuestionComponent<InputQuestion> \r\n  implements QuestionComponent {\r\n\r\n  hideField: boolean;\r\n\r\n  constructor(@Inject(VALIDATION_ERROR_MESSAGES) validationErrorMessages: ValidationErrorMap) { \r\n    super(validationErrorMessages) \r\n  }\r\n\r\n  protected onQuestionChanges(question: InputQuestion): void { \r\n    super.onQuestionChanges(question);\r\n    this.hideField = question.defaultHidden;\r\n  }\r\n\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\nimport { AppButton } from '../interfaces/app-button.interface';\r\nimport { ButtonTypes } from '../enums/button-types.enum';\r\n\r\n@Pipe({\r\n  name: 'transformButtons'\r\n})\r\nexport class TransformButtonsPipe implements PipeTransform {\r\n\r\n  transform(buttons: AppButton[], newType: ButtonTypes): AppButton[] {\r\n    if(!buttons) return buttons; //No buttons no roles\r\n\r\n    let result: AppButton[] = [];\r\n\r\n    for(let i = 0; i < buttons.length; i++){\r\n        result.push({...buttons[i], type: newType});\r\n    }\r\n    \r\n    return result;\r\n  }\r\n\r\n}\r\n","export function _trackById(index: number, entity: {id: any}){ \r\n    return entity.id \r\n}","import { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'reverseArray'\n})\nexport class ReverseArrayPipe implements PipeTransform {\n\n  transform(arr: any[]) {\n    return arr?.reverse();\n  }\n\n}\n","<div fxLayout=\"column\" class=\"h-100 primary-light\" style=\"position:relative;z-index:1\">\r\n  <span  class=\"primary\" style=\"z-index:1\"\r\n    [ngClass]=\"disableElevation ? '' : 'mat-elevation-z2'\" >\r\n    \r\n    <ng-content select=\"[navbar]\"></ng-content>\r\n\r\n  </span>\r\n\r\n  <div fxFlex style=\"overflow-y:auto;\">\r\n    <ng-content>\r\n  \r\n    </ng-content>\r\n  </div>\r\n\r\n  <div style=\"position:absolute;right:0;bottom:0;\" class=\"m-2\" *ngIf=\"fabs\"\r\n      fxLayout=\"column\" fxLayoutGap=\"4px\">  \r\n      <app-button class=\"fadeInRight\" \r\n        *ngFor=\"let fab of fabs | transformButtons : ButtonTypes.Fab | reverseArray; trackBy: trackByFab\" \r\n        [config]=\"fab\">\r\n      </app-button>\r\n  </div>\r\n\r\n  <router-outlet #outlet=\"outlet\"></router-outlet>\r\n\r\n</div>\r\n","import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';\r\nimport { ButtonTypes } from 'src/app/shared-app/enums';\r\nimport { _trackById } from 'src/app/shared-app/helpers/trackby/track-by-id.helper';\r\nimport { AppButton } from 'src/app/shared-app/interfaces/app-button.interface';\r\nimport { _trackByAppButton } from 'src/app/shared-app/track-by-app-button';\r\n@Component({\r\n  selector: 'app-main-skeleton',\r\n  templateUrl: './main-skeleton.component.html', \r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class MainSkeletonComponent{\r\n  ButtonTypes = ButtonTypes;\r\n\r\n  @HostBinding('class.overlay-page') @Input() overlayMode: boolean;\r\n  @Input() fabs: AppButton[];\r\n  @Input() disableElevation: boolean;\r\n\r\n  constructor(){ }\r\n\r\n  trackByFab = _trackByAppButton;\r\n\r\n  trackByChipRow = _trackById;\r\n\r\n}\r\n","\r\nimport { FormGroup } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { startWith, map } from 'rxjs/operators';\r\nimport { ControlHook } from '../interfaces';\r\n\r\nexport function _getControlObserver$<TResponse>(hook: ControlHook<TResponse>, form: FormGroup, ignoreInitial?: boolean): Observable<TResponse>{\r\n    const control = form.get(hook.controlName);\r\n    \r\n    if(ignoreInitial) return control.valueChanges.pipe(map(hook.callback))  \r\n\r\n    return control.valueChanges.pipe(\r\n        startWith(control.value),\r\n        map(hook.callback)\r\n    )  \r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({name: 'func'})\r\nexport class FuncPipe implements PipeTransform { \r\n    transform(fn: any, ...args: any[]): any {\r\n        if(fn instanceof Function) return(fn.apply(null, args));\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///"}
{"version":3,"sources":["./src/app/shared/form/form.service.ts","./src/app/shared/form/index.ts","./src/app/users/save-user/save-user-state-command.interface.ts","./src/app/users/save-user/save-user.http.effect.ts","./src/app/users/save-user/save-user.reducer.ts","./src/app/users/update-user-password.http.effect.ts","./src/app/shared/constants/model-forms/save-user-forms.const.ts","./src/app/shared/form/validators/is-unique.async.validator.ts","./src/app/users/save-user/user-form-to-save-model.adapter.ts","./src/app/users/users.facade.ts","./src/app/users/user-list/user-card/user-card.component.html","./src/app/users/user-list/user-card/user-card.component.ts","./src/app/users/user-list/user-list.component.html","./src/app/users/user-list/user-list.component.ts","./src/app/users/users-routing.module.ts","./src/app/users/users.module.ts"],"names":["matBottomSheet","open","config","this","data","formConfig","navConfig","submitCallback","formComponent","formState$","formState","FormService","SaveUserActionId","handle$","actions$","pipe","map","x","actionId","propagate","request","createHttpRequest","action","stateSnapshot","createHttpBody","command","saveAction","entity","password","SaveUserHttpEffect","SaveUserReducer","UpdateUserPasswordActionId","apiUrl","userName","method","body","UpdateUserPasswordHttpEffect","AvailableRoles","Object","keys","filter","Leder","key","UniqueUserNameControl","required","asyncStateValidators","s$","data$","s","options","users","control","find","value","RoleControl","name","type","valueGetter","role","questions","component","question","placeholder","optionsGetter","validators","maxLength","PasswordControl","hideable","defaultHidden","minLength","EmployerControl","hideOnValueChange","controlName","callback","Oppdragsgiver","CreateUserForm","submitText","controls","EditUserForm","getRawValue","disabledControls","input","adapt","employerId","convertFormStateToEntity","store","sortedUsers$","selectProperty$","sortByRole","grouped","result","concat","selectProperty","updatePassword","newPassword","console","log","dispatch","UsersFacade","Roles","UserCardComponent","routes","path","facade","modelFormService","formService","ButtonTypes","users$","openUserForm","entityId","stateProp","dynamicForm","adapter","openNewPasswordForm","initialValue","title","val","trackByUser","buttons","icon","aria","allowedRoles","UserListComponent","UsersRoutingModule","forChild","UsersModule","provide","useClass","multi","useValue"],"mappings":"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","file":"18.fcbad1e1dfb1eb179b1a.js","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { MatBottomSheet, MatBottomSheetRef } from '@angular/material/bottom-sheet';\r\nimport { Observable, of } from 'rxjs';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { FormSheetWrapperComponent } from './form-sheet-wrapper.component';\r\nimport { DynamicFormComponent } from 'src/app/dynamic-forms/components/dynamic-form.component';\r\nimport { DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { FormSheetWrapperConfig } from './interfaces';\r\n\r\nexport interface FormServiceConfig<TForm, TFormState>{\r\n  formConfig: DynamicForm<TForm, TFormState>, \r\n  navConfig: MainTopNavConfig,\r\n  formState?: TFormState | Observable<TFormState>,\r\n  submitCallback?: (val: TForm) => void\r\n}\r\n\r\n@Injectable({ providedIn: \"any\" })\r\nexport class FormService {\r\n\r\n  constructor(private matBottomSheet: MatBottomSheet) {}\r\n\r\n  open<TForm, TFormState>(config: FormServiceConfig<TForm, TFormState>)\r\n  : MatBottomSheetRef<FormSheetWrapperComponent, TForm> {      \r\n    return this.matBottomSheet.open(FormSheetWrapperComponent, { \r\n      data: <FormSheetWrapperConfig<DynamicForm<TForm, TFormState>, any, TForm>>{\r\n        formConfig: config.formConfig, \r\n        navConfig: config.navConfig, \r\n        submitCallback: config.submitCallback,\r\n        formComponent: DynamicFormComponent,\r\n        formState$: config.formState instanceof Observable ? config.formState : of(config.formState)\r\n      } \r\n    });\r\n  }\r\n\r\n}\r\n","export * from './interfaces'\r\nexport * from './form.service';","import { User } from 'src/app/core/models';\r\nimport { SaveModelStateCommand } from 'src/app/model/state/save-model/save-model-action.const';\r\n\r\nexport const SaveUserActionId = \"SAVE_USER\"\r\n\r\nexport interface SaveUserStateCommand extends SaveModelStateCommand<User>{\r\n    password: string;\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { HttpActionId, HttpCommand } from 'src/app/core/services/http/state/http.effect';\r\nimport { SaveModelHttpEffect } from 'src/app/model/state/save-model/save-model.http.effect';\r\nimport { ActionType } from 'src/app/shared-app/enums';\r\nimport { DispatchedAction } from 'src/app/state/action-dispatcher';\r\nimport { StateAction } from 'src/app/state/interfaces';\r\nimport { Effect } from 'src/app/state/interfaces/effect.interface';\r\nimport { listenTo } from 'src/app/state/operators/listen-to.operator';\r\nimport { SaveUserActionId, SaveUserStateCommand } from './save-user-state-command.interface';\r\n\r\n@Injectable({providedIn: 'root'})\r\nexport class SaveUserHttpEffect extends SaveModelHttpEffect implements Effect<SaveUserStateCommand> {\r\n\r\n    constructor(){ super() }\r\n\r\n    handle$(actions$: Observable<DispatchedAction<SaveUserStateCommand>>): Observable<StateAction> {\r\n        return actions$.pipe(\r\n            listenTo([SaveUserActionId]),\r\n            map(x => { return <HttpCommand>{\r\n                actionId: HttpActionId, propagate: true,\r\n                request: super.createHttpRequest(x.action),\r\n                stateSnapshot: x.stateSnapshot\r\n            }}),\r\n        )\r\n    }\r\n\r\n    protected createHttpBody(command: SaveUserStateCommand): any {\r\n        if(command.saveAction === ActionType.Update) return command.entity;\r\n        return {...command.entity, password: command.password};\r\n    }\r\n\r\n}","\r\nimport { SaveModelReducer } from 'src/app/model/state/save-model/save-model.reducer';\r\nimport { Reducer } from 'src/app/state/interfaces';\r\nimport { SaveUserActionId } from './save-user-state-command.interface';\r\n\r\nexport const SaveUserReducer: Reducer<any> = {  \r\n    ...SaveModelReducer,\r\n    actionId: SaveUserActionId\r\n}","import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { ApiUrl } from '../core/api-url.enum';\r\nimport { HttpRequest } from '../core/services/http/interfaces';\r\nimport { HttpActionId, HttpCommand } from '../core/services/http/state/http.effect';\r\nimport { DispatchedAction } from '../state/action-dispatcher';\r\nimport { StateAction } from '../state/interfaces';\r\nimport { Effect } from '../state/interfaces/effect.interface';\r\nimport { listenTo } from '../state/operators/listen-to.operator';\r\n\r\nexport const UpdateUserPasswordActionId = \"UPDATE_USER_PASSWORD\";\r\n\r\nexport interface UpdateUserPasswordCommand extends StateAction {\r\n    newPassword: string, userName: string\r\n}\r\n\r\n@Injectable()\r\nexport class UpdateUserPasswordHttpEffect implements Effect<UpdateUserPasswordCommand> {\r\n\r\n    constructor(){}\r\n\r\n    handle$(actions$: Observable<DispatchedAction<UpdateUserPasswordCommand>>): Observable<StateAction> {\r\n        return actions$.pipe(\r\n            listenTo([UpdateUserPasswordActionId]),\r\n            map(x => { return <HttpCommand>{\r\n                actionId: HttpActionId, propagate: true,\r\n                request: <HttpRequest>{\r\n                    apiUrl: `${ApiUrl.Users}/${x.action.userName}/NewPassword`,\r\n                    method: \"PUT\", \r\n                    body: x.action\r\n                },\r\n                stateSnapshot: x.stateSnapshot\r\n            }}),\r\n        )\r\n    }\r\n}","import { Validators } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\nimport { User } from 'src/app/core/models';\r\nimport { DynamicControl, DynamicForm } from 'src/app/dynamic-forms/interfaces';\r\nimport { Roles } from 'src/app/shared-app/enums';\r\nimport { StateUsers, StateEmployers } from 'src/app/state/interfaces';\r\nimport { InputQuestionComponent, InputQuestion } from '../../components/dynamic-form-questions/input-question.component';\r\nimport { SelectQuestionComponent, SelectQuestion } from '../../components/dynamic-form-questions/select-question.component';\r\nimport { isUniqueAsyncValidator } from '../../form/validators/is-unique.async.validator';\r\nimport { SaveModelFormState } from '../../model-form';\r\nimport { EmailControl, EmployerSelectControl, FirstNameControl, LastNameControl, PhoneNumberControl, UserNameControl } from '../common-controls.const';\r\n\r\nexport interface UserForm extends User {\r\n    password?: string;\r\n}\r\n\r\ntype FormState = SaveModelFormState<StateUsers & StateEmployers>;\r\n\r\nconst AvailableRoles = Object.keys(Roles).filter(x => x !== Roles.Leder).map(key => Roles[key] as string);\r\n\r\nconst UniqueUserNameControl = {...UserNameControl, required: true,     \r\n    asyncStateValidators: [\r\n    (s$: Observable<FormState>) => \r\n        isUniqueAsyncValidator(s$.pipe(map(s => s?.options?.users)), \"userName\")\r\n    ],\r\n}\r\nconst RoleControl = <DynamicControl<UserForm, FormState>>{ name: \"role\", required: true,\r\n    type: \"control\", valueGetter: (s: UserForm) => s?.role, questions: [{\r\n        component:  SelectQuestionComponent,\r\n        question: <SelectQuestion<string>>{\r\n            placeholder: \"Rolle\",\r\n            optionsGetter: (s: FormState) => AvailableRoles\r\n        }, \r\n    }], \r\n    validators: [ Validators.maxLength(100)] \r\n}\r\nconst PasswordControl = <DynamicControl<UserForm, FormState>>{ name: \"password\", required: true,\r\n    type: \"control\", questions: [{\r\n        component:  InputQuestionComponent,\r\n        question: <InputQuestion>{placeholder: \"Passord\", hideable: true, defaultHidden: true}, \r\n    }], \r\n    validators: [Validators.minLength(7), Validators.maxLength(100)] \r\n}\r\nconst EmployerControl = {\r\n    ...EmployerSelectControl, \r\n    questions: [{...EmployerSelectControl.questions[0], \r\n        hideOnValueChange: {controlName: \"role\", callback: (role: string) => role !== Roles.Oppdragsgiver}}]\r\n}\r\n\r\nexport const CreateUserForm: DynamicForm<UserForm, FormState> = {\r\n    submitText: \"Legg til\",\r\n    controls: [\r\n        UniqueUserNameControl,\r\n        PasswordControl,\r\n        {...FirstNameControl, required: true},\r\n        {...LastNameControl, required: true},\r\n        RoleControl,\r\n        EmployerControl,\r\n        PhoneNumberControl,\r\n        EmailControl, \r\n    ],\r\n}\r\n\r\nexport const EditUserForm: DynamicForm<UserForm, FormState> = {\r\n    submitText: \"Oppdater\", getRawValue: true, disabledControls: {userName:true},\r\n    controls: [ \r\n        UniqueUserNameControl,\r\n        {...FirstNameControl, required: true},\r\n        {...LastNameControl, required: true},\r\n        RoleControl,\r\n        EmployerControl,\r\n        PhoneNumberControl,\r\n        EmailControl, \r\n    ],\r\n}\r\n\r\n","import { AbstractControl, AsyncValidatorFn } from '@angular/forms';\r\nimport { Observable } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n    export function isUniqueAsyncValidator(data$: Observable<any[]>, identifier?: string): AsyncValidatorFn{ \r\n        return (control: AbstractControl): Observable<{[key: string]: any} | null> => {\r\n          return data$.pipe(map(data => {\r\n              let findFunc: (x: any) => boolean;\r\n              if(identifier) findFunc = (x: any) => x[identifier] === control.value;\r\n              else findFunc = (x: any) => x === control.value;\r\n              \r\n              const invalid = data.find(findFunc); \r\n              return invalid ? {'isunique': {value: control.value}} : null;\r\n          }))\r\n        };\r\n    }\r\n  ","import { User } from 'src/app/core/models';\r\nimport { BaseFormToSaveModelStateCommandAdapter } from 'src/app/model/abstracts/base-form-to-save-model-state-command.adapter';\r\nimport { Roles } from 'src/app/shared-app/enums';\r\nimport { UserForm } from 'src/app/shared/constants/model-forms/save-user-forms.const';\r\nimport { ModelFormToSaveModelInput } from 'src/app/shared/model-form';\r\nimport { SaveUserActionId, SaveUserStateCommand } from './save-user-state-command.interface';\r\n\r\nexport class UserFormToSaveModelAdapter extends BaseFormToSaveModelStateCommandAdapter<User, UserForm>\r\n    implements SaveUserStateCommand{\r\n\r\n    actionId: string = SaveUserActionId;\r\n    password: string;\r\n    \r\n    constructor(input:  ModelFormToSaveModelInput<UserForm>){\r\n        super(input);\r\n    }\r\n\r\n    protected adapt(): void{\r\n        let entity = this.input.formState;\r\n        if(entity.role !== Roles.Oppdragsgiver) entity.employerId = null;\r\n        this.password = entity.password;\r\n        super.adapt();\r\n    }\r\n\r\n    protected convertFormStateToEntity(): void{\r\n        delete this.input.formState.password;\r\n        this.entity = this.input.formState;\r\n    }\r\n}","import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { map } from \"rxjs/operators\";\r\nimport { User } from \"src/app/core/models\";\r\nimport { Roles } from '../shared-app/enums';\r\nimport { _groupBy } from '../shared-app/helpers/array/group-by.helper';\r\nimport { Store } from '../state/store';\r\nimport { StoreState } from './store-state';\r\nimport { UpdateUserPasswordActionId, UpdateUserPasswordCommand } from './update-user-password.http.effect';\r\n\r\n@Injectable({providedIn: 'any'})\r\nexport class UsersFacade {\r\n\r\n  sortedUsers$: Observable<User[]> = \r\n    this.store.selectProperty$<User[]>(\"users\").pipe(map(x => this.sortByRole(x)));\r\n  \r\n  get users(): User[]{ return this.store.selectProperty(\"users\"); }\r\n\r\n  constructor(private store: Store<StoreState>) { }\r\n\r\n  updatePassword(userName: string, newPassword: string): void{\r\n    console.log(userName)\r\n    this.store.dispatch(<UpdateUserPasswordCommand>{\r\n      actionId: UpdateUserPasswordActionId, userName, newPassword\r\n    })\r\n  }\r\n  \r\n  private sortByRole = (users: User[]): User[] => {\r\n    if(!users) return [];\r\n\r\n    let grouped = _groupBy(users, \"role\"); \r\n    let result = [];\r\n\r\n    for(let role of Object.keys(Roles).map(key => Roles[key])) \r\n      if(grouped[role]) result = result.concat(grouped[role])\r\n\r\n    return result;\r\n  }\r\n}\r\n","<app-list-card rippleDisabled=\"true\" >\n    <mat-icon left-side>{{ (user.role === Roles.Oppdragsgiver) ? 'work' : 'person' }}</mat-icon>\n    \n    {{ user.lastName }}, {{ user.firstName }}\n\n    <span right-side fxLayout=\"row\">\n        <a *ngIf=\"user.phoneNumber\" style=\"color:green\" mat-icon-button href=\"tel:{{ user.phoneNumber }}\">\n            <mat-icon>phone</mat-icon>\n        </a>   \n        <app-button *ngIf=\"newPasswordButton && user.role != Roles.Leder\" [config]=\"newPasswordButton\"></app-button>\n        <app-button *ngIf=\"editButton && user.role != Roles.Leder\" [config]=\"editButton\"></app-button>\n    </span>\n\n</app-list-card>","import { Component, Input, ChangeDetectionStrategy } from '@angular/core';\r\nimport { Roles } from 'src/app/shared-app/enums';\r\nimport { User } from 'src/app/core/models';\r\nimport { AppButton } from 'src/app/shared-app/interfaces';\r\n\r\n@Component({\r\n  selector: 'app-user-card',\r\n  templateUrl: './user-card.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class UserCardComponent {\r\n  Roles = Roles;\r\n  \r\n  @Input() user: User;\r\n  @Input() editButton: AppButton;\r\n  @Input() newPasswordButton: AppButton;\r\n  \r\n  constructor() { }\r\n\r\n}\r\n","<app-main-skeleton>\r\n\r\n  <app-main-top-nav-bar navbar [config]=\"navConfig\" >\r\n  </app-main-top-nav-bar>\r\n\r\n  <div class=\"pl-1 pr-1 pb-1 max-width\" *ngIf=\"users$ | async else loading; let users;\">\r\n\r\n    <app-user-card *ngFor=\"let user of users; trackBy: trackByUser\" \r\n      [user]=\"user\"\r\n      [editButton]=\"{\r\n        icon: 'edit', \r\n        allowedRoles: [Roles.Leder], \r\n        callback: openUserForm, params: [user.userName],\r\n        type: ButtonTypes.Icon\r\n      }\"\r\n      [newPasswordButton]=\"{\r\n        icon: 'vpn_key', \r\n        color: 'accent',\r\n        allowedRoles: [Roles.Leder], \r\n        callback: openNewPasswordForm, params: [user.userName],\r\n        type: ButtonTypes.Icon\r\n      }\">\r\n    </app-user-card>\r\n\r\n  </div>\r\n  \r\n</app-main-skeleton>\r\n\r\n<ng-template #loading>\r\n  <mat-spinner class=\"center-spinner\" color=\"accent\"></mat-spinner>\r\n</ng-template>\r\n\r\n","import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from 'src/app/core/models';\r\nimport { ButtonTypes, Roles } from 'src/app/shared-app/enums';\r\nimport { _trackByModel } from 'src/app/shared-app/helpers/trackby/track-by-model.helper';\r\nimport { MainTopNavConfig } from 'src/app/shared/components/main-top-nav-bar/main-top-nav.config';\r\nimport { UserPasswordFormState, UserPasswordForm } from 'src/app/shared/constants/forms/password-form.const';\r\nimport { UserForm, EditUserForm, CreateUserForm } from 'src/app/shared/constants/model-forms/save-user-forms.const';\r\nimport { FormService } from 'src/app/shared/form';\r\nimport { ModelFormService } from 'src/app/shared/model-form';\r\nimport { UserFormToSaveModelAdapter } from '../save-user/user-form-to-save-model.adapter';\r\nimport { UsersFacade } from '../users.facade';\r\n\r\n@Component({\r\n  selector: 'app-user-list',\r\n  templateUrl: './user-list.component.html',\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class UserListComponent {\r\n  Roles = Roles;\r\n  ButtonTypes = ButtonTypes;\r\n\r\n  users$: Observable<User[]> = this.facade.sortedUsers$;\r\n  navConfig: MainTopNavConfig;\r\n\r\n  constructor(\r\n    private facade: UsersFacade,\r\n    private modelFormService: ModelFormService,\r\n    private formService: FormService) {\r\n      this.navConfig = {\r\n        title:  \"Brukere\",\r\n        buttons: [{\r\n          icon: \"person_add\", \r\n          aria: 'Ny bruker',\r\n          callback: this.openUserForm, \r\n          allowedRoles: [Roles.Leder]\r\n        }]\r\n      };\r\n    }\r\n\r\n  openUserForm = (userName?: string): void => {\r\n    this.modelFormService.open<UserForm>({formConfig: {\r\n      entityId: userName, \r\n      stateProp: \"users\", \r\n      dynamicForm: userName ? EditUserForm : CreateUserForm,\r\n      adapter: UserFormToSaveModelAdapter,\r\n    }});\r\n  }\r\n  \r\n  openNewPasswordForm = (userName?: string): void => {\r\n    this.formService.open<UserPasswordFormState, any>({\r\n      formConfig: {...UserPasswordForm, initialValue: {userName}}, \r\n      navConfig: {title: \"Oppdater passord\"},  \r\n      submitCallback: (val: UserPasswordFormState) => this.facade.updatePassword(val.userName, val.newPassword)\r\n    });\r\n  }\r\n\r\n  trackByUser = _trackByModel(\"users\")\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { UserListComponent } from './user-list/user-list.component';\r\n\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: UserListComponent\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class UsersRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { DeleteModelProviders } from '../model/state/providers.const';\r\nimport { ModelFormModule } from '../shared/model-form/model-form.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { STORE_EFFECTS, STORE_REDUCERS } from '../state/injection-tokens';\r\nimport { StateModule } from '../state/state.module';\r\nimport { SaveUserHttpEffect } from './save-user/save-user.http.effect';\r\nimport { SaveUserReducer } from './save-user/save-user.reducer';\r\nimport { UpdateUserPasswordHttpEffect } from './update-user-password.http.effect';\r\nimport { UserCardComponent } from './user-list/user-card/user-card.component';\r\nimport { UserListComponent } from './user-list/user-list.component';\r\nimport { UsersRoutingModule } from './users-routing.module';\r\n\r\n\r\n@NgModule({\r\n  declarations: [    \r\n    UserListComponent, \r\n    UserCardComponent,\r\n  ],\r\n  imports: [\r\n    SharedModule,\r\n    StateModule,\r\n    ModelFormModule,\r\n    UsersRoutingModule\r\n  ],\r\n  providers: [\r\n    ...DeleteModelProviders,\r\n    {provide: STORE_EFFECTS, useClass: UpdateUserPasswordHttpEffect, multi: true},\r\n    {provide: STORE_EFFECTS, useClass: SaveUserHttpEffect, multi: true},\r\n    {provide: STORE_REDUCERS, useValue: SaveUserReducer, multi: true},\r\n  ],\r\n})\r\nexport class UsersModule {}\r\n"],"sourceRoot":"webpack:///"}